LO MÁS BÁSICO
==============

Empezamos consiguiendo los privilegios para establecer prioridad de tiempo real en nuestros procesos.
Tienes que tener en /etc/security/limits.conf:
@audio   -  rtprio     99
@audio   -  memlock    unlimited
@audio   -  nice    -20
pi   -  rtprio     99
pi   -  memlock    unlimited
pi   -  nice       -20

Puedes comprobar que tienes los límites quitados haciendo:
ulimit -r -l
Nos tiene que salir algo como:
real-time priority (-r) 99
max locked memory (kbytes, -l) unlimited
¡¡¡CUIDADO!!!! COMPRUEBA ESTO EN LOCAL Y NO POR SSH, porque POR SSH PUEDE NO FUNCIONAR Y SÍ EN LOCAL.

Para aprovechar esto,  usaremos una de las dos políticas de REALTIME de LINUX:

-SCHED_FIFO: Usa "chrt -f 80" (le puedes dar hasta 99, pero no se recomienda porque puede causar starvation en algo
que tenga que ejecutar ahí el kernel), que le da prioridad realtime y no suelta la CPU porque no hay otra aplicación con la misma o superior prioridad que la pida (o sea, es FIFO de máxima prioridad), asi que MIENTRAS NO ACABE, COMO LLEGÓ ANTES, NO SUELTA LA CPU ni a palos.

-SCHED_RR: Hay ROUND ROBBIN de máxima prioridad también, con lo cual se reparten rodajas de tiempo de un tamaño determinado continuamente.
Esto se haría con "chrt -r 80". Lo mismo, el 80 es orientativo y 99 no se recomienda.
CUIDADO: ROUND ROBBIN produce más interrupciones del scheduler, por lo que -f es más estable, los programas bailan menos entre una CPU y otra,
y claro, al generarse menos interrupciones del scheduler, las cosas que yo suelo ejecutar van mejor.
Cuidado, porque un RR 99 produce cuelgues incluso si estás ejecutando lo que sea con esa prioridad en CPUs aisladas.

Cuando mires en el TOP, si algo tiene prioridad negativa es que es de tiempo real. Y si tiene prioridad máxima (-f 99 o -r 99) saldrá como RT,
que es prioridad de tiempo real máxima.

RESÚMEN (más abajo están las explicaciones)
=======

PARA TENER TAREAS CON GARANTÍAS DE TIEMPO REAL, ESTO ES, QUE NO SERÁN INTERRUMPIDAS Y SACADAS DE UNA CPU POR OTRAS TAREAS,
NO HACE FALTA RECOMPILAR EL KERNEL, YA QUE LO QUE PERMITE CONFIGURAR EL NIVEL DE REALTIME DEL KERNEL ES SI EL PROPIO KERNEL ES PREEMTIBLE
(MÁS PREEMPTIBLE EN FULL RT QUE EN VOLUNTARY, POR EJEMPLO), PERO ESTO A NOSOTROS NOS DA IGUAL, CON TAL DE QUE SEA UN KERNEL PREEMPTIBLE
HASTA CIERTO PUNTO, QUE YA LO ES POR DEFECTO YA QUE LOS KERNELS MÁS COMUNES COMO EL DE DEBIAN SON PREEMPT).
LO QUE NOS INTERESA ES PODER AISLAR CPUs PARA QUE SÓLO SE EJECUTEN EN ELLAS TAREAS DETERMINADAS, ES DECIR, CREAR CPUs "PRIVILEGIADAS".
PARA ELLO, simplemente añade a los parámetros del kernel:
isolcpus=1-3 nohz_full=1-3
Esto aislaría las CPUs de la 1 a la 3, para que el scheduler no le mande hacer nada ni le lleguen ticks, y dejaría la 0 para housekeeping.
O sea que a las CPU 1,2 y 3, si no les pasamos nada específicamente con taskset, no se ejecuta nada en ellas ni les llegan ticks.
...Esto es para que el scheduler no elija esas CPUs para cosas del kernel ni para ninguna otra tarea multithread (como compilar con -jn),
excepto que yo le diga específicamente que las use mediante taskset.

Para comprobar qué CPUs tenemos aisladas:
cat /sys/devices/system/cpu/isolated

Para comprobar qué CPUs tenemos totalmente tickless:
cat /sys/devices/system/cpu/nohz_full

UNA VEZ AISLADAS LAS CPUs, PARA MANDAR PROGRAMAS A ESAS CPUs SE USA TASKSET.
¡¡¡¡MUCHO OJO!!!!: PARA QUE EL PROGRAMA REALMENTE USE LAS CPUs DE LA LISTA QUE LE PASAS A TASKSET, TIENES QUE CAMBIAR LA POLÍTICA DE SCHEDULING DEL PROCESO, O SI NO SÓLO ELEGIRÁ LA PRIMERA DE LA LISTA (esto es porque la política de scheduling por defecto, SCHED_OTHER, sólo elige la primera CPU, así que usamos SCHED_FIFO o SCHED_RR) . Así que haríamos:
chrt -f 80 taskset -c 1-3 <programa>

Por ejemplo, si tenemos aisladas las CPUs 1,2 y 3, y queremos compilar un programa usando esas tres CPUs, haríamos:
chrt -f 80 taskset -c 1-3 make -j4
(o bien chrt -f 80 taskset -c 1,2,3 make -j4, que es lo mismo).

#################################################################################################
EN RESÚMEN: HABIENDO AISLADO LAS CPUs DEL 1 al 3 CON "isolcpus=1-3 nohz_full=1-3" EN CMDLINE.TXT: 
-Para poner a correr algo no multithread sobre una sola CPU:
taskset -c 3 ./retroarch
-Para lanzar algo multithread (y que por tanto puede aprovechar varios cores) como swanstation:
chrt -f 80 taskset -c 1-3 retroarch -L ...etc
#################################################################################################

Yo uso -f 80, o -f 99..., que es SCHED_FIFO: los programas pillan la CPU y no la sueltan hasta que no acaban.
La alternativa, -r, es SCHED_RR, que reparte rodajas de un tamaño determinado toooodo el rato,
con lo que se generan más interrupciones de scheduling y no nos interesa tanto.
ASÍ QUE USA -f mejor.
CUIDADO con el -r 99: se producen cuelgues.
-Añade a .bashrc:
alias make='chrt -r 1 taskset -c 1-3 make'
..para que make se ejecute en varias CPUs de las aisladas, porque si no sólo correría sobre la CPU de housekeeping.

Para comprobar las interrupciones que han sufrido las CPUs desde el inicio del sistema:
watch -n1 -d 'cat /proc/interrupts'
Lo de -n1 es para que lo muestre actualizado a cada segundo, y -d para que marque los cambios.
Se supone que nohz_full=<grupo de cpus> hace que no reciban su dosis de interrupciones por los ticks del kernel
Para comprobar qué CPUs tenemos tickless:
cat /sys/devices/system/cpu/nohz_full

De todos modos, incluso sin pasar "nohz_full=1-3", si miras watch -n1 -d 'cat /proc/interrupts', verás que las CPUs aisladas no van recibiendo
interrupciones: Se quedan en 39-40 o así, paradas, hasta que ejecutamos algo en ellas, y sólo entonces se incrementa el número de interrupciones
que les llegan.
Te interesa la fila de REESCHEDULING INTERRUPTS, que verás que no se mueve hasta que ejecutas algo en las CPUs aisladas.
LAS CPUs AISLADAS NO RECIBEN INTERRUPCIONES DEL SCHEDULER CUANDO NO SE LAS USA, Y CUANDO SE LAS USA SÍ RECIBEN INTERRUPCIONES DE REESCHEDULING
(a parte de montones de interrupciones por la propia ejecución del programa!!), PERO ES NORMAL QUE RECIBAN INTERRUPCIONES DE REESCHEDULING
PORQUE LOS  PROGRAMAS QUE TÚ EJECUTAS SON MULTITHREAD, ASÍ QUE EL SCHEDULER TIENE QUE REPARTIR ESOS THREADS ENTRE LAS DISTINTAS CPUs
DEL GRUPO DE CPUs AISLADAS.
SÓLO PODRÍAS ESPERAR QUE UNA CPU AISLADA NO RECIBIERA INTERRUPCIONES DE REESCHEDULING SI SÓLO EJECUTASES UN PROGRAMA CON UN SÓLO THREAD EN ÉL,
Y ESO NO PASA CON NADA DE LO QUE EJECUTAS. 
NO PIERDAS EL TIEMPO CON LOS RCU THREADS, SACÁNDOLOS DE LA CPU, PASANDO rcu_nocbs=... NO SIRVE PARA NADA.
UN KERNEL DE 250Hz TAMPOCO ARREGLA NADA.

Luego hay cosillas para disminuir el jittering sin recompilar el kernel. Las pistas las he sacado de aquí:
http://highscalability.com/blog/2015/4/8/the-black-magic-of-systematically-reducing-linux-os-jitter.html

-De las Transparent Huge Pages me olvido, porque al hacer "sudo sysctl -a | grep hugepage" veo que no hay de eso en mi sistema.
En caso de haberlas, mira esto:
 https://unix.stackexchange.com/questions/99154/disable-transparent-hugepages

-Podemos desactivar el swappiness poniendo en el /etc/rc.local:
echo 0 > /proc/sys/vm/swappiness

AJUSTES FINOS QUE NO HACE FALTA HACER
=====================================

Antes de lanzar el emulador, juego o lo que sea, podrías mover el thread de interface GPU<->CPU a una de las 3 CPUs aisladas o privilegiadas:
sudo sh -c 'for i in `pgrep VCHIQ` ; do taskset -pc 1 $i ; done' > /dev/null

O bien, dejar que se reparta entre las 3 si es un programa multithread:
for i in `pgrep VCHIQ` ; do chrt -f -p 80 taskset -pc 1-3 $i ; done

O bien mandarlos a una de las tres CPUs aisladas, y dejar el programa mutithread en las otras dos:
for i in `pgrep VCHIQ` ; do taskset -pc 1 $i ; done
chrt -f 80 tasksel -c 2-3 <programa>
Pero suelo considerar el VCHIQ como "housekeeping", por lo que en la 0 está bien.

Para ver mejor estas cosas en TOP, a parte de activar que se vea la CPU (F y luego darle a D sobre la opción),
puedes poner un periodo más pequeño pusaldo D directamente y metiendo algo como 0.1.
¡¡¡¡OJO!!!! : Un proceso con prioridad -80 tiene prioridad de tiempo real: LAS PRIORIDADES NEGATIVAS SON DE TIEMPO REAL, ES DECIR, LAS MÁS ALTAS QUE EL KERNEL PUEDE OFRECER (hasta donde su preemptiveness lo permita, claro: cuando más preemtivable es un kernel, más puede garantizar que, al menos él, no va a interrumpir a la tarea de prioridad de tiempo real).

###############################################
#BLOQUE DE EXPLICACIONES LÓGICAS DE TODO ESTO #
###############################################

PREFACIO
========

https://www.kernel.org/doc/Documentation/kernel-per-CPU-kthreads.txt
https://www.kernel.org/doc/Documentation/timers/NO_HZ.txt
https://access.redhat.com/sites/default/files/attachments/201501-perf-brief-low-latency-tuning-rhel7-v1.1.pdf (ojo al kernel commandline, pag 12)
https://www.suse.com/c/cpu-isolation-introduction-part-1/ (ojo a la serie completa de entradas del blog sobre el tema)

Se trata de dejar todos los threads del kernel que podamos en UNA sola CPU, que llamaremos "housekeeping CPU",
y el resto de CPUs quedarán libres de jittering ya que estos hilos no corren en ellas.

Los kthreads de RCU podrian no existir si compilamos con CONFIG_PREEMPT=n, pero claro, eso NO interesa para tiempo real, lo dice uno de los docs.

PARTE 1: ISOLCPUS
=================

Para decirle al scheduler que no elija ciertos cores para ejecutar cosas, le pasamos al kernel el parámetro:
isolcpus=1-3
para que sólo elija el core 0 a la hora de pasarle "trabajo".

Además, en combinacion, cogemos y lanzamos nuestro programa "delicado" pegado a una CPU concreta, de las que tenemos aisladas, así:
taskset -c 3 <nombre_programa>

Puede ser una lista de cpus (para programas multithreaded, que son la mayoría), pero para ello tenemos que usar chrt,
ya que si no, el scheduler sólo elegirá una CPU de la lista y lo meterá todo ahí todo el rato:
chrt -f 80 taskset -c 1-3 <nombre_programa>

Esto ocurre porque la política de scheduling por defecto, SCHED_OTHER, sólo elige la primera CPU, así que usamos SCHED_FIFO o SCHED_RR.

PARTE 2: Los TICKS de sistema
=============================

En principio, en los kernels Linux originales, el scheduler va mandando "clock interrupts" a todas las CPUs para que,
al atender a esas interrupciones, las CPUs vayan ejecutando los trozos de código de los diferentes procesos que están corriendo en el sistema,
y que las CPUs se reparten.
A estos "clock interrupts" los vamos a llamar "ticks".

Cuando el scheduler no tiene nada de trabajo que enviarle a una CPU, esa CPU se considera "idle".
O sea, que está idle porque no hay nada que se le pueda mandar hacer.
Vamos, que una CPU sólo puede pasar a "idle" si el scheduler no tiene nada que mandarle hacer. 

Como hemos dicho, originalmente, el scheduler mandaba ticks, con una frecuencia fija, a todas las CPUs, estuviesen idle o estuviesen ocupadas.
Ahora entiendes por qué mandar ticks a una CPU mientras está idle no tiene sentido: no hay nada que ejecutar en ella,
así que hacer que procese los ticks sólo sirve para gastar energía eléctrica, al impedir que entre en un estado de idle profundo que ahorra energía.
¿Para qué queremos mandar ticks a CPUs que no están haciendo nada si no tenemos nada que ponerlas a hacer?

Pues bien: La opción del kernel CONFIG_NO_HZ_IDLE=y lo que hace es que NO SE MANDEN ticks a CPUs que estén idle.
Los kernels más comunes (debian, devuan, etc) vienen con CONFIG_NO_HZ_IDLE=y porque aparentemente son todo ventajas y ninguna desventaja.

Y para controlar esto mismo, tenemos el parámetro del kernel "nohz".
Si ponemos nohz=on, estamos haciendo lo mismo que hace CONFIG_NO_HZ_IDLE=y.
Y si ponemos nohz=off, lo que hacemos es que SÍ SE MANDEN "ticks" a las CPUs mientras están en estado idle,
incluso aunque en el kernel tengamos puesto CONFIG_NO_HZ_IDLE=y.

EN DEFINITIVA, NO NOS CONVIENE PASAR nohz=off, PORQUE NOS INTERESA QUE NO SE MANDEN TICKS A LAS CPUS CUANDO ESTÁN EN ESTADO IDLE,
QUE ES COMO VIENE CONFIGURADO EL KERNEL POR DEFECTO, PARA NO ENVIAR TICKS A LAS CPUS QUE ESTÁN IDLE.

LO QUE SÍ NOS PUEDE INTERESAR ES TENER UNA O VARIAS CPUs TICKLESS, DE MANERA QUE NO SE LES ENVÍEN TICKS: PARA ELLO PASAMOS EL PARÁMETRO
nohz_full=1-3
ESTE PARÁMETRO SE USA NORMALMENTE JUNTO CON isolcpus PARA QUE A LAS CPUs AISLADAS NO SE LES ENVÍEN TICKS:
isolcpus=1-3 nohz_full=1-3

Bibliografía:
https://www.kernel.org/doc/html/v5.0/admin-guide/pm/cpuidle.html (leer la definición de "idle CPU" y la sección "idle CPUs and the scheduler tick")
https://www.suse.com/c/cpu-isolation-introduction-part-1 (si has leido lo anterior, ya puedes entender esto)
https://www.kernel.org/doc/html/latest/timers/no_hz.html (si has leido lo anterior, ya puedes entender esto)

PARTE 3: Los RCU (nada, pasa de esto, no aporta nada).
================

Se puede usar el parámetro del kernel rcu_nocbs=... para especificar qué CPUs descargar de callbacks en tiempo de arranque, por ejemplo con: rcu_nocbs=1,2,3
se dejan las CPUs 1, 2 y 3 sin RCU callbacks y todas irán en la 1. 
También se pueden mover los threads RCU después de arrancar a una CPU concreta, como vamos a ver a continuación, en este caso la 0, con:

for i in `pgrep rcuo` ; do taskset -pc 0 $i ; done

Si lo has hecho bien (con que le pases rcu_nocbs=1,2,3 vale, si tienes las opciones correctas en el kernel),
en TOP tienes que ver que, por ejemplo, estos threads:
rcuop/2
rcuob/2
rcuos/2
rcuop/3
rcuob/3
rcuos/3
...tienen que estar en la CPU 0, a pesar de que son de la 2 y la 3 (para mirarlo, ahí abajo tienes apuntes de TOP de cómo se mira
en qué CPU corrió el thread por última vez).

OTRAS COSAS
===========

En GENERAL SETUP, deshabilitamos el PROFILING SUPPORT (lo que se lleva por delante el oprofile).
Quedaría mirar lo de compilar sin governor, en CPU POWER MANAGEMENT -> CPU FREQUENCY SCALING, y luego poner la velocidad de la CPU a mano.
Mírate "man 2 sched_setaffinity" si quieres controlar que un thread determinado tenga afinidad a una CPU.

CÓMO COMPROBAR EN QUÉ CPU CORRE CADA PROCESO
============================================

En TOP, pulsamos F mientras estamos ejecutándolo. En el menú que nos sale, podemos pulsar D sobre lo que queramos que se vea / que no se vea,
elegimos que se vea el campo "P = Last Used Cpu (SMP)", y le damos a ESCAPE, de manera que podemos ver en qué CPU corre cada cosa.

DUDA: SI USO UN KERNEL CON EL SCHEDULER PUESTO A 100HZ, ¿PUEDO ESPECIFICAR usbhid.jspoll=2 QUE HACE QUE LOS USB SE LEAN A 500HZ?
================================================================================================================================

Sí. El kernel corre sobre HRTIMERS, lo de los 100HZ es la velocidad del sheduler, es decir, cuántas veces por segundo mira a ver qué se ejecuta dónde.
Son cosas distintas e independientes, la granularidad del kernel es mucho mayor que 100HZ... eso es sólo el scheduler.
Y el scheduler, en tus sistemas de no-escritorio, va de sobra a 100Hz para una cosa que ejecutas a la vez (mas el housekeeping del kernel
fuera de las CPUs aisladas).
Así que sí, se puede.
