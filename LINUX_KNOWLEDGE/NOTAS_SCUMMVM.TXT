************RECUPERAR PARTIDAS EN EL GABRIEL KNIGHT DE SCUMMVM**********************************************************************************

A los datos del juego les falta el archivo
VERSION
Con el contenido
01.100.000

Sin este archivo, podrás salvar pero luego no te deja recuperar la partida porque dice que es de otra versión. Así que lo creamos a mano y listo.

*************Crosscompilar scummvm en el PC para la Raspberry Pi*****************

Las instrucciones para compilar el scummvm para la Pi las he puesto en la wiki del scummvm, en http://wiki.scummvm.org/index.php/Compiling_ScummVM/RPI#Configuring_ScummVM
Empieza haciendo lo que dice esa guía, o sea:

export RPI_ROOT=/opt/rpi_root
PATH=$PATH:$HOME/tools/arm-bcm2708/arm-rpi-4.9.3-linux-gnueabihf/bin

Al pasarle como host la Raspberry Pi (--host=raspberrypi), compilará contra SDL2 automáticamente, porque se pone _sdl-config a sdl2-config.

Para compilación rápida de prueba, sólo con engine SCUMMVM:

CFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" \
CXXFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" \
./configure --disable-debug --enable-release --enable-optimizations \
--opengl-mode=gles2 --force-opengl-game-es2 --disable-hq-scalers \
--disable-eventrecorder --disable-cloud --disable-savegame-timestamp \
--enable-mt32emu --enable-nuked-opl --disable-timidity --disable-flac --disable-alsa \
--enable-vorbis --disable-mad --disable-tremor --disable-theoradec \
--disable-taskbar --disable-sdlnet --disable-libcurl --enable-plugins --default-dynamic \
--disable-engine=hugo,drascula,hopkins,teenagent,tony,tsage,tucker,draci,toltecs,wintermute,touche,parallaction,composer,sword25,tinsel,queen,saga2,cge,cine,cruise,lure,cge2,mortevielle,voyeur,gnap,mads,bbvs,sherlock,access,lab,titanic,plumbers,illusions,bladerunner,cryomni3d,prince,hdb,supernova,pegasus,buried,myst3,zvision,dragons,griffon,director,trecision,ngi,petka,private,twine,stark,adl,agi,mohawk,dreamweb,grim,groovie,agos,ags,kyra,saga,sci,sky,made,neverhood,toon,ultima,sword1,sword2,xeen,glk

Y ya podemos hacer un make -j8 VERBOSE_BUILD=1 si nos apetece. 

*********COMPILAR SCUMMVM EN LOCAL EN LA PI***************

==PARA RELEASE, CON PLUGINS DINÁMICOS==

Para hacer una release (engines como plugins dinámicos, todos los que vienen activados por defecto estarán activados, necesitarás libjpeg-dev, libpng-dev y libvorbis-dev, aunque estos no tienen por qué ser sus nombres exatctos, para engines como Sword 2.5 o Wintermute):

COMO LO VENIMOS COMPILANDO AHORA: CON PLUGINS DINÁMICOS Y ENGINES SELECTOS:
(Hay que instalar libmpeg2-dev para que funcionen los Broken Sword)

CFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" \
CXXFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" \
./configure --disable-debug --enable-release --enable-optimizations \
--opengl-mode=gles2 --force-opengl-game-es2 --disable-hq-scalers \
--disable-eventrecorder --disable-cloud --disable-savegame-timestamp \
--enable-mt32emu --enable-nuked-opl --disable-timidity --disable-flac --disable-alsa \
--enable-vorbis --disable-mad --disable-tremor --disable-theoradec \
--disable-taskbar --disable-sdlnet --disable-libcurl --enable-plugins --default-dynamic \
--disable-engine=hugo,drascula,hopkins,teenagent,tony,tsage,tucker,draci,toltecs,wintermute,touche,parallaction,composer,sword25,tinsel,queen,saga2,cge,cine,cruise,lure,cge2,mortevielle,voyeur,gnap,mads,bbvs,sherlock,access,lab,titanic,plumbers,illusions,bladerunner,cryomni3d,prince,hdb,supernova,pegasus,buried,myst3,zvision,dragons,griffon,director,trecision,ngi,petka,private,stark,ags,asylum,twine

Si no le pasas -force-opengl-game-es2, intentará usar OpenGL normal para el OpenGL-in-game, así que tendrías que editar el configure
y cambiar -lGL por -lOpenGL.

Para que no salga el cursor de sistema, editamos backends/graphics/sdl/sdl-graphics.cpp y en la función SdlGraphicsManager::showMouse comentamos todo el "if" y lo que hay dentro.

Para tener un tema, copia el directorio gui/themes/scummremastered que viene con los sources a ~/scummvm/themes,
y en el scummvm pon en PATHS el path de los themes apuntando a gui/themes, y luego en MISC selecciona el tema.

Y ya podemos hacer un make -j8 VERBOSE_BUILD=1 si nos apetece. 

Para poner un buffer de audio más pequeño, editamos backends/mixer/sdl/sdl-mixer.cpp y ponemos el número de milisegundos que queramos en la línea:
samples = freq / (1000.0 / 54);
(Por si quieres usarlo en otros sources, eso luego se usa en SDL_OpenAudio(). Por ahí tienes que mirar qué latencia hay configurada).

Para compilar con LTO (hay que pasarle el AR, NM y RANLIB, si no falla al compilar con LTO).
Tienes que hacer un par de cambios en el script configure:
-ve a sección "Check for endianness" y pon _endian=little sin que se haga la comprobación (el problema es que el objeto generado para testear ahí el endianness,
si lo compilas con -flto, no contendrá las cadenas que se buscan. No lo vamos a arreglar, así que ponemos el endianness manualmente y listo.


*************Compilar core Scummvm para RetroArch******************************************************************************************

-Clonamos el repo de Scummvm upstream:
git clone --depth 1 https://github.com/scummvm/scummvm.git

-Nos metemos en scummvm/backends/platform, y clonamos el repo del backend libretro en el directorio "libretro", y entramos en el directorio
de compilación:
cd scummvm/backends/platform
git clone --depth 1 https://github.com/diablodiab/libretro-scummvm-backend.git libretro
cd libretro/build

-Creamos nuestra lista personal de engines que queremos tener activos, y la llamaremos custom.config
(si necesitas activar otros engines, te puedes traer la línea correspondiente de otro .config de los que vienen incluidos):
ENABLE_ADL = $(ENABLED)
ENABLE_AGI = $(ENABLED)
ENABLE_AGOS = $(ENABLED)
ENABLE_DRASCULA = $(ENABLED)
ENABLE_DREAMWEB = $(ENABLED)
ENABLE_EOB = $(ENABLED)
ENABLE_GOB = $(ENABLED)
ENABLE_GLK = $(ENABLED)
ENABLE_GRIM = $(ENABLED)
ENABLE_GROOVIE = $(ENABLED)
ENABLE_KYRA = $(ENABLED)
ENABLE_LOL = $(ENABLED)
ENABLE_MADE = $(ENABLED)
ENABLE_MOHAWK = $(ENABLED)
ENABLE_MYST = $(ENABLED)
ENABLE_MYSTME = $(ENABLED)
ENABLE_NEVERHOOD = $(ENABLED)
ENABLE_RIVEN = $(DISABLED)
ENABLE_SAGA = $(ENABLED)
ENABLE_SCI = $(ENABLED)
ENABLE_SCUMM = $(ENABLED)
ENABLE_SCUMM_7_8 = $(ENABLED)
ENABLE_SKY = $(ENABLED)
ENABLE_SWORD1 = $(ENABLED)
ENABLE_SWORD2 = $(ENABLED)
ENABLE_TOON = $(ENABLED)
ENABLE_ULTIMA = $(ENABLED)
ENABLE_XEEN = $(ENABLED)

-Editamos Makefile.common, y en vez de dejar que se haga include de otros .config, quitamos todo eso y que se haga include
sólo de nuestro config custom:
include $(LIBRETRO_DIR)/build/custom.config

-Compilamos: make -j4

*************Compilar con SDL2 estáticas en lugar de dinámicas*****************************************************************************

La cosa es como siempre compilar contra el .a en lugar de compilar contra el .so de las librerías.
En el script configure, busca dónde se le pasan las libs de SDL2. Es en esta sección:

#
# Setup SDL specifics for SDL based backends
#
case $_backend in
        androidsdl | dingux | gph | linuxmoto | maemo | openpandora | samsungtv | sdl) 
                find_sdlconfig
                append_var INCLUDES "`$_sdlconfig --prefix="$_sdlpath" --cflags`"
                append_var LIBS "`$_sdlconfig --prefix="$_sdlpath" --libs`"


Pues bien: la línea de "append_var LIBS" la dejamos así:

append_var LIBS "-L /opt/vc/lib -L/usr/lib -Wl,-rpath,/usr/lib -Wl,--enable-new-dtags /usr/lib/libSDL2.a -ldl -lpthread -lbcm_host"

OJO que EL ÓRDEN IMPORTA: tienes que poner antes libSDL2.a que las librerías de las que depende.
Has de pasar esas librerías (y pasarlas como digo DESPUÉS de pasar el .a) o si no de dará errores estilo "undefined reference to symbol 'sem_getvalue", etc
porque no encontrará las funciones de las librerías de las que depende libSDL2.a
...Y naturalmente, la ruta de la librería estática libSDL2.a tendrá que ser la que tenga en ese sistema en concreto.
Ya sólo es ejecutar el configure como lo hagas normalmente, make, y debería funcionar.

Si le haces un ldd al ejecutable de scummvm resultante, verás que ya no depende de ninguna librería externa de las SDL2.

*********Compilar contra librerías externas (libfluidsynth, libjpeg...)**************

En la versión publicada del scummvm, no he tenido en cuenta esta posibilidad porque, primero, en principio no hacia falta ya que se prefiere el sonido
original de los juegos, y en segundo lugar, como le pasamos rutas de includes que se necesitan para estas librerías (/usr/include/arm-linux-gnueabihf)
y que producen un ENORME chorro de warnings si no compilamos según el estándard cxx11, además de que al pasarle las nuevas rutas de includes
va a encontrtar las librerías de GLES... pues no lo hemos hecho por defecto.

Así que si queremos compilar un scummvm que use libflac, libvorbois (ogg), fluidsynth o cualquier otra librería instalada por nosotros, tenemos que
añadir estas cosas al configure, donde añades las demás movidas cuando host=raspberrypi:


                       # This is so optional installed libraries includes (fluidsynth, flac...) are found.
                        append_var CXXFLAGS "-I$RPI_ROOT/usr/include"
                        append_var CXXFLAGS "-I$RPI_ROOT/usr/include/arm-linux-gnueabihf"
                        
SEA LA LIBRERíA QUE SEA, AÑADE EXACTAMENTE ESAS LÍNEAS, y nada más.

Además, pondremos arriba lo de:
_use_cxx11="yes"

Luego configuraríamos con algo como:

./configure --host=raspberrypi --with-sdl-prefix=/opt/rpi_root/usr --disable-debug --enable-release --enable-optimizations --disable-mt32emu --disable-flac --disable-mad --disable-vorbis --disable-tremor --disable-taskbar --disable-timidity --disable-alsa --disable-engine=hugo,drascula,hopkins,teenagent,tony,tsage,tucker,draci,toltecs,wintermute,touche,parallaction,composer,sword25,tinsel,queen,saga2,cge,cine,cruise,lure,cge2,mortevielle,voyeur,gnap,mads,bbvs,sherlock,access,lab,titanic,plumbers,illusions,bladerunner,cryomni3d,prince,hdb,supernova,pegasus,buried,myst3,zvision,dragons,griffon,director,trecision,ngi,petka,private

(Como puedes ver, no hace falta pasarle nada para activar el soporte de fluidsynth: por defecto, si se detectan las cabeceras y libs de fluidsynth, el soporte se activa solo).

ARREGLANDO EL SCROLL EN SCUMMVM LIBRETRO
===========================================

La función relevante es updateScreen en backends/platform/libretro/os.cpp.
Además, en esa fn se blitea a screen, que luego se sube a retroarch en libretro.cpp usando video_cb aquí:
video_cb(screen.pixels, screen.w, screen.h, screen.pitch);

DÓNDE ENCONTRAR LOS JUEGOS DE SCUMMVM
=======================================

http://the-eye.eu/public/Games/ScummVM/Working/

MYST EN ESPAÑOL
================

A la versión de MYST-ME que tienes le quitaste los demás idiomas, así que como sólo tiene inglés y español, el SCUMMVM no detecta los idiomas
y no te deja elegir el español.
La solución es tan simple como editar el scummvm.ini y cambiar "en" por "es" en la entrada del myst-me.
