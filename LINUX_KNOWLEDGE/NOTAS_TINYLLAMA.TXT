--Lo primero, flasheamos la BIOS al SOC, particionamos/formateamos la MicroSD a FAT32, y le instalamos MSDOS 6.22, para todo lo cual seguimos estas instrucciones:
https://github.com/eivindbohler/tinyllama2#programming-the-bios
https://github.com/eivindbohler/tinyllama2#installing-dos

PARA INSTALAR UN MS-DOS PROPIO, simplemente coge la instalación que tienes guardada en el disco de backup, cópiala tal cual
a la SD, arranca en el Virtual Floppy ese del core, y escribe "SYS C:", y ya tiene que arrancar.


CONCEPTOS PREVIOS
=================

PARA SUMAR Y RESTAR DIRECCIONES EN HEXADECIMAL "A OJO":
Un incremento unitario en la última cifra es una unidad en decimal.
Un incremento unitario en la penútima cifra son 16 unidades en decimal.
Un incremento unitario en la antepenútima cifra son 16 * 16 = 256 unidades en decimal.
..Etc. Y Ya con esto, en cuanto veas un área tipo A000-A100 sabes intuitivamente cuánta memoria es.

LAS ÁREAS QUE SE USAN EN LA GESTIÓN DE MEMORIA DE MSDOS, COMO "A000H - A040H" ESTÁN MEDIDAS EN BLOQUES DE 16KB CADA UNO.
Así que si restamos A000H-A040H = 40H, que 40H es 64 en decimal, con lo que son 64 * 16 = 1024 KB.
Si en MSD o en CHEKIT vemos un área que es algo así como 9F80 - 9FC0, vemos que es una diferencia de 4 unidades en la penúltima cifra
(al ser la penúltima cifra, son 16 por cada unidad de incremento)
con lo que son 16 * 4 = 64 bloques, y cada bloque son 16 K, así que 64 * 16 = 1024 KB.

CONCEPTOS
=========

UMBs (=UMA): Upper Memory Blocks, o Upper Memory Area. Espacio de memoria entre los 640KBs y 1MB en modo real.
EMM386 habilita el acceso a los UMBs, y nos permite especificar a qué bloques van a poder acceder los programas y a cuáles no,
usando los parámetros X=xxx-xxxx y I=...
El acceso a los UMBs/UMA permite que los TRS se guarden allí (y MSDOS si usamos DOS=HIGH,UMB),
lo que se llama "LOADHIGH", ahorrando así memoria convencional.
Además, EMM386 pone la CPU en modo protegido, por lo que todo es más lento y por eso algunos juegos se quejan (Another World...)
(El "modo Virtual 8086" AKA "V86 mode" es un submodo del modo protegido: sirve para que los programas en modo real funcionen en modo protegido,
emulando para ello una CPU de 16bits en modo real).

(+)HAY UN PROBLEMA: cosas de la BIOS (roms opcionales) pueden estar usando UMA.
Para saber qué cosas usan UMA, usa el comando MSD 
o puedes usar Checkit (https://dosdays.co.uk/media/diagnostics/checkit_3.0.zip), que te dice hasta qué fabricante usa cada bloque de 16K (es el modo más claro de verlo)
o puedes usar UMASCAN.COM (http://files.mpoli.fi/unpacked/software/programm/asm/dosutil.zip/umascan.com)
o puedes usar UBMCHK (http://www.uwe-sieber.de/files/umbpci_e.zip) que checkea los blockes de 16k entre C000 y EFFF para saber qué
parámetro /I=... pasarle a UMBPCI.SYS
o puedes usar las TSR UTILITIES (https://www.pcorner.com/list/UTILITY/TSRCOM35.ZIP/INFO/)
(+)UMBPCI.SYS es una alternativa a EMM386.SYS, supuestamente más rápida y compatible, pero sólo compatible con ciertas CPUs.
CUANDO SEPAS QUÉ ÁREAS DE LA UMA ESTÁN SIENDO USADAS POR ROLLOS DE LA BIOS, PUEDES EXCLUIR ESAS ZONAS CON EL PARÁMETRO X=xxx-xxx DE EMM386.EXE
NOTAS DEL FORO DE VOGONS SOBRE ESTO:
++++ A000-AFFF is always used by VGA as Video RAM (not ROM!) for Graphic modes. It's vendor independent (old VGA cards like S3 Trio's also use this area).
++++ B800-BFFF is always used by VGA as Video RAM for Text modes. It's also vendor independent.
++++ Only B000-B7FF can be (relatively) safely included as potential UMB on VGA systems since it's the memory area for monochrome Text modes. So it does not make much sense to use 'I=B000-B4FF' since it's not more compatible than 'I=B000-B7FF' and you lose 12K.


EXTENDED MEMORY (XMS) (Necesita HIMEM.SYS)
Memoria por encima del primer 1 MB (ya que originalamente el PC sólo podía direccionar 1MB).
Los programas en MODO REAL en principio no pueden accelder a esta memoria, eso es precisamente lo que hace HIMEM.SYS

EXPANDED MEMORY (EMS) (Necesita EMM386)
Una tecnología más antigua que XMS para expandir la memoria de los PCs más allá de los 640KBs usando una tarjeta de expansión con bank-switching.
Como esta tecnología se hizo muy famosa y muchos juegos usan EMS, lo que se hace es emular EMS usando XMS.
EMM386 hace dos cosas:
1 - Emular EMS usando XMS
2 - Para ello, habilita el acceso a la UMA (=UMBs) para poder emular el bank-switing, ya que para emular el bank-swithcing usa el PAGE FRAME,
que EMM386 coloca en la UMA (=UMBs). EMM386 Necesita encontrar 64KB seguidos en la UMA o nos dará el error "Unable to Set Page Frame Base Address".

OTROS PARÁMERETROS DE EMM386 (Ver esta página completa: https://hwiegman.home.xs4all.nl/msdos/98768.htm)
(Y esta otra: http://manmrk.net/tutorials/DOS/msdos7/emm386.htm)
========================================================================================================

RAM: Le dice a EMM386 que queremos EMS (es el comportamiento por defecto), para lo cual se usa XMS para simular EMS.
Si no queremos EMS, le pasamos NOEMS.

MEMORY (en KB): Cantidad máxima de memoria EMS que queremos.

NOTR - No inicializar no sé qué mierdas de un adaptador de red.

NOMOVEXBDA - Algunas máquinas usan el último KB de memoria convencional para una área extendida de datos de la BIOS.
Por defecto, EMM386 mapea esa área en la UMA para dejar libre esa memoria convencional, pero eso puede causar problemas así que
pasándole este parámetro le decimos que la deje en la memoria convencional.

NOHI - Por defecto, EMM386 carga parte de sí mismo en la UMA, pero puede que la dirección donde se carga esté ocupada con cosas de la BIOS,
así que con NOHI le decimos que no se cargue en UMA, sino en memoria convencional.  

I=B000-B7FF --> Usar el área UMA de gráficos monocromo (Hércules) que es ese segmento B000-B7FF.
Si tienes VGA, es seguro usarlo.

X=A000-F7FF --> Excluye todo el área de UMA (es decir desde los 640KB al primer 1MB), y si así se resuelve el problema significa que estamos
machacando algo de la BIOS que está en el UMA.


PARA CONTROLAR LA VELOCIDAD
===========================

Tienes CPUSPD, SETMUL y THROTTLE (http://www.oldskool.org/pc/throttle/DOS)

*****INSTALAR FREEDOS**************************************************************************

Nos bajamos la versión LITE (o la que queramos, pero la LITE trae todo lo necesario), y grabamos el IMG a una MicroSD con dd.
Arrancamos la SD en el TinyLlama. Nos salimos del programa de instalación y particionamos el disco usando el FDISK que trae el FREEDOS.
Reiniciamos.
Esta vez, continuamos el programa de instalación, que ya nos dejará formatear el disco D: e instalar ahí (no te preocupes, porque luego
aparece como C: al reiniciar).

Ahora ya es cuestión de ajustar el FDCONFIG.SYS y el FDAUTO.BAT a nuestro gusto.

*****INSTALAR DOS7 DESDE VIRTUALBOX A UN DISCO FÍSICO REAL*************************************

Se puede descargar desde aquí:
https://archive.org/details/ms-dos-7.1-cd
Nos bajamos la ISO de CD, es más útil que andar con las imágenes de diskette y VirtualBOX arranca la ISO inmediatamente sin problemas.

--Re-creamos la tabla de particiones de la MicroSD desde GPARTED: No debe tener ninguna partición, nos las hará el instalador de DOS7.

--Creamos el disco virtual de VirtualBOX que apunta al disco físico:
sudo VBoxManage internalcommands createrawvmdk -filename "mi_disco.vmdk" -rawdisk /dev/sdb

--Arrancamos VB COMO ROOT con "sudo VirtualBox" (ya que como usuario normal no podemos usar los VMDK que apuntan a cosas en /dev...),
y creamos una máquina DOS, y le añadimos el disco VMDK a esta máquina DOS:
También añadimos la imágen ISO del DOS7 en la lista discos de la máquina, para poder seleccionarla luego cuando arranquemos la máquina.

--Arrancamos la máquina, insertamos la ISO de DOS7 (pinchando en el icono del CD en la parte de abajo de la ventana
mientras la máquina está arrancada) y reiniciamos la máquina DOS con el CD dentro. Y ya nos salta el instalador!

--La instalación hazla COMPLETA (si no, no tienes ni el EDIT.COM) y SIN ADDONS.

********(CURIOSIDAD) INSTALAR DOS CON DOSBOX A UNA IMÁGEN DE DISCO (NO MUY ÚTIL PORQUE NO PODRÁS LUEGO TRANSFERIR EL SECTOR
 DE ARRANQUE, PERO AHÍ LO DEJO)*********

https://www.linuxandubuntu.com/home/dosbox-part-3-installing-dos-onto-a-virtual-hard-drive

-Creamos la imágen desde Linux. Por ejemplo, vamos a crear una imágen de 120MB:
dd if=/dev/zero of=hdd.img bs=1M count=120

-Calculamos el número de cilindros. Se hace multiplicando los MB por 2.03125, así que:
120 * 2.03125 = 244

-Montamos la imágen en DOSBOX con:
imgmount 2 hdd.img -size 512,63,16,244 -t hdd -fs none
...donde 244 es el número de cilindros que hemos calculado y lo demás siempre es igual.

-Arrancamos desde los diskettes desde dentro de DOSBOX:
boot disk1.img disk2.img -l a
(Para ir cambiando de un diskette a otro durante la instalación, es con CTRL+FN+F4, 
y vamos viendo cómo cambian en la consola desde la que hayamos lanzado DOSBOX).

********FDCONFIG.SYS Y FDAUTO.BAT para FREEDOS*****************


**************CONFIG.SYS*********************

BUFFERS=20     
FILES=40
DOS=HIGH,UMB
DEVICE=C:\FREEDOS\BIN\JEMMEX.EXE X2MAX=32767

SHELLHIGH=C:\FreeDOS\BIN\COMMAND.COM C:\FreeDOS\BIN /E:1024 /P=C:\FDAUTO.BAT

****************AUTOEXEC.BAT******************

@ECHO OFF
PATH=C:\;C:\FREEDOS\BIN
SET DIRCMD=/A/OGN/P
SET BLASTER=A220 I7 D1 P330 T4
PROMPT $P$G

MODE CON RATE=32 DELAY=1
rem MODE CON CP PREPARE=((437) C:\DOS\EGA.CPI)
rem MODE CON CP SELECT=437

C:\UNISOUND\UNISOUND.COM /V90 /VW90 /VF90 /VL90 /VP90 /VC0 /VM0
CTMOUSE

mkeyb SP

ECHO.

------------------------INSTALACIÓN DEL SONIDO----------------------------------

Las instrucciones están aquí:
https://github.com/eivindbohler/tinyllama2#programming-the-cs4237b-firmware

NO HACE FALTA que flasheemos nada, el Crystal ya viene flasheado.
Clonamos el repo de Eivind: git clone --depth 1 https://github.com/eivindbohler/tinyllama2.git
Y copiamos el directorio UNISOUND a la raiz de la SD, metemos estas cosas en el AUTOEXEC.BAT
Tiene que ser exactamente así: El IRQ tiene que ser el 7, y lo lee de la variable BLASTER.

SET BLASTER=A220 I7 D1 P330 T4
LH C:\UNISOUND\UNISOUND.COM /V60 /VW60 /VF60 /VL60 /VP60 /VC0 /VM0

Recuerda que LH es LOADHIGH, para que cargue en la memoria superior y NO ocupe a memoria convencional,
y para ello se necesita tener cargado el HIMEM.SYS en CONFIG.SYS así:
DEVICE=C:\DOS\HIMEM.SYS /TESTMEM:OFF /Q

*********ACTUALIZAR LA BIOS**************

Nos bajamos la última release de: https://github.com/eivindbohler/tinyllama2-bios/releases
La metemos en la SD que hace de disco duro, o en un pendrive formateado a FAT16/32,
y pulsando F12 al reiniciar, elegimos el Virtual Floppy. Si tenemos un pendrive metido, nos aparecerá
como unidad C:, así que hacemos:
 
A:\>anybios w c:\romfile.rom

=================================
---NOTAS COMPATIBILIDAD JUEGOS---
=================================

Tienes los mejores juegos en castellano en abandonsocios.
Los juegos que den el famoso "runtime error 200" se pueden parchear ctbppat.exe, ejecutándolo en el mismo directorio que el EXE
que queremos parchear. El CTBPPAT se saca de aquí: https://www.vogons.org/viewtopic.php?f=13&t=93
Hay otro llamado BPPatch2.exe o algo así, creo.

***TURRICAN 2***

En todas las páginas viene una versión que no funciona pero que se puede arreglar fácilmente. 
Lo único que les falta a todas es establecer la variable de entorno "T2DIR" apuntando al diretorio "CFG" que viene con el juego.
Para que funcione, simplemente créate un PLAY.BAT con este contenido (suponiendo que tenemos el juego en C:\JUEGOS\T2):

@echo off
cls
set t2dir=c:\juegos\t2\cfg
oversmpl on
t2

En c:\juegos\t2\cfg debes meter los archivos que vienen en el directorio TURRICAN.CFG que viene con las copias del juego
que hay por ahí en internet.

Con esto ya te saldrá el menú con todas sus opciones, y el juego funcionará bien.
Para que vaya el audio, selecciona la SoundBlaster PRO y que detecte los parámetros.

***WIZARDRY VI: BANE OF THE COSMIC FORGE***
Desactivar la CACHE LEVEL 1

***PREHISTORIK 2***
Desactivar la CACHE LEVEL 1

***ELDER SCROLLS: ARENA***

Necesita EMS.

Si aun dándole EMS nos dice que no tiene, mira si al lanzar el JEMMEX tienes el mensaje:
"Warning: no suitable page frame found, EMS functions limited."
Si es así, pásale al JEMMEX el parámetro FRAME=D000
(Si ese page frame no es válido, elegirá otro al inicio que sí lo sea y te dará un warning: cambia D000 por el que decida usar y ya).

***ALADDIN***
Necesita EMS, y no funciona con más de 32MB de RAM.
Para ello le pasamos al JEMMEX el parámetro X2MAX=32767

***PINBALL DREAMS y PINBALL FANTASIES***
Tienes que arrancar JEMMEX, y dejar sólo 32MB de RAM, 
Para ello le pasamos al JEMMS el parámetro X2MAX=32767

NOTA: Si no usamos JEMMEX, para consumir memoria y que vayan los juegos que no van por exceso de RAM podemos usar esto:
O podríamos usar esto:
https://github.com/kklis/memeater
Hazte un BAT así para dejar sólo 16MB de RAM:
memeater 112000
aladdin.exe
