MONTARSE LA MISTERY NANO POR CUENTA PROPIA
==========================================

Se necesitan 3 placas:

Las que se compran directamente Sipeed (en la página oficial de Sipeed en Aliexpress):
---Placa Sipeed Tang Nano 20k: esta placa lleva la FPGA donde se implementan las máquinas.
---Placa Sipeed M0S Dock Tinyml board: esta placa lleva el microcontrolado BL616 donde corre la pila USB que controla teclado/ratón/MIDI.

La que hay que encargar a JLCPCB:
---Placa MisteryShield20k (https://github.com/harbaum/MiSTeryNano/tree/main/board/m0s_pmod)
   Aquí va pinchada la TangNano 20k.

(NO NECESARIA PARA TANG NANO 20K) A parte, para otros modelos de Sipeeed Tang superiores, se usa esta:
---Placa M0S PM0D (https://github.com/harbaum/MiSTeryNano/tree/main/board/misteryshield20k)
   Esta placa va pinchada a la MisteryShield20k, y hace de interface entre esta y la M0S Dock.

ENCARGAR LAS PLACAS EN JLCPCB
=============================

NOTA: PARA AMBAS PLACAS, PUEDE PASARNOS (DEBEMOS EVITARLO) QUE JLCPCB NOS ENVÍE UN CORREO PREGUNTÁNDONOS SI HACEN UNOS PEQUEÑOS AJUSTES
PORQUE NO SABEN SI SON GERBER DE PRODUCCIÓN (QUE YA TENDRÍAN ESOS AJUSTES HECHOS) O LOS GERBER TAL COMO SALEN DEL KIKAD (QUE REQUIEREN LOS AJUSTES).
LOS GERBER PUBLICADOS SON DIRECTOS DE KICAD, ASÍ QUE HAY QUE CONTESTARLES QUE HAGAN LOS AJUSTES QUE ESTIMEN OPORTUNOS PARA MEJORAR LA PRODUCCIÓN.
--PARA EVITAR PREGUNTAS DE JLCPCB, NO ACTIVES "Confirm production file" NI TAMPOCO "Confirm Parts Placement".
--PARA EVITAR PAGOS A PARTE (QUE ENLENTECEN EL PROCESO PORQUE HAY QUE ENTRAR OTRA VEZ EN LA PÁGINA, PAGAR DE NUEVO, ETC) 
  NO ELIJAS NINGUNA OPCIÓN DE LAS DE "ADVANCED OPTIONS" (NADA DE BOARD CLEANING NI BOBADAS DE ESAS).

Clonamos el repo: git clone --depth 1 https://github.com/harbaum/MiSTeryNano.git

Lo que vamos a necesitar está en: board/misteryshield20k/jlcpcb

Entramos en: http://www.jlcpcb.com
Le damos a ORDER NOW.

Ahí vamos haciendo lo siguiente:
-Subimos el ZIP "gerber_m0s.zip" que es el que contiene el GERBER. Usamos la variante "gerber_m0s.zip".
-Activamos "PCB Assembly".

EN PCB SPECIFICATIONS:
-(OPCIONAL)Ponemos "Surface Finish" a "ENIG", ya que permite que la placa almacenada dure más tiempo.

EN PCB ASSEMBLY:
-Dejamos "PCBA Type" en "Economic" ("Standard" sería si tuvese componentes por los dos lados, que no es el caso).
-Dejamos "Assembly Side" en "Top Side" (La placa sólo tiene componentes por la parte superior).

EN ADVANCED OPTIONS:
-Activamos: "Board Cleaning", "Bake Components" y "Depanel boards"

Le damos a CONFIRM, y en el siguiente menú tendremos que subir el BOM (bom_m0s.csv) y el CPL (positions_m0s.csv)
Le damos a "Process BOM & CPL"

En "Product Description", lo mejor es poner "Audio Equipment".

En el método de envío, he usado IOSS, que se supone que ya incluye los impuestos en el momento de hacer el pago con tarjeta,
y que como son menos de 150 euros no hay que pagar más luego.

La carcasa la podemos encargar en: https://innova3d.es/
Para ello, nos vamos a "PRESUPUESTO ONLINE", y subimos los modelos en .STL que hay en:
https://github.com/harbaum/MiSTeryNano/tree/main/board/misteryshield20k/housing3D
Los tornillos necesarios son M3x12.

FLASHEAR EL CORE DE ATARI ST Y LAS TOS
======================================

	--RECOMENDADO: USANDO OPENFPGA LOADER--

-Flasheamos el core:

openFPGALoader -f ~/Downloads/atarist.fs

-Flasheamos las TOS
(La mejor página para descargarlas es esta: https://avtandil.narod.ru/tose.html)
(El orden de flasheo de las TOS es: TOS de ST primaria, TOS de STE primaria, TOS de ST secundaria, TOS de STE secundaria)

openFPGALoader --external-flash -o 0x100000 tos104us.img
openFPGALoader --external-flash -o 0x140000 tos206us.img
openFPGALoader --external-flash -o 0x180000 tos104es.img
openFPGALoader --external-flash -o 0x1c0000 tos206es.img

	--USANDO EL GOWIN PROGRAMMER (POR SI EL OPENFPGA LOADER DEJA DE FUNCIONAR--

--Usamos el Gowin Programmer versión 1.9.10.03, disponible en:
https://www.gowinsemi.com/en/document/main/database/14/?support_search=&type=version&order=ASC&page=1
--Tras descargarlo y descomprimirlo, entramos en su directorio "Drivers" y ejecutamos:
Gowin_USB_Cable_Installer.sh
...y a continuación:
Makefile
...y reiniciamos.
--Entramos en su directorio "bin" y ejecutamos "./programmer"
--Pinchamos en la columna "Series", elegimos "GW2AR", pinchamos en la columna "Device" y elegimos "GW2AR-18C"
--Pinchamos en la columna "Operation" y en "Acces Mode" elegimos "External Flash Mode"
  y en "Operation" elegimos "exFlash Erase, Program Thru GAO-Bridge"
  En "File name" elegimos el .fs que queremos flashear, en "Device" dejamos "Generic Flash" y dejamos "Start Address" a 0x000000 
--Volvemos al menú principal y le damos al icono de "Program/Configure" (flecha verde), y ya debería ir. 
--Falta flashear las ROMS de sistema que se hace igual pero en diferentes "Start Address". Para hacerlo, mira en:
https://github.com/harbaum/MiSTeryNano/blob/main/INSTALLATION_WINDOWS.md


-¡¡¡OJO!!! Las imágenes de disco duro deben tener extensión .HD

-Para más compatibilidad con juegos y demos (el ST es una máquina principalmente europea), configúralo como un STE PAL con 4MB de RAM.

-El MIDI OUT es el conector más interior.
Los juegos que soportan MIDI simplemente funcionan si tienes un sinte conectado a la salida MIDI.
Algunos de SIERRA necesitan que ejecutes antes un programa que traen cada uno de ellos, que se llama MUSIC.PRG y permite seleccionar
el MT32 u otro sinte. Le das a "INSTALL GAME" y así queda guardada la configuración. No lo instala realmente, sólo configura la música. 

FLASHEAR EL CORE DE C64 Y LAS ROMS DE SISTEMA
=============================================

	--RECOMENDADO: USANDO OPENFPGA LOADER--

openFPGALoader -f tang_nano_20k_c64.fs

openFPGALoader --external-flash -o 0x200000 "c1541 DOS Dolphin 2.rom"
openFPGALoader --external-flash -o 0x20C000 "c1541 DOS CBM.rom"
openFPGALoader --external-flash -o 0x214000 "c1541 DOS Speeddos Plus.rom"
openFPGALoader --external-flash -o 0x21C000 "c1541 DOS Jiffy.rom"

	--USANDO EL GOWIN PROGRAMMER (POR SI OPENFPGA LOADER DEJA DE FUNCIONAR--

--Usamos el Gowin Programmer versión 1.9.10.03, disponible en:
https://www.gowinsemi.com/en/document/main/database/14/?support_search=&type=version&order=ASC&page=1
--Tras descargarlo y descomprimirlo, entramos en su directorio "Drivers" y ejecutamos:
Gowin_USB_Cable_Installer.sh
...y a continuación:
Makefile
...y reiniciamos.
--Entramos en su directorio "bin" y ejecutamos "./programmer"
--Pinchamos en la columna "Series", elegimos "GW2AR", pinchamos en la columna "Device" y elegimos "GW2AR-18C"
--Pinchamos en la columna "Operation" y en "Acces Mode" elegimos "External Flash Mode"
  y en "Operation" elegimos "exFlash Erase, Program Thru GAO-Bridge"
  En "File name" elegimos el .fs que queremos flashear, en "Device" dejamos "Generic Flash" y dejamos "Start Address" a 0x000000 
--Volvemos al menú principal y le damos al icono de "Program/Configure" (flecha verde), y ya debería ir. 
--Falta flashear las ROMS de sistema que se hace igual pero en diferentes "Start Address". Para hacerlo, mira en:
https://github.com/vossstef/tang_nano_20k_c64/blob/main/INSTALLATION_WINDOWS.md

AHORA necesitas: 
-El kernal original de C64, que puedes descargar de aquí: http://www.zimmers.net/anonftp/pub/cbm/firmware/computers/c64/
y se llama kernal.901227-03.bin. Guárdalo en raíz de la SD como "c64kernal.bin".
-El fichero JiffyDOS_kernal.bin, que puedes descargar en el ZIP JiffyDOS-full.zip que deberías tener en el disco de backup,
en el correo, y que estaba originalmente disponible aquí:
https://www.nightfallcrew.com/27/07/2009/jiffydos-kernal-roms-manual-download-linkjiffydos-kernal-roms-manual-download-link/

Para cargar los D64 rapidito y con supuestamente buena compatibilidad (OJO!! Los CRT MultiLoad NO cargan con el JiffiDOS Kernal!!):
-En STORAGE->C64 KERNAL, selecciona el "JiffyDOS_Kernal.bin".
-En SYSTEM->C1541 ROM, selecciona "Jiffy DOS".
-En SETTINGS, dale a SAVE SETTINGS y reinicia.
(Si no lo haces, arrancará con el DolphinDOS kernal que es menos compatible, de hecho no permite cargar .TAP).

Para asegurar la máxima compatibilidad con juegos, cuando arranques el core:
-En STORAGE->C64 KERNAL, selecciona el "c64kernal.bin".
-En SYSTEM->C1541 ROM, selecciona "CBM DOS".
-En SETTINGS, dale a SAVE SETTINGS y reinicia.

FLASHEAR EL BL616 (M0S), TANTO EL INTERNO DE LA TANG NANO 20K COMO EL EXTERNO SI TIENES UNO
===========================================================================================

RECUERDA que si usas el interno de la TANG NANO 20K, tendrás que volver a meterle su firmware original de fábrica para poder volver a flashearlo.

-Nos bajamos el Bouffalo Lab Dev Cube de aquí: https://dev.bouffalolab.com/download
-Manteniendo pulsado el botón BOOT, conectamos el cable USB-C al M0S. Una vez conectado, lo podemos soltar.
-Abrimos el Bouffalo Lab Dev Cube, nos vamos a la pestaña MCU, en PORT/SN seleccionamos "/dev/ttyACM0", y le damos a OPEN UART.
-Seleccionamos el .bin que queramos flashear, y le damos a "CREATE AND DOWNLOAD".

ERRORES Y SOLUCIONES AL FLASHEAR EL BL616:
-Si te da error aunque te abra bien el puerto, es que en la pestaña MCU tienes seleccionado otro puerto que no es el "/dev/ttyACM0". 

CUBASE EN EL CORE DE ATARIST
============================

Todos los programas de secuenciación de MIDI para ST están en: http://atari.music.free.fr/

CUBASE 3 (RECOMENDADO)
========

OJO!! NO le metas más de 4MB al ordenador o te dará el error "MROS not found" pongas el tipo de máquina que pongas!! RECUERDA: Máximo 4MB!!!

No hay versión crackeada estable, así que nos bajamos http://atari.music.free.fr/cubase/cubas310.zip
y lo metemos descomprimido en nuestra imágen de disco de ST
(Recuerda que la imágen de disco de ST se monta con: sudo mount <ruta imágen> <ruta montaje> -o offset=1024)

Ahora en el ST nos vamos a SYSTEM->CARTIDGE y seleccionamos CUBASE 2&3 y listo, ya funcionará CUBASE.

CUBASE 2
========
Cubase 2 funciona en TOS 1.6 pero no en TOS 2.06 (da el error "MROS not found"). Usa siempre versiones sin crackear porque tanto la MiSTeryNano
como la MiSTer implementan el dongle del CUBASE 2 y 3, y así te ahorras problemas.
COMO CURIOSIDAD: la versión 2.01 crackeada por MCA dicen que es estable y va sin el dongle. 

COMPILAR EL CORE DE C64
=======================

--Creamos un directorio ~/src/bouffalo, y nos vamos allí:
mkdir ~/src/bouffalo
cd ~/src/bouffalo

--Clonamos el repo del core en sí:
git clone --recurse-submodules --depth 1 https://github.com/vossstef/tang_nano_20k_c64.git

--Nos bajamos el GOWIN IDE para Windows (no pierdas tiempo con la versión Linux, está rotísima) de aquí:
https://www.gowinsemi.com/en/support/download_eda/
  (El pass es Manuel22)

--Instalamos el GOWIN IDE con WINE, que es con lo que lo vamos a usar: no hace falta instalar el "Programmer, sólo el IDE.

--Para compilar, en el GOWIN IDE, lanzamos el IDE con "wine gw_ide.exe"
y abrimos el fichero "tang_nano_20k_c64.gprj" y le damos a "Run All"
que es el icono con las dos flechas verdes formando un círculo: el icono más a la derecha de la barra.

--El resultado es un fichero .fs que queda, a partir de la raíz de los sources, en ./impl/pnr/tang_nano_20k_c64.fs 

COMPILAR EL FIRMWARE DEL M0S
============================

--Creamos un directorio ~/src/bouffalo, y nos vamos allí:
mkdir ~/src/bouffalo
cd ~/src/bouffalo

--Clonamos los repos del TOOLCHAIN y del SDK del microcontrolador:
git clone --depth 1 https://github.com/bouffalolab/toolchain_gcc_t-head_linux.git
git clone --recurse-submodules --depth 1 https://github.com/harbaum/bouffalo_sdk.git

--Clonamos el repo del firmware que vamos a compilar en sí:
git clone --recurse-submodules --depth 1 https://github.com/harbaum/FPGA-Companion.git

--Entramos en el directorio del firmware específico del BL616:
cd FPGA-Companion/src/bl616/

--Compilamos pasándole las rutas del TOOLCHAIN y el SDK:
CROSS_COMPILE=~/src/bouffalo/toolchain_gcc_t-head_linux/bin/riscv64-unknown-elf- BL_SDK_BASE=~/src/bouffalo/bouffalo_sdk/ make -j10

--El resultado queda en build/build_out/mfg_bl616*.bin
