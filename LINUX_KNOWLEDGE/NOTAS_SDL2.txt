-Tienes unos consejos fabulosos sobre cómo migrar de SDL 1 a SDL2 aquí:
http://www.cs.umb.edu/~bazz/cms/index.php?id=sdl-sdl2-migration-experience
A parte de la propia guía de migración oficial, claro.

==========Una rutina típica de dibujado en 2D en pantalla en SDL2=======================================

SDL_Window *window = SDL_CreateWindow(
        "Cannonball", 0, 0, src_width, src_height,
        flags);

SDL_Renderer *renderer = SDL_CreateRenderer(window, -1, flags);
SDL_Texture *texture = SDL_CreateTexture(renderer,
                               SDL_PIXELFORMAT_ARGB8888,
                               SDL_TEXTUREACCESS_STREAMING,
                               src_width, src_height);

Pero claro, necesitamos, o bien una surface de SDL en la que escribir en su array de pixels (surface->pixels) o bien directamente 
un array de pixels reservado con malloc o similar.

O sea, o hacemos esto y escribimos en sus píxels (luego ya veremos que en la parte del pageflip se vuelcan los píxels a la textura con SDL_UpdateTexture() y el renderer la pinta, etc):

surface = SDL_CreateRGBSurface(0,
                                  src_width,
                                  src_height,
                                  bpp,
                                  0,
                                  0,
                                  0,
                                  0);

uint32_t *screen_pixels = surface->pixels;

...O bien creamos un array de píxels a manubrio, que luego volcaremos a la textura con SDL_UpdateTexture(), etc...: 

uint32_t *myPixels;
mypixels = malloc(src_width * src_height * sizeof (uint32_t));
uint32_t *screen_pixels = mypixels;

... y luego el pageflip constaría de algo como: 

// Volcamos el array de pixels a la textura:
SDL_UpdateTexture(texture, NULL, screen_pixels, src_width * sizeof (Uint32));
// Limpiamos el renderer:
SDL_RenderClear(renderer);
// Pasamos la textura actualizada al renderer:
SDL_RenderCopy(renderer, texture, NULL, NULL);
// Lo sacamos por pantalla. Si se hace o no con vsync, si se usa un renderer por hardware, si se interpola linealmente, etc... depende de los flags
// que le pasemos a SDL_CreateWindow(), de los SDL_SetHints() y de los flags que le pasemos a SDL_CreateRenderer(). 
SDL_RenderPresent(renderer);

SI QUISIÉRAMOS escalar manteniendo el aspect ratio, o sea, actualizar una textura pero dibujando sobre un rectángulo de unas dimensiones
concretas, pues usamos los dos últimos parámetros de SDL_RenderCopy(), que son dos SDL_Rect, orígen y destino.
ACUÉRDATE de inicializar no sólo los campos de tamaño sino también los de POSICIÓN de estos rects, aunque sea a 0, o no se verá nada.

OTRA MANERA, MUCHO MÁS SIMPLE, DE MANTENER EL ASPECT RATIO, es simplemente hacer algo como esto para mantener el aspect ratio:
Lo que hace es sencillamente cambiar las proporciones lógicas del renderer, pero no el tamaño de las rects de entrada y salida:
SDL_RenderSetLogicalSize(_renderer, 320*5, 200*6);

Y listo!!

===========ACTUALIZACIONES PARCIALES de una textura de SDL2================

Por fin sabemos cómo hacer esto!

int SDL_LockTexture(SDL_Texture*    texture,
                    const SDL_Rect* rect,
                    void**          pixels,
                    int*            pitch)

Nos devuelve un puntero ("pixels") al área de posición y tamaño que especificamos en rect. Ya podemos hacer un memcpy directamente sobre esa área usando píxels!
Y de paso, ya sabemos para qué sirven las funcines de LOCK y UNLOCK, tanto de texturas como de surfaces: ya no nos tienen que sonar raro nunca más.
Lo de "Lock" no es para "candar" la textura o la superficie, sino para "apuntar" a una zona de la textura o superficie y acceder a sus píxels directamente. Como
en los juegos de aviones con un "lock on" ^_^

Tienes un ejemplo en el código fuente del CSBWin donde tú mismo arreglaste los valores del rect para actualización parcial de la textura, aunque seguro que es algo muy común.

===========Cómo funciona el audio en SDL2 comparado con SDL1=================

En SDL1 teníamos SDL_OpenAudio(), que se puede seguir usando, pero lo recomendado es usar SDL_OpenAudioDevice(), que funciona del siguiente modo:

Antes de nada, definimos un par de estructuras de tipo SDL_AudioSpec:

SDL_AudioSpec desired, obtained;

En estas estructuras guardamos los datos del formato de audio exacto que queremos: frecuencia, formato (como el formato de píxel pero en audio), canales, samples...
No rellenamos obtained, sólo desired, y luego se nos devuelve obtained relleno con lo que se nos ha podido dar.

desired.freq = 48000;
desired.format = AUDIO_F32;
desired.channels = 2;
desired.samples = 4096;
desired.callback = MyAudioCallback;  // esta función la escribimos nosotros en otro lado, para rellenar el buffer por ejemplo.
desired.userdata = NULL;

Ahora realmente abrimos el dispositivo de audio con SDL2. Lo primero necesitamos un ID de dispositivo:

SDL_AudioDeviceID dev; 

Al abrir el dispositivo físico, se nos dará el ID de dispositivo, que es lo que usaremos para el resto de operaciones, a modo de handler:

dev = SDL_OpenAudioDevice(NULL, 0, &desired, &obtained, /*SDL_AUDIO_ALLOW_FORMAT_CHANGE*/0);

^^^Nota que el primer parámetro sería una cadena de texto con el nombre del dispositivo, pero le pasamos NULL y SDL2 abre el que cree más conveniente.
No nos complicamos más con eso.

Al acabar, hay que cerrar con SDL_CloseAudioDevice(dev), en lugar del viejo SDL_CloseAudio(); 

Y ahora, si no suena nada, busca TODAS LAS LLAMADAS a SDL_PauseAudio() y las sustituyes por llamadas a SDL_PauseAudioDevice().
En SDL_PauseAudioDevice() tenemos que pasarle un parámetro más que a SDL_PauseAudio(), que sería el ID de dispositivo que queremos pausar o despausar.
El segundo parámetro lo dejamos IGUAL en SDL_PauseAudioDevice() que como estuviese en SDL_PauseAudio(): o sea, si teníamos
SDL_PauseAudio(0) 
pues dejamos
SDL_PauseAudioDevice(dev,0);
Y si teníamos
SDL_PauseAudio(1);
pues dejamos
SDL_PauseAudioDevice(dev,1);

Y por ahora eso es lo que sé. Me ha servido para portar cannonball a SDL2...
Fuentes: https://wiki.libsdl.org/SDL_OpenAudioDevice

===========PASAR EL INPUT DE SDL1 a SDL2===================================

***OJO!!!! Al final no es que los KEYCODES (key.keysym.sym) sean legacy, es que nos conviene más leer y usar los keycodes cuando vayamos a recoger una cadena de texto,
y los SCANCODES para controlar el input del juego en sí (moverse, disparar)...***

Sobre todo es el tema del teclado. Para el tema del joystick y demás queda todo igual.

-De igual modo, en ambos casos se usan las estructuras SDL_Event para evaluar de qué tipo es el evento que nos ha llegado.
También se sigue usando SDL_KEYDOWN y SDL_KEYUP para el tipo de evento.  Esas cosas no cambian.

-Lo que si cambia es la función para leer los eventos: ya no es SDL_GetKeyState(), sino  SDL_GetKeyboardState(), pero sólo cambia el nombre.
Lo cambias y ya.

-SDL2 usa SCANCODES y no SYMCODES, así que en lugar de evaluar el campo evento.key.keysym.scancode, vamos a evaluar el campo evento.key.keysym.scancode,
y en vez de evaluar dicho campo contra valores tipo SDLK_*, lo evaluamos contra valores de tipo SDL_SCANCODE_*.

Qué pasos hay que hacer:
-Lo primero cambia nombre de la función.
-Ahora te buscas SDL_KEYDOWN en el código, que es el tipo de evento que nos interesa, mira que no estés evaluando evento.key.keysym.sym, sino evento.key.keysym.scancode
y contra SDL_SCANCODE_* en lugar de hacerlo contra SDLK_*. 
-También tendrás que hacer lo mismo con SDL_KEYUP.
-Y también, como es muy típico que los programas definan teclas por defecto, búscate dónde lo hace ese programa en concreto y que las defina usando SDL_SCANCODE_*
en lugar de usar SDLK_*.

La lógica la tienes que tener clara: el juego define unas teclas por defecto, o las lee de un cfg, y la cosa queda como:
JUMP_KEY = SDL_SCANCODE_SPACE;
Luego llega el evento, y se comprueba qué tecla es la que se ha pulsado:

case SDL_KEYDOWN...
	if (evento.key.keysym.scancode ==) JUMP_KEY

...Y ya la procesa el juego internamente o lo que sea.

===========Cómo funciona el INPUT en SDL2===================================

CUANDO SE PULSA UNA TECLA, desde las SDL2 nos va a llegar una estructura de tipo SDL_Event.
Este SDL_Event tiene un campo que es su tipo, el campo type. A partir de su tipo, podemos saber si es de tipo SDL_WINDOWEVENT, SDL_MOUSEMOTION, SDL_KEYDOWN..
y así un laaargo etcétera de tipos.

Así que normalmente tendremos un primer swicth-case donde se filtrará por tipo. Nos interesa el tipo SDL_KEYDOWN, que es el de los eventos de pulsación de teclas.
Vale, sabemos que es una pulsación de una tecla.
HAY DOS TIPOS de códigos que vamos a recibir en el SDL_Event cuando se pulsa una tecla: 

-El SCANCODE, que es lo que DEBEMOS USAR EN SDL2, aunque no es fiable si queremos reconocer una tecla con un significado concreto, 
 y que viene en el campo evt.key.keysym.scancode del SDL_Event.
Usaremos esto más bien para identificar pulsaciones basándonos EN LA POSICIÓN de una tecla y NO EN EL CARACTER QUE PRODUCE. REPITO: ES LO QUE SE USA EN LAS SDL2. 
Es un número de la tecla física que hemos pulsado pero que no se corresponde con ningún caracter o tecla modificadora específica (así, recibiremos un 123 por 
ejemplo que puede ser un tab o una letra v, independientemente de lo que haya dibujado en nuestro teclado: sólo nos llega el scancode que no significa un caracter en concreto,
es algo como: has pulsado la tecla 123, y ya). En la wiki de las SDL2 nos vienen scancodes a lo SDL_SCANCODE_G o SDL_SCANCODE_RALT, pero NO son fiables. Si comprobamos
contra los valores de tipo SDL_SCANCODE_*, no sabemos realmente qué tecla se ha pulsado.

-El KEYCODE, que viene en el campo key.keysym.sym del SDL_Event. Para comprobar contra los valores de scancode, tenemos que hacer un include de SDL_scancode.h.
ESTO ES LO QUE SE USABA EN LAS SDL1.
Los valores definidos contra los que podemos comprobar qué tecla se nos ha pulsado tienen el formato SDLK_*. Estos valores SÍ son los de los caracteres, y
NOS DAN LA SEGURIDAD de que la tecla contra la que comprobamos es la que nuestro SO devuelve al pulsar lo que hemos pulsado. 

TANTO PARA los SCANCODES como para los KEYCODES, tienes una tabla (que no es fiable para los SCANCODES por lo que ya se ha explicado) en https://wiki.libsdl.org/SDL_Keycode 

AHORA BIEN: Lo que nos interesa en SDL2 es usar SCANCODES, o sea que acabaremos comprobando el valor del campo correspondiente, evt.key.keysym.scancode

OJO!!!! Al final no es que los KEYCODES (key.keysym.sym) sean legacy, es que nos conviene más leer y usar los keycodes cuando vayamos a recoger una cadena de texto,
y los SCANCODES para controlar el input del juego en sí (moverse, disparar)...

============Un ejemplo de cómo leer algo de teclado usando scancodes usando índices a la matriz de estado del teclado================

Así es como se debería leer en las SDL2, aunque normalmente, como los programas de SDL1 lo que hacen es comprobar evt.key.keysym.sym, nosotros
comprobamos evt.key.keysym.scancode, y no usamos este método, pero SERÍA LA MANERA MÁS CORRECTA DE HACERLO.

Lo primero, tenemos que declarar una variable de tipo puntero a unsigned int de 8 bits, que apunta a un array, el array del estado de las teclas, que serán
0 o 1. 0 Es que tal o cual tecla no está presionada, y 1 que sí lo está.

const Uint8 *state = SDL_GetKeyboardState(NULL);

O SEA, en este ejemplo, state es un array de n teclas, y en cada posición hay un 0 o un 1, dependiendo de si la tecla ha sido pulsada o no.

Ahora, para saber si una tecla concreta ha sido pulsada, INDEXAMOS a ese array con el define que es el scancode de esa tecla. Haremos esto:

if (state[SDL_SCANCODE_RETURN]) {
    printf("<RETURN> is pressed.\n");
}

Y listo!

NOTA: A veces verás que se compara el valor que indexado (state[SDL_SCANCODE_BLAHBLAH]) con SDL_PRESSED. Esto es típico de las SD1, aunque 
se puede hacer en las SDL2. SDL_PRESSED es un define que vale 1, sin más.

CUIDADO CON ESTAS NOTAS:
-La función SDL_GetKeyboardState() te da el estado cuando todos los eventos han sido procesados, cosa que hacemos nosotros. Así que si una tecla ha sido pulsada
y soltada ANTES de que procesemos los eventos, entonces ese estado de "pulsada" no se va a ver en la llamada a SDL_GetKeyboardState().
-Hay que sacar los eventos de la cola de eventos con  SDL_PumpEvents().

FUENTE: https://wiki.libsdl.org/SDL_GetKeyboardState

============Averiguar qué driver está usando nuestro renderer (PLAIN SDL2)===========================

SDL_GetRendererInfo(SDL_Renderer*     renderer, SDL_RendererInfo* info)
Y luego miramos el miembro name de info.

Y para elegir/forzar un driver:
SDL_RENDER_DRIVER="opengles" ./scummvm

===========Resolución física en uso================================================================

SDL_GetCurrentDisplayMode(0, &current_videomode);

y nos interesan los campos...

current_videomode.w
current_videomode.h

==========Más sobre el input en SDL2 vs SDL1========================================================

El SDL_EventType SDL_ACTIVEEVENT y sus tipos no existen en SDL2.
En su lugar, tenemos SDL_WindowEvent y sus tipos.
Si nos encontramos con los tipos de eventos SDL_ACTIVEEVENT, como ya no existen tenemos que comparar el campo event->type contra el tipo SDL_WINDOWEVENT en SDL2.
Ahora, una vez que sabemos que el tipo es SDL_WINDOWEVENT, se suele comprobar qué evento de ventana es, o sea, se comprueba el campo event->window.event.
Ahora, tampoco tenemos los tìpicos SDL_APPINPUTFOCUS y SDL_APPMOUSEFOCUS. En su lugar, usaremos cosas como SDL_WINDOWEVENT_FOCUS_GAINED, SDL_WINDOWEVENT_ENTER, etc.. 

=========Dibujar gráficos de 8bits, o sea, 8bpp, usando SDL2============================================

Lo mejor es usar este truco tan increíble: no uses NADA de 8bpp, ni surface, ni textura, ni nada. Simplemente. le pasas unas máscaras a SDL_CreateRGBTexture(), creas una textura de 32bits,
y luego eso lo subes tal como sueles hacer: sin conversiones y sin nada. Es una pasada! Mira, haz así:
Normalmente, haríamos algo como esto para renderizar una imágen de 32bits:

	my_surface= SDL_CreateRGBSurface(0, NewWindowWidth, NewWindowHeight, 32,
                0,0,0,0
                );

Pues ahora, para renderizar una de 8bpp, creamos así la surface:
	
	my_surface= SDL_CreateRGBSurface(0, NewWindowWidth, NewWindowHeight, 32,
		0x00FF0000,
                0x0000FF00,
                0x000000FF,
                0xFF000000
);

Y lo demás, pues ya normal: creamos la textura como una de 32bpp también:

        texture = SDL_CreateTexture(renderer,
                               SDL_PIXELFORMAT_ARGB8888,
                               SDL_TEXTUREACCESS_STREAMING,
                               vMacScreenWidth, vMacScreenHeight);

y luego la actualizamos, renderizamos, etc...:

        // SDL2 screen update block
        SDL_UpdateTexture(texture, NULL, my_surface->pixels, vMacScreenWidth * sizeof (Uint32));
        SDL_RenderClear(renderer);
        SDL_RenderCopy(renderer, texture, NULL, NULL/*&src_rect, &dst_rect*/);
        SDL_RenderPresent(renderer);

ESTE TRUCO TAN INCREÍBLE lo he sacado de stack overflow. Gracias, gracias! --->  http://stackoverflow.com/questions/30599636/8-bit-surfaces-in-sdl-2

==========TRANSPARENCIAS EN SDL2===============================================

Las transparencias se hacen bliteando una surface sobre otra, en función del parámetro alpha de la superficie de orígen.
Para empezar, en SDL2, tras crear la superfice que queremos copiar sobre otra con cierta transparencia, cosa que hacemos con SDL_CreateRGBSurface(),
a continuación TENEMOS QUE ESPECIFICAR que queremos que, cuando se blitee sobre otra, se haga con ALPHA BLENDING, o si no, no habrá transparencias.
EN SDL1 NO HACÍA FALTA ESTO, PERO EN SDL2 SÍ HACE FALTA. 
Por ejemplo, así:

    black = SDL_CreateRGBSurface(0,screen->w,screen->h,
                                 screen->format->BitsPerPixel,
                                 screen->format->Rmask,screen->format->Gmask,
                                 screen->format->Bmask,screen->format->Amask);
    SDL_SetSurfaceBlendMode(black, SDL_BLENDMODE_BLEND);

SI NO LLAMAMOS A SDL_SetSurfaceBlendMode(), AL BLITEAR black NO SE HARÁ ALPHA BLENDING EN ABSOLUTO, ASÍ QUE NO HABRÁ TRANSPARENCIAS QUE VALGAN.

OTRA COSA MUY IMPORTANTE AL CONVERTIR PROGRAMAS DE SDL1 a SDL2: EL VALOR ALPHA DE SDL_SetSurfaceAlphaMod() está INVERTIDO en SDL2 respecto a SDL1,
ASI QUE EN SDL2 un alpha de 255 es "totalmente opaco" y en SDL2 es "totalmente transparente" y con alpha valiendo 0 pasa lo mismo pero al revés. PERO SIEMPRE RECUERDA
ASEGURARTE DE QUE HAS HECHO ANTES LO DE SDL_SetSurfaceBlendMode(), o pongas lo que pongas no habrá transparencia.
NO TE OLVIDES DE ESO, PORQUE VAS A VER FALLOS DE TRANSPARENCIA AL PASAR DE SDL1 a SDL2 debido a esto, y tendrás que arreglarlo.

OTRA COSA ES QUE AL HACER UN BLITEO DE UNA SUPERFICIE CON TODOS SUS PÍXELS EN NEGRO sobre otra en las SDL2, CON UN ALPHA = 0, EL RESULTADO tiene colores
rojizos. Esto se soluciona pasando en su lugar un alpha = 4 en lugar de 0. Ni idea de por qué ocurre. Si todos los píxels de la superficie a blitear son R o G o B, no pasa, sólo con
negro total.

Por redondear, naturalmente el alpha blending se aplica cuando se hace el bliteo en si, es decir, cuando se llama a SDL_BlitSurface(). Esta función no ha variado de SDL1 a SDL2, así
que tú tranqui.

Y OJO!!! NO CONFUNDAS todo esto con SDL_SetColorKey(), que es para establecer la color key de una superficie, cosa que sirve para considerar "transparentes totalmente" píxels
de la misma a fin de blitear, por ejemplo, sprites contra un fondo. ¡¡¡NO TIENE NADA QUE VER CON EL ALPHA BLENDING!!!
Y sí, estoy hablando de blitear con SDL_BlitSurface() también, pero el color key y el alpha blending ya sabes de sobra que son cosas muy diferentes.

==========SDL2 KMSDRM=========================================================

Configurar con el CMAKE para desactivar X11 y activar KMSDRM:

cmake -DVIDEO_KMSDRM=ON -DVIDEO_X11=OFF ..