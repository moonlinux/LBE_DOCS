******Sistema mínimo como root********************************************************************************************

Fuentes:
-Preguntar a clever en el canal #raspberrypi
-Tienes el script mínimo de arranque, que puedes pasarle al kernel como init, en el mismo directorio que este documento, con
el nombre "minimal".
-Tienes un fichero llamano "CREACIÓN MANUAL DE NODOS", que no debería hacerte falta a no ser que uses un sistema sin udev ni mdev,
es decir, que use siempre el mismo hardware y nodos estáticos, pero a un sistema así no podrás ponerle ni quitarle nada,
ni en ejecución ni en frio. Tiene lo que tiene y ya.
El fichero CREACIÓN MANUAL DE NODOS es como una guía con ejemplos para saber crear nodos a mano en caso necesario.
También explico ahí muy bien qué significa todo lo que se ve al hacer ls -l a un fichero en /dev. Eso sí deberías saberlo siempre
aunque no crees los nodos a mano

***********************************
*NOTAS IMPORTANTES DE CONOCIMIENTO*
***********************************

--UDEV se encarga de cargar los módulos para el hardware que tengamos conectado, y crea los nodos necesarios en /dev,
usando para ello las rules que están en /lib/udev/rules.d/.
PERO ATENCIÓN: PARA QUE UDEV PUEDA CREAR LOS NODOS NECESARIOS EN /dev SE TIENEN QUE CUMPLIR ESTAS CONDICIONES,
QUE POR DEFECTO SE CUMPLEN EN EL KERNEL POR DEFECTO DE LA PI:
----Nuestro kernel tiene que tener la funcionalidad CONFIG_DEVTMPFS=y, CONFIG_DEVTMPFS_MOUNT=y.
    El kernel de la Pi original las trae. Si alguna vez tuvieses un kernel que no las trae, puedes montar
    el tmpfs en vez del devtmpfs en /dev con mount -n -t tmpfs none /dev, pero ten en cuenta que en ese caso
    tendrás que crear los nodos en /dev a mano, porque udev y mdev sólo los crean automáticamente si en /dev
    está montado un devtmpfs.
----Tenemos que tener el devtmpfs montado en /dev. Esto, con CONFIG_DEVTMPFS_MOUNT=y, el kernel lo hace solo, pero si por lo que
    sea tuvieses que hacerlo a mano, basta con hacer: mount -t devtmpfs none /dev
LOS REQUERIMIENTOS para cuando uses mdev (el udev de busybox) son los mismos.

--TIENES QUE SABER ENTENDER LA LÍNEA con la que se lanza el programa único que vas a correr en un sistema mínimo.

Para ello, tienes que distinguir entre PID y SESIÓN:
-El PID es el ID de un proceso en el sistema. El proceso con PID 1 es lo que le pasamos al kernel con init=...
 No podemos dejar que muera, ya que entonces el kernel da un kernel panic.
 EXEC nombre_comando nos crea un proceso que tendrá el mismo PID que el proceso desde el que estamos haciendo el EXEC,
 pero el proceso llamante muere, y el nuevo proceso nunca retorna.
 
-Una SESIÓN es una nueva "línea de ejecución de comandos".
 Los comandos del script de inicio correren todos en la misma sesión, porque van uno detrás de otro en la misma "línea",
 por así decirlo.
 Si esa sesión acaba es que se dejan de ejecutar los comandos de esa línea de ejecución.
 Pero una sesión puede abrir nuevas sesiones, y quedarse esperando a que esas sesiones acaben, y luego esa primera sesión continua.

Eeeeentonces, para lanzar sh yo uso:
exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
¿Y por qué no hago simplemente /bin/sh? Porque entonces no estaría corriendo en una TTY, lo podrías ver con el comando "tty".

Bueno, pues lo que hacemos en la línea, consta de dos stages:
STAGE 1: exec setsid sh
	-EXEC crea un nuevo proceso que sigue teniendo PID 1, y el proceso original muere.
	 SETSID crea una nueva sesión por donde se van ejecutando cosas. La sesión principal queda parada a la espera de que la nueva sesión acabe.
STAGE 2: exec sh
	-EXEC crea un nuevo proceso que sigue teniendo PID 1, y el proceso anterior creado en el STAGE 1 muere.
	 Además, mediante los operadores > y < direccionamos la entrada y salida de ese nuevo proceso a /dev/tty1,
	 (para que corra sobre una TTY, y así tener una TTY activa en /dev/tty que los programas puedan abrir con open()). 
	
PEROOOO ENTONCES, ¿qué pasa cuando escribo "exit" en sh? Porque si lo he entendido bien, eso hace que el sh del segundo stage muera,
que es el que tenía el PID 1 porque lo heredó del sh del primer stage, que ya está muerto. Entonces, al morir el proceso con PID 1,
el kernel paniqueará!! Y no se ejecutarán los comandos de apagado ordenado (desmontaje del raiz, poweroff, etc) Pues sí, así es.
Así que tenemos dos opciones:
-OPCIÓN 1: Si en el STAGE 1 quitamos el exec del principio, el primer "sh" va a ser un poceso con un nuevo PID, pero en una nueva sesión.
 Entonces, cuando escribamos "exit", muere el proceso con PID 2, acaba la segunda sesión, y se siguen ejecutando los comandos
 de la sesión principal. Ya está. Nos vale.
-OPCIÓN 2: dejar todo como está y meter, en lugar del "sh" del STAGE 2, un script que: lance un tercer sh y después los comandos de apagado.
 De ese modo, el nuevo script comienza una nueva sesión (con el PID 1, ya que ambas sesiones empiezan con EXEC), y
 en esa sesión se lanza un nuevo "sh" y al acabar ese "sh" se hace el apagado ordenado. Nunca se vuelve a la primera sesión, ya que en es
 en esta seguda sesión donde haríamos el remount y el poweroff, pero funciona.
 Esto segundo es un pelín más complicado pero todo lo que corra desde el sh va a tener automáticamente su tty si la necesita.

--TIENES QUE SABER INTERPRETAR LOS NODOS EN /dev, AUNQUE NO VAYAS A CREARLOS A MANO:
Lo más importante que debes saber es que: lo importante de un nodo en /dev no es un nombre, sino su TIPO y sus MAJOR y MINOR numbers.
Los puedes ver en un sistema "normal" con ls -l /dev/loquesea. Por ejemplo, con "ls -l /dev/tty" vemos:
crw-rw-rw- 1 root tty 5, 0 nov 16 03:54 /dev/tty
De donde deducimos que tenemos que creat /dev/tty como un nodo de tipo CARACTER (de ahí la "c") con major 5 y minor 0.
ESE ES EL MODO EN QUE EL KERNEL SABER CÓMO USARLO, SU NOMBRE ES LO DE MENOS.
Entonces, ese nodo se crearía a mano con:
mknod -m 666 /dev/tty c 5 0
Y si miramos tty1 con "ls -l /dev/tty1", vemos:
crw--w---- 1 root tty 4, 1 nov 15 16:23 /dev/tty1
Así que ese nodo se crearía a mano con:
mknod -m 660 /dev/tty c 4 1
LA COSA es que, si necesitamos crear nodos a mano, los miramos con ls -l en un sistema funcional, y deducimos cómo crearlos
a mano nosotros con mknod.
Los nodos tipo bloque, como los discos, se hacen pasándole a mknod una "b" en vez de una "c".

--Cuando nos dé un error a la salida, al intentar montar / como read-only ("target / is busy" o algo así) podemos ver qué
fds a ficheros de / tenemos abiertos haciendo:
ls -l /proc/*/fd/*
La mayoría de lo que verás ahí son character devices, que no tienen nada que ver. Ahí puedes ver si están abiertos en modo
lectura, escritura, ejecución... Si no pone "w" en la cadena del modo de apertura, no hay problema.
ls -lL /proc/*/fd/*
Ahí, lo que tenga permisos que empiecen por c (como crw---------) es un character device,y lo que no, pues es un fichero.
Si al hacer "ls -lL" ves ficheros que tienen "w" en los permisos, no pasa nada, porque son eso, los permisos, no el modo
en el que está abierto.
El verdadero problema es que sea un fichero y además esté abierto en modo escritura.
DE TODOS MODOS, tal como está el sistema, el error "target / busy" lo da cuando has editado el fichero que contiene
el script de inicio, nada más. Así que edítalo desde fuera y ya, no desde el propio sistema. Ni idea de por qué pasa,
NO ES IMPORTANTE.

--Cuando en un programa encontremos que hacer un open() a /dev/tty devuelve -1 (es decir, al abrir el FD de la tty en uso)
y al mirar el ERRNO nos diga "can't open /dev/tty, no such device or address",
o lo que es lo mismo, cuando nos diga lo de "no such device or address" al hacer un echo hola > /dev/tty,
significa que SÍ TENEMOS el nodo /dev/tty, pero que no hay una TTY activa (tty1, tty2, etc).
(una TTY activa es que está siendo usada por SH, BASH...)
por lo que /dev/tty digamos que no apunta a ninguna parte (si la TTY activa es tty1, /dev/tty apunta a /dev/tty1, etc).
Cuando digo que una TTY es la TTY activa, es que se está viendo en pantalla (se cambiaría con CRTL+ALT+Fn, como sabes).
POR ESO tenemos que lanzar sh de manera que vaya a parar a una TTY (idealmente la tty1, que es la que está usando el kernel
para sacar sus mensajes, porque le hemos pasado console=tty1 en la línea de comandos del kernel, recuerda).
Puedes saber sobre qué TTY está corriendo sh o lo que sea simplemente con el comando "tty".
Y puedes saber sobre qué TTY corre cada programa en ejecución con ps -a.

--SOBRE LO ANTERIOR: ES POSILBE hacer un open() pasándole 0 en vez de /dev/tty a open(), si no has puesto en ningún TTY el SH
o el programa único que hayas lanzado en modo singleuser, y/o ni siquiera tienes un nodo /dev/tty que apunte
a una tty de verdad (/dev/tty1, etc..) creado. Y funciona.
E incluso se puede hacer el típico de KDSKBMODE a K_OFF para que no haya leak de teclas a la consola, o K_XLATE
para que vuelva a producir pulsaciones de teclas a la consola, etc.. con el fd que nos ha devuelto open() pasándole 0
en vez de una TTY.
Lo que pasa es que con SDL2 no hay forma de restaurar el teclado ("ioctl(0, KDSKBMODE, K_XLATE") al salir, porque el ioctl falla con
"bad file descriptor". (O sea, el ioctl devuelve -1, pero luego miramos errno con: 
printf("ERRORNO after ioctl was: %s\n", strerror(errno));
Y ahí vemos lo del "bad file descriptor".
(Sí funciona si lo restauramos nada más hacer el K_OFF para silenciarlo, pero si lo hacemos a la salida ya no funciona).
Esto pasa porque SDL2 hace en alguna parte un close() a un fd que vale 0, o vamos, que le llega 0 a un close.
Pero eso escapa completamente a nuestro control.

--Partimos de la premisa de que al kernel le pasamos console=tty1, claro. Si usamos otra tty, pues habrá que crear esa otra TTY
y mandar el sh a correr en esa otra tty.

***************************************
*FIN NOTAS IMPORTANTES DE CONOCIMIENTO*
***************************************

El siguiente script es el que puedes poner como script mínimo de arranque para levantar un sistema usable sin systemd
ni ningún otro proceso init.
Yo lo he puesto como /root/minimal, con permisos de ejecución, y luego en cmdline.txt he puesto
init=/root/minimal rw
Lo de rw es directamente para montar el root como read-write.

**************************************
* OTRAS NOTAS PARA AFINAR EL SISTEMA *
**************************************

TAMBIÉN puedes poner en cmdline.txt para que no salga el cursor parpadeante:
vt.global_cursor_default=0

******************
*COSAS PENDIENTES*
******************
TODO: 
-Tunear lo de la escritura en disco para que sea inmediata. Mira los parámetros: vm.dirty_background_ratio y
vm.dirty_ratio.

-En lugar de usar esa línea tan larga de setsid para lanzar sh en la tty1, usar cttyhack, que es parte de busybox.
Pero para eso habría que pasarse a busybox. Puede convenir porque además trae mdev en vez de udev, que creo que
crea los nodos sin depender de rules externas, así que nos ahorramos lo de hacerlo a mano. Investigarlo.

-Pasar de udev a mdev, que es lo que se usa en busybox. Para poner en marcha mdev una vez instalado, lee:
https://git.busybox.net/busybox/plain/docs/mdev.txt


******************
* NOTAS DE AYUDA *
******************
NOTA ADICIONAL POR SI TE HACE FALTA: Para ver la configuración del kernel en ejecución, tienes que insertar un módulo y luego
sacarla de un fichero, tal que así:
sudo modprobe configs
zcat /proc/config.gz > kernel_config

NOTA ADICIONAL POR SI TE HACE FALTA. Tira de google a partir de esto si quieres reiniciar con el saludo de los tres dedos.
You can change the behaviour of CTRL-ALT-DEL from rebooting: To disable CTRL-ALT-DEL from rebooting your computer (or to have it do something different), you can edit the /etc/inittab file

NOTA ADICIONAL POR SI TE HACE FALTA.
Para loguearte como usuario, se podría tirar de agetty:
getty -n -l /bin/sh 9600 tty1
