Fuentes:

MANUAL DE BUILDROOT, DONDE SE EXPLICA QUÉ ES MDEV, DEVTMPFS... LEER LO PRIMERO (buscar MDEV):
https://buildroot.org/downloads/manual/manual.html

GUÍA DE MIGRACIÓN DE UDEV A MDEV: 					https://wiki.gentoo.org/wiki/Mdev
OTRAS NOTAS MUY BUENAS SOBRE CÓMO FUNCIONA MDEV: 	http://lists.busybox.net/pipermail/busybox/2015-August/083255.html

REPASO PREVIO: EL SISTEMA DE PERMISOS DE UNIX
=============================================

Recuerda que los permisos que ves cuando haces "ls -l" a un archivo van así:

USER GROUP OTHER
rwx  rwx   rwx

Es decir, los permisos sobre el archivo que tiene el propietario, los del grupo del propietario, y los demás.
El órden es ese: RWX. Y cada uno de ellos es 0 o 1, y tenemos 3 bits para los permisos del propietario, 3 bits para los permisos de los del grupo del propietario, y 3 bits para los permisos de los demás usuarios.
Ahora, recuerda como base que "4 es 100".
Así, 400 significaría: 	r-- --- ---
455 significaría: 		r-- r-x r-x
600 significaría: 		rw- --- ---
660 significaría:		rw- rw- ---

CONCEPTOS BÁSICOS
=================

NOTA INICIAL: DEVTMPFS es parte del kernel (para que funcione basta con tener CONFIG_DEVTMPFS=y y CONFIG_DEVTMPFS_MOUNT=y en la config del kernel).
DEVTMPFS crea los nodos de dispositivo, no nos hace falta MDEV para eso, ya los crea DEVTMPFS.
Los nodos que crea DEVTMPFS tienen todos como propietario root:root y permisos 600 (600 equivale a rw- --- ---),
así que si lo hacemos todo como root, así queda perfecto todo, incluidos gráficos.

NOTA INICIAL: Los tres sistemas que tienes que tener funcionando para que RetroArch llegue a funcionar con el driver UDEV sin tener UDEV
(es decir, teniendo MDEV en su lugar) son: DEVTMPFS, MDEV y LIBUDEV-ZERO.
Tienes que tener funcionando LOS TRES SISTEMAS.

-DEVTMPFS: El sistema de archivos virtual donde el kernel hace aparecer y desaparecer los nodos de dispositivo cuando los conectamos o desconectamos.
           RECUERDA: El kernel hace esto por sí mismo, NO hace falta MDEV para hacer aparecer o desaparecer nodos en /dev.
           Para que el kernel se encargue de crear los nodos, tiene que tener la opción CONFIG_DEVTMPFS=y.
           Y para que el kernel automonte el DEVTMPS en /dev (estando así /dev en RAM, no en el disco, y creando allí el kernel los nodos),
           tiene que tener la opción CONFIG_DEVTMPFS_MOUNT=y.
           En la mayoría de los kernels, ambas vienen por defecto activadas, así que no hace falta que hagas "mount -t devtmpfs none /dev"
           en el script mínimo de inicio, ya viene montado DEVTMPFS en /dev y todo.

		   De la documentación de la opción ONFIG_DEVTMPFS del kernel:
		   "This creates a tmpfs filesystem, and mounts it at bootup and mounts it at /dev. The kernel driver core creates device nodes for all
		   	registered devices in that filesystem. All device nodes are owned by root and have the default mode of 0600. Userspace can add and
			delete the nodes as needed. This is intended to simplify bootup, and make it possible to delay the initial coldplug at bootup done
			by udev in userspace. It should also provide a simpler way for rescue systems to bring up a kernel with dynamic major/minor numbers.
			Meaningful symlinks, permissions and device ownership must still be handled by userspace."

-MDEV: Es una utilidad de espacio de usuario que es parte de BUSYBOX, y que el kernel llama cuando se conecta o desconecta un dispositivo.
       ¿Y para qué la llama si los nodos ya los crea el kernel en /dev usando DEVTMPFS?
       Pues porque MDEV nos permite establecer permisos o titularidad de los nodos de dispositivo,
       nos permite llamar a un script cuando se conecta o desconecta tal o cual dispositivo, etc...
       Todo ello, según lo que especifiquemos en /etc/mdev.conf
       
-LIBUDEV-ZERO: Es una reimplementación de LIBUDEV ¡pero que no necesita el servicio UDEV funcionando!. De esa manera, RetroArch, cuyo driver
de input UDEV usa LIBUDEV, que a su ver necesita el servicio UDEV corriendo, puede funcionar sin UDEV.

--NOTA FINAL-- Lo que sucede con /dev/dri/card0 es que, al cargar el módulo vc4 nosotros manualmente,
el kernel crea el nodo /dev/dri/card0 usando DEVTMPFS automáticamente como siempre.
Lo crea con los permisos con que crea todos los nodos, es decir: root:root 600 (o sea => rw- --- ---)
Con esos permisos es suficiente para que se vea la consola en pantalla y, si además cargamos el módulo v3d, para que funcionen los gráficos.

LA SECUENCIA DE ARRANQUE CON MDEV (NOTA: MDEV NORMALMENTE NO HACE FALTA PARA NADA)
==================================================================================

TIENES UNA SECUENCIA TÍPICA DE ARRANQUE SIN UDEV EN EL SCRIPT "minimal".
NORMALMENTE MDEV NO HACE FALTA PARA NADA: DEVTMPFS (PARTE DEL KERNEL) CREA LOS NODOS EN /DEV,
Y CARGAMOS "A MANO" LOS MÓDULOS NECESARIOS PARA NUESTRO HARDWARE.
MDEV ES SÓLO POR SI QUEREMOS CONECTAR Y USAR HARDWARE NUEVO SIN REINICIAR LA MÁQUINA.
ACTIVAR MDEV CONSISTE SIMPLEMENTE EN DECIRLE AL KERNEL QUE TIENE QUE LLAMAR A MDEV CUANDO HAY UN EVENTO DE HTPLUG, COSA QUE SE HACE CON LA
LÍNEA:
echo /bin/mdev/ > /proc/sys/kernel/hotplug

PERO OJO!! LO PRIMERO, DEBES TENER MDEV DISPONIBLE COMO COMANDO DESDE EL PRINCIPIO DEL ARRANQUE, para ello al menos una vez tenemos que hacer:
ln -s /bin/busybox /dev/mdev

TAMBIÉN ten en cuenta que el kernel automonta DEVTMPFS en /dev, siempre y cuando tenga la opción CONFIG_DEVTMPFS_MOUNT=y, que es lo más normal,
así que NORMALMENTE no necesitas montar el DEVTMPFS manualmente en tu custom init porque ya lo hace el kernel (esto es algo relativamente moderno,
asú que puede que te encuentres instrucciones de cuando no era así y había que hacer "mount -t devtmpfs none /dev".
TAMBIÉN, si arrancas con un initramfs o un initrd, tienes que hacer LO PRIMERO DEL INIT SCRIPT el montaje de devtmpfs
con "mount -t devtmpfs none /dev", y luego tendrás que hacer "busybox mdev -s" para recrear los nodos de /dev ya que al montarlo a mano estará vacío.
PERO eso es sólo si alguna vez usas un initramfs o un initrd, NORMALMENTE el kernel automonta DEVTMPS en /dev y ya está.

A PARTE, tienes que tener esto en /etc/mdev.conf si quieres que MDEV cargue/descargue automáticamente los módulos cuando conectes/desconectes
algo en caliente:

-$MODALIAS=.* root:root 600 @modprobe "$MODALIAS"
-$MODALIAS=.* root:root 600 $modprobe -r "$MODALIAS"

NOTA que la parte en la que dice "$MODALIAS=.*" es lo que se llama el REGEX (regular expression) que, si coincide con algún dispositivo,
se hace lo que le digamos que tenga que hacerse en esa línea.
La documentación de MDEV está en unos TXT que vienen con su código fuente:
git clone --depth 1 git://git.busybox.net/busybox
Y editamos docs/mdev.txt para ver la documentación y ejemplos.
Tienes un MONTÓN más de ejemplos (de hecho, un mdev.conf completo) aquí:
https://github.com/slashbeast/mdev-like-a-boss/blob/master/mdev.conf

NOTA que ambas líneas empiezan con un guión. Esto es para que mdev NO se detenga en la primera línea con la que haga un match
con la REGEX/exp.regular (que es .*, englobando así a TODOS los nombres de módulo de sysfs), sino que continúa leyendo las demás líneas
y haciendo lo que se diga en ellas si también hace match con la REGEX de cada una de ellas.

(¡¡¡OJO!!!)NOTA QUE PODRÍAMOS DEJAR SÓLO LA PRIMERA LÍNEA Y SIN GUIÓN, PARA NO DETECTAR DESCONEXIONES, SÓLO CONEXIONES,
Y ASÍ NO TENER SALTOS EN LA EMULACIÓN,
(pero claro, entonces tenemos que salir de RetroArch si queremos reconectar un mando, conectar otro nuevo, etc).

NOTA también que en una el comando modprobe se precede de '@' y en la otra se precede de '$'.
Pues la de '@' es para que el comando se ejecute cuando el evento de hotplug es de CONEXIÓN ($ACTION=add) y la de '$' para que el comando se ejecute
cuando el evento de hotplug es de DESCONEXIÓN ($ACTION=remove).

NOTA que por raro que parezca, en la regla de descarga de módulo, también le damos el propietario y los permisos: sin eso, no funciona.

NOTA que hacen falta ambas líneas, no se puede poner el comando de carga y el de descarga en la misma, no funciona.

NOTA QUE SI ALGUNA VEZ QUISIERAS que se automonte algo al conectarlo, etc... ahí en vez de "modprobe" puedes llamar al script de cosecha propia que quieras.
Puedes hacer que ocurra lo que quieras poniéndolo ahí y si hay match del REGEX, se ejecutará.

root:root es la propiedad de los nodos creados, y 600 los permisos.
(Son los valores por defecto, los explicitamos sólo para dejarlo documentado)

Para que funcione la GPU, deberías tener los nodos del sistema gráfico. Son
/dev/dri/card0
/dev/dri/card1
/dev/dri/renderD128
..Y en el caso de la raspberry pi, los debería crear el módulo VC4 al cargarse.

(En caso de no crearse, VER NOTAS DEL FICHERO "CREACIÓN MANUAL DE NODOS")

PARA QUE FUNCIONE RETROARCH
===========================

En Devuan, la implementación de udev es eudev, y la implementación de libudev es libeudev. Eudev/libeudev que no depende de systemd.
Nos vamos a referir genéricamente a udev/eudev como udev, y a libeudev/libudev como libudev.
Bueno: la cosa es que el backend UDEV de RetroArch (RA) usa libudev. Y LIBUDEV NECESITA EL SERVICIO UDEV CORRIENDO PARA FUNCIONAR.
Como no lo tenemos, el backend UDEV de RetroArch no funciona. Olvídate de permisos o propiedad de los nodos de /dev/input/event*, etc
El problema es simplemente que NO tenemos el servicio UDEV corriendo, aunque tengamos LIBUDEV instalada.
Así que tenemos dos alternativas para que RetroArch funcione sin el servidio UDEV:

-Usar el backend LINUXRAW, en lugar del backend UDEV.
Su principal desventaja frente a UDEV es que no soporta hot-plugging mientras RetroArch corre, hay que salirse de RA,
conectar los mandos que queramos usar y volver a entrar.
Para usarlo, tenemos que ponerlo en DOS SITIOS de retroarch.conf:

input_driver="linuxraw"
input_joypad_driver="linuxraw"

También recuerda que al pasar a usar LINUXRAW, tienes que reconfigurar los controles de la cruz del pad. Sólo los de la cruz,
los demás si los dejas como estaban en UDEV funcionan.
También recuerda que al pasar a usar LINUXRAW, las teclas de aceptar y cancelar en el teclado pasan a ser Z y X.
Esto no se puede configurar, están hardcodeadas. Pero vamos, RetroArch tiene una GUI muy orientada a mandos, así que no importa. 

-Usar libudev-zero, que es un drop-in replacement de UDEV que no necesita ningún servicio corriendo.
Puede ser necesario cuando volvamos a Wayland, ya que no sé si LINUXRAW funcionará allí.
Para ello:
	-Clonamos su repo: git clone --depth 1 https://github.com/illiliti/libudev-zero.git

	-Borramos a mano libudev (en Devuan es libeudev, un drop-in replacement de udev que no depende de systemd, pero los ficheros son los mismos):
	apt-get purge libeudev-dev
	rm /usr/lib/aarch64-linux-gnu/libudev*
	rm /usr/lib/aarch64-linux-gnu/pkgconfig/libudev.pc
	rm -R /usr/lib/udev
	(Lo borramos a mano porque borrarlo usando "apt-get purge" se lleva por delante componentes del sistema muy importantes como el propio apt!)

	NO OLVIDES, TRAS DESINSTALARLO, LIMPIAR LA CACHÉ DE LIBRERÍAS:
	rm /etc/ld.so.cache
	ldconfig

	-Compilamos e instalamos libudev-zero:
	CFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" make -j4
	make install
	(OJO, como sabes, al no especificarle un PREFIX=... a "make install", se instalará en /usr/local, donde están todas mis librerías de
	 compilación propia, como SDL2, etc.. es lo normal).

	-RECOMPILAMOS RetroArch normalmente, que ahora debería detectar la librería libudev correspondiente a libudev-zero.
	ESTO ES MUY IMPORTANTE. SI PASAS DE USAR UDEV/EUDEV A USAR UDEV-ZERO, HAY QUE RECOMPILAR RETROARCH.

	-SI QUEREMOS TENER HOTPLUGGING como en el UDEV original (es decir: poder poner y quitar mandos mientras RetroArch está funcionando),
	tenemos que compilar el helper que trae libudev-zero, instalarlo en /usr/local/bin, y añadir unas líneas a /etc/mdev.conf.
	Se hace tal que así:
		cd contrib
		gcc helper.c -o udevzero-helper -march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer
		cp udevzero-helper /usr/local/bin
	
		Y ahora añadimos esto a nuestro /etc/mdev.conf (está sacado de contrib/mdev.conf, modificado para que encuentre el helper
		con el nombre que le hemos puesto nosotros cuando lo hemos compilado, que lo hemos llamado udevzero-helper como lo podíamos
		haber llamado pepito):
		SUBSYSTEM=input;.* root:input 600 */usr/local/bin/udevzero-helper
		
Por si quieres volver a EUDEV:

	-Para desinstalar libudev-zero sería:
	make uninstall

	-Para instalar de nuevo libeudev:
	apt-get install --reinstall libeudev1
	apt-get install --reinstall libeudev-dev

INSTALAR EUDEV
==============

EUDEV sigue vivo, bajo el paraguas de Gentoo y Alpine Linux.

Bajamos los últimos sources estables de aquí:
https://github.com/eudev-project/eudev/releases

Instalamos dependencias previas:
apt-get install gperf

Configuramos, compilamos e instalamos, con:
CFLAGS="-march=armv8-a+crc+simd -mtune=cortex-a72 -ftree-vectorize -pipe -fomit-frame-pointer" ./configure
make -j4
make install

DESHABILITAR EL CURSOR QUE PARPADEA MIENTRAS ARRANCA EL KERNEL
==============================================================

Añadimos a cmdline.txt:
vt.global_cursor_default=0

LIMPIEZA DE PAQUETES PESADOS
============================

Lo primero, purgamos los paquetes que han sido "removed" pero no "purged":
dpkg --list |grep "^rc" | cut -d " " -f 3 | xargs sudo dpkg --purge

AHORA, podemos listar los paquetes instalados por órden de peso con:
dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n

..Y los vamos eliminando a gusto.
Empieza con estos:
apt-get purge firmware-misc-nonfree firmware-libertas firmware-atheros

LIBRARNOS DEFINITIVAMENTE DE SYSTEMD
====================================

Una vez que tengamos el sistema arrancando desde nuestro propio script de inicio en /etc/minimal, ya podemos hacer sin miedo:

apt-get purge systemd cron anacron bcron init
rm -R /etc/systemd

OJO!!! UNA VEZ PURGADO SYSTEMD, YA NO TENEMOS /sbin/poweroff, /sbin/reboot, etc... YA QUE LOS QUE TRAE DEBIAN SON
TODOS ELLOS SYNLINKS A /bin/systemctl.

Así que tenemos que hacer:
ln -s /usr/bin/busybox /usr/bin/reboot
ln -s /usr/bin/busybox /usr/bin/halt
ln -s /usr/bin/busybox /usr/bin/poweroff

Otra alternativa sería usar los ejecutables que hay en /usr/lib/klibc/bin/, pero recuerda que habría que llamarlos con la ruta completa
ya que /usr/lib/klibc/bin/ no está en el PATH.
