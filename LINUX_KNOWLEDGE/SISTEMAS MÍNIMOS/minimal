#!/bin/sh

# Para que vayan gráficos y audio, es necesario tener sysfs y proc.
# Y para que arranque el servicio udev, y para poder configurar el governor a mano.
mount -t sysfs sysfs /sys
mount -t proc proc /proc
mount -n -t tmpfs none /dev

# Creamos el nodo de la partición root,
# y re-montamos el root como lectura/escritura
# Esto hay que hacerlo al principio para que los siguientes nodos que creamos
# tengan los permisos correctos. De lo contrario nos podemos encontrar con que
# los nodos input* no los tienen y no nos funciona el teclado en los juegos, etc,
mknod -m 660 /dev/mmcblk0 b 179 0
mknod -m 660 /dev/mmcblk0p11 b 179 11
mount -o remount,rw /

# Ponemos a punto el governor
echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu1/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu2/cpufreq/scaling_governor
echo performance > /sys/devices/system/cpu/cpu3/cpufreq/scaling_governor

# OPCIONAL: Lanzamos udev para que nos detecte lo que conectemos dinámicamene
# y carge los modulos. NO crea los nodos a no ser que tenga unas rules
# que creo que le pasa systemd, así que por eso tenemos que crearlos
# nosotros a mano como acabas de ver.
# /etc/init.d/udev start >> /dev/null

# LO QUE SOLEMOS HACER PARA NO USAR UDEV: Si no usamos udev, cargamos a mano los modulos.
# Esta es la lista minima para tener video, sonido, teclado y raton, joystick y red en la Pi4.
# CUIDADO: El módulo uio es necesario para que funcionen los mandos USB.
# CUIDADO: Los módulos para teclado/ratón (hid_logitech*) y mando (xpad) son específicos
# para los que yo uso. Para otros distintos, harán falta otros módulos.
modprobe vc4 
modprobe v3d
modprobe drm
modprobe i2c_brcmstb
modprobe snd_pcm
modprobe joydev
modprobe uio

modprobe hid_logitech_hidpp
modprobe hid_logitech_dj
modprobe xpad

# Creamos los nodos de tty (que pasará a ser la tty en uso cuando tengamos
# algo funcionando en alguna tty) y de tty1.
# Los dos ultimos numeros son el MAJOR y el MINOR, y hay que conocerlos
# porque son especificos de cada tipo de nodo que creemos.
mknod -m 666 /dev/tty c 5 0
mknod -m 660 /dev/tty1 c 4 1

# En caso de que te den en faltar estos nodos basicos, asi se crean.
#mknod -m 622 /dev/console c 5 1
#mknod -m 666 /dev/null c 1 3
#mknod -m 666 /dev/zero c 1 5
#mknod -m 666 /dev/ptmx c 5 2
#mknod -m 444 /dev/random c 1 8
#mknod -m 444 /dev/urandom c 1 9

# Creamos los nodos del chip grafico. La pi4 tiene dos salidas,
# así que creamos dos tarjetas. El renderD128 también es necesario.
mkdir -p /dev/dri
mknod -m 660 /dev/dri/card0 c 226 0
mknod -m 660 /dev/dri/card1 c 226 1
mknod -m 660 /dev/dri/renderD128 c 226 128

# Creamos los nodos de audio
mkdir -p /dev/snd
mknod -m 660 /dev/snd/controlC0 c 116 0
mknod -m 660 /dev/snd/controlC1 c 116 32
mknod -m 660 /dev/snd/pcmC0D0p c 116 16
mknod -m 660 /dev/snd/pcmC1D0p c 116 48
mknod -m 660 /dev/snd/timer c 116 33

# Creamos los nodos de input
mkdir -p /dev/input
mknod -m 660 /dev/input/mouse0 c 13 32
mknod -m 660 /dev/input/mice c 13 63
mknod -m 660 /dev/input/event0 c 13 64
mknod -m 660 /dev/input/event1 c 13 65
mknod -m 660 /dev/input/event4 c 13 68
mknod -m 660 /dev/input/js0 c 13 68

# devpst es para poder conectar por ssh.
#mkdir /dev/pts
#mount -t devpts none /dev/pts -o gid=4,mode=620 

# Si queremos levantar la red, descomentar esto. Ojo que será necesario tener
# cargados los módulos para el hardware de red de nuestra máquina.
# En la Pi4, con la lista mínima de módulos que cargamos manualmente
# no hace falta nada más.
#ifconfig eth0 up
#ip addr add 192.168.1.8/24 dev eth0
#ip route add default via 192.168.1.7
#/etc/init.d/dropbear start

# Esto configura la fuente y el teclado de la consola.
# Lee la configuración de /etc/default/console-setup y /etc/default/keyboard.
setupcon

# En caso de querer consola, descomentar esto.
# Se puede usar bash pero depende de más basura de systemd.
# Tienes dos opciones para que no nos de un kernel panic por matar init cuando
# hagamos "exit" desde el shell:
# 1- Eliminar el exec del inicio, pero luego lo demás que necesite un TTY 
#    tendrá que tener un setsid (set session id) para mandarlo al TTY que sea.
# 2- Sustituir el segundo sh por un script que se encargue de lanzar a su vez /bin/sh
#    y que cuando acabe desmonte todo y apague.
#    Esto segundo es un pelín más complicado pero todo lo que corra desde el sh
#    va a tener automáticamente su tty distinta si la necesita.
# Dejo la línea completa comentada como referencia. No la borres.
# exec setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'
setsid sh -c 'exec sh </dev/tty1 >/dev/tty1 2>&1'

# Este es el programa único que va a correr el sistema, en lugar de la consola.
#/usr/local/bin/retroarch

# Una vez que se sale del programa único, paramos udev (si es que lo hemos lanzado)
# y montamos el root como readonly.
# El desmontaje conlleva la sincronización de los discos.
# /etc/init.d/udev stop
mount / -o remount,ro

# Dependiendo de si quieres reiniciar o apagar al salir, usa una o la otra.
# Poweroff va con dos -f, sí, no es un error, es para que no contacte con el gestor de procesos, que no existe.
reboot -f
#poweroff -f -f
