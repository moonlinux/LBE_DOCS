#!/bin/sh

#################################################
# BLOQUE DEVTMPFS Y MDEV                        #
#################################################

# ¡¡¡¡CUIDADO!!!! ANTES DE PODER USAR MDEV, DEBEMOS CREAR UN LINK SIMBÓLICO
# A BUSYBOX CON:
# "ln -s /bin/busybox /bin/mdev"

# Para que se creen y borren automáticamente los nodos en /dev al conectar
# y desconectar cosas, lo que se usa es DEVTMPFS, que es parte del kernel.
# O SEA, es el kernel el que crea y borra los nodos en /dev, NO hace falta MDEV.
# Para que funcione DEVTMPFS, el kernel ha de tener la opción CONFIG_DEVTMPFS=y,
# que es lo más común. 
# Y para que el kernel monte DEVTMPFS en /dev automáticamente, debe tener
# CONFIG_DEVTMPFS_MOUNT=y, que también es lo más común.

# Si arrancases usando un initramfs o un initrd, sin embargo, sí tendrías
# que montar DEVTMPFS en /dev a mano LO PRIMERO EN EL SCRIPT,
# usando "mount -t devtmpfs none /dev", y luego tendrías que pedirle a MDEV
# que recreease los nodos de dispositivo usando "busybox mdev -s",
# ya que aunque el kernel ya habría creado los nodos en /dev en el arranque,
# ahora estaríamos con un /dev vacío y habría que volver a crear los nodos:
# el kernel ya los creó así que no lo va volver a hacer a no ser que
# reconectásemos todo.
#
# Además, en kernels viejos, CONFIG_DEVTMPFS_MOUNT no estaba, y por eso también
# a veces verás instrucciones viejas que indican que hagas lo primero
# "mount -t devtmpfs none /dev" o similar.

# MDEV nos hace falta para que auto-cargue los módulos cuando hay un evento
# de hotplug después de que el kernel ya está arrancado.
# De paso, también le podemos decir que establezca propiedad y permisos
# para los nodos, pero esto a nosotros nos da igual porque lo hacemos todo
# con el usuario root, así que los permisos 600 que establece DEVTMPFS
# por defecto nos valen perfectamente.

# Para que MDEV haga la autocarga/descarga de módulos, debemos tener
# estas líneas en /etc/mdev.conf:
#-$MODALIAS=.* root:root 600 @modprobe "$MODALIAS"
#-$MODALIAS=.* root:root 600 $modprobe -r "$MODALIAS"
# (Podríamos dejar sólo la primera línea, sin guión, para detectar
# sólo conexiones). Son dos líneas porque una es para la carga automática
# de módulos al CONECTAR algo y otra para la descarga automática de módulos
# al DESCONECTAR algo.
# Lo de 'root:root 600' es la propiedad (usuario:grupo) y los permisos
# de los nodos que MDEV establece (DEVTMPS al crear los nodos les da 600
# a todos, nosotros hacemos lo mismo en este ejemplo).
# Ambas líneas empiezan por un guión realmente, para que MDEV no se detenga
# en la primera en que haga match, y aunque parezca raro, en la de descarga
# también hay que poner la propiedad y los permisos o no funciona.
# Para que un comando se ejecute cuando se CONECTA algo, se precede de '@'
# y para que se ejecute cuando se DESCONECTA algo se precede de '$'.
# Por eso tienes una '@' en la de carga y un '$' en la de descarga.
# Se necesita usar DOS LÍNEAS, no vale poner el comando de carga (@modprobe)
# y el de descarga ($modprobe -r) en la misma, sencillamente NO FUNCIONA.

# Para poder activar MDEV, y para que vayan gráficos y audio, es necesario tener
# sysfs y proc montados.
# En algunos kernels ya viene montado /sys, así que la línea de montaje de /sys
# no sería necesaria.
mount -t sysfs none /sys
mount -t proc proc /proc

# Con lo siguiente "activamos" MDEV, es decir: le decimos al kernel que llame
# a MDEV cuando haya un evento de hotplug/unplug. Sin MDEV, sencillamente
# hay que reiniciar el sistema si conectamos o desconectamos algo.
# echo /bin/mdev > /proc/sys/kernel/hotplug

# El sistema devpts (NO confundir con el gran DEVTMPFS, ¡ojo!) es otro sistema
# de archivos virtual que vive en /dev/pts y que contiene esclavos multiplexados
# de /dev/ptmx, siendo cada uno de esos esclavos la representación de un emulador
# de terminal (como xterm en X11, o un terminal de wayland, o un terminal
# de acceso por SSH. Como usamos SSH, pues tenemos que montar esto
# o nos dará un error "PTY allocation failed" al intentar entrar).
mkdir -p /dev/pts
mount devpts /dev/pts -t devpts

# Cargamos los módulos del hardware que YA tenemos conectado.
# ¿Por qué lo hacemos si tenemos MDEV? Mira:
# Cuando conectemos nuevo hardware, se encargará MDEV porque será llamado
# por el kernel en cada evento de conexión/desconexión,
# pero para el hardware que YA está conectado al arrancar,
# lo tenemos que hacer nosotros porque no hay tales eventos que desencadenen
# las llamadas a MDEV.

# Podemos hacerlo automáticamente, mirando en /sys/devices...
#find /sys/devices -name modalias -type f -print0 | xargs -0 sort -u | xargs modprobe -ab 2>/dev/null

# O podemos hacerlo a mano, sólo para el hardware de esta máquina en concreto.
# Si algo que conectas no va, ejecuta la línea anterior o arranca con ella,
# vuelca la salida de lsmod a un fichero y analiza qué módulos te faltan aquí.
# OJO a los módulos "i2c_brcmstb" y "snd_soc_hdmi_codec": sin ellos,
# no hay señal de vídeo en la Pi.
modprobe i2c_brcmstb
modprobe vc4
modprobe v3d
modprobe snd_soc_hdmi_codec
modprobe xpad

#################################################
# FIN BLOQUE DEVTMPFS Y MDEV                    #
#################################################

# Aquí elegiríamos el governor de cada core, ahora que ya tenemos el sysfs
# preparado y cargados los módulos que permiten controlar la frecuencia
# de la CPU, pero NO lo hacemos aquí sino añadiendo a la línea de parámetros
# del kernel: "cpufreq.default_governor=performance".
# Esto está aquí sólo a efectos de documentación de cómo setear cosas en sysfs.
#for numcore in 0 1 2 3
#do
# echo performance > /sys/devices/system/cpu/cpu$numcore/cpufreq/scaling_governor
#done

# Re-montamos el root como lectura/escritura.
# Podríamos poner la opción "sync" después de otra coma para que las escrituras
# sean inmediatas, lo que mejora mucho la predictibilidad del sistema al no haber
# escrituras retardadas, pero todo sería mucho más lento (comprobado).
mount -o remount,rw,noatime,nodiratime /

# Montamos también la partición de BOOT
mount /dev/mmcblk0p1 /boot -o rw,sync,noatime,nodiratime

# Montamos /tmpfs, /run y /var/log en RAM, para que no se escriban temporales ni
# logs en disco (no metemos /var entero en RAM porque DPKG y APT meten ahí los
# metadatos y si lo hiciésemos tendríamos que ejecutar "apt-get update" en cada
# nuevo arranque del sistema).
# No especificamos un tamaño, así que como mucho pueden ocupar el 50% de la RAM.
mount -t tmpfs tmpfs /tmp
# Para que Wayland no se queje, el directorio $XDG_RUNTIME_DIR debe tener
# permisos 0700.
mount -t tmpfs tmpfs /run -o mode=700
mount -t tmpfs tmpfs /var/log

# Creamos el enlace simbólico de /run a /var/run si no está creado ya.
# Es necesario porque algunos programas aún usan /var/run en vez de /run,
# como por ejemplo wpa_supplicant.
if [ ! -d "/var/run" ]; then
    ln -s /run /var/
fi

# Montamos /dev/shm que es el directorio de memoria compartida que usan los
# programas para acceder a porciones de memoria de otros programas.
# Sin esto, por ejemplo, jackd no funcionará.
mkdir /dev/shm
mount -t tmpfs tmpfs /dev/shm

# MUY IMPORTANTE exportar $HOME o las configuraciones de los programas
# se empezarán a guardar en /. Así que esto hay que hacerlo SIEMPRE.
export HOME=/root

# También exportamos $XDG_RUNTIME_DIR a /run. Como usuario normal,
# $XDG_RUNTIME_DIR sería algo como /run/user/1000, pero como root,
# debe apuntar a /run simplemente, ya que no hay login manager.
# Esto nos ahorra muchos problemas después con Wayland, Pipewire, etc.
export XDG_RUNTIME_DIR=/run

# También exportamos el locale por defecto. Previamente debemos haber
# regenerado el locale que queramos especificar,
# usando "dpkg-reconfigure locales".
# Raspbery Pi OS, por ejemplo, viene sólo con en_GB.utf8, cuidado.
export LANG=en_US.utf8

# Setupcon configura la fuente y el teclado de la consola,
# leyendo la configuración de /etc/default/console-setup y /etc/default/keyboard.
hostname minimal
setupcon

# Restablecemos la última fecha conocida de /etc/fake-hwclock.data, para que
# al menos no estemos en los 70s. Importante para que GIT funcione correctamente.
fake-hwclock load >> /dev/null

# Antes de establecer el volúmen, tenemos que reproducir un audio aunque sea
# inexistente, o el controlador del volúmen por software (softvol) no estará
# disponible aún.
# Algunos dispositivos como el vc4hdmi no tienen control de volúmen por hw.
aplay  /dev/zero -s 1 -q
amixer set PCM 230 -q

# El lanzamiento del bash se hace mediante setsid y exec en dos stages:
# En el STAGE 1, setsid inicia una nueva sesión y manda un primer sh ahí,
# y en el STAGE 2 exec ejecuta otro sh con el mismo PID que el sh anterior,
# que tiene PID 1 (Siempre hay que tener un PID 1 o el kernel da un panic
# por matar el proceso init). La entrada y salida de este segundo sh
# es redireccionada a tty1.
# Se puede usar bash o bien sh. Si usamos bash, hay que pasarle el --login
# porque si no, no lee /etc/profile y nos faltan cosas en el $PATH.
setsid sh -c 'cd /root;exec bash --login </dev/tty1 >/dev/tty1 2>&1'

# En caso de querer un único programa corriendo:
# setsid sh -c 'exec /usr/local/bin/retroarch </dev/tty1 >/dev/tty1 2>&1'

# BLOQUE para arrancar Wayland, Weston concretamente.
# Lo del punto para ejecutar profile es porque en sh no podemos hacer
# "source /etc/profile" porque el comando "source" es propio de bash.
# Weston y otros compositors necesitan el servicio systemd-logind
# corriendo o en su defecto, si no tenemos systemd como es el caso, seatd.
# Necesitamos cargar el profile para que se exporte el PATH, necesario
# para que Weston encuentre los programas que cargamos con los atajos
# de teclado.
# Los parámetros "-l" y "-f" de Weston son para que no mande logs a la consola
# y para desactivar el autopilot que no sé lo que es ni me interesa.

# seatd -u root -l silent &
# setsid sh -c '
# . /etc/profile;
# cd /root;
# exec /usr/local/bin/weston -l '' -f '' </dev/tty1 >/dev/tty1 2>&1'

# Salvamos la última fecha conocida, que va al fichero /etc/fake-hwclock.data
fake-hwclock save

# Matamos todos los procesos que se hemos lanzado para que powerwoff no falle 
# intentando esperar a que un proceso acabe, lo que causaría
# el fin de nuestro "init", que es este script, y por tanto un kernel panic
# ya que el "init" nunca debe llegar a acabar sino cortarse en el poweroff.
killall -u root

# Desmontamos todo lo que hemos montado.
# El desmontaje conlleva la sincronización en el caso de los discos.
# No nos molestamos en desmontar /run porque siempre da error (posiblemente
# porque el propio mount también lo usa) y como está en RAM no se pierde nada.

umount /sys
umount /proc
umount /tmp
umount /var/log

# El desmontaje del rootfs de un kernel en ejecución no se supone
# que sea posible, así que lo re-montamos como sólo lectura y así el kernel
# puede seguir usándolo aunque ya no se pueda escribir en él.
# La sincronización del sistema de ficheros va implícita.
mount / -o remount,ro 2> /dev/null

# OJO!! Si desinstalas SYSTEMD, ya no hay /usr/sbin/reboot, poweroff, ni halt,
# ya que todos ellos son symlinks a /bin/systemctl, así que para que esto
# funcione tienes que hacer:
# ln -s /usr/bin/busybox /usr/bin/reboot
# ln -s /usr/bin/busybox /usr/bin/halt
# ln -s /usr/bin/busybox /usr/bin/poweroff
# El poweroff de systemd va con dos -f ("-f -f") para que no intente contactar
# con el gestor de procesos, que no existe.
# El poweroff de busybox no tiene ese problema.
#halt -f
#reboot -f
poweroff -f
