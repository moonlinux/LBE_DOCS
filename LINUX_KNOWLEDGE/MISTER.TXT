PREPARAR LA TARJETA SD
======================

No hace falta ningún programa de Windows. Simplemente hazle este layout con GPARTED.
(OJO!!! Crea las particiones como tipo EXT4, da igual, luego lo vas a cambiar con FDISK. GPARTED NO SOPORTA EXFAT.):

New layout is pretty simple:
Part1: Starts from 1MB till the end of SD card minus 1MB at the end. Type: exFAT (code 7)
Part2: Starts from last 1MB of SD card with size of 1MB. Type: Unknown (A2, no existe pero es lo que hay que poner) 
And now dd u-boot binary to Part2.

Usando FDISK, pon el tipo de partición 7 para la primera partición (exFAT) y el tipo A2 para la segunda. Te dirá que el tipo 2A es desconocido, da igual porque la vas a machacar con el u-boot.img. 
El u-boot.img viene de:
https://github.com/MiSTer-devel/SD-Installer-Win64_MiSTer

Formatea la partición 1 como exFAT con: mkfs.exfat /dev/sdb1
(mkfs.exfat está en el paquete exfat-utils)

Y ahora simplemente te bajas los ficheros que han de ir en la SD, que están en la guía:
https://github.com/MiSTer-devel/Main_MiSTer/wiki/Setup-Guide
Y los metes en la tarjeta. Tienes que tener tres cosas principalmente: el directorio linux, y los archivos MiSTer y menu.rfb; Con eso ya arranca desde la SD porque le has flasheado el uboot antes. 
A mayores, pues los cores que le quieras ir metiendo, cada uno tiene sus particularidades pero van el el raiz los rbf de cada core.

MEJORAR LA LATENCIA DE LOS USB
=============================

Crea el fichero
/media/fat/linux/u-boot.txt

Con el contenido
v=loglevel=4 usbhid.jspoll=1 xpad.cpoll=1

TECLADO EN CASTELLANO EN LA CONSOLA DE LINUX
============================================

Añade al final de /etc/profile:
loadkeys es

ROM JIFFYDOS PARA EL C64
========================

from a unix shell I did:

cat 901226-01.bin JiffyDOS_C64.bin JiffyDOS_C1541.bin > boot.rom

Where 901226-01.bin is the C64 BASIC ROM.

Then placed boot.com in my C64 directory on the micro SD card. The C64 core is called "C64".

CARGAR RÁPIDO CON JIFFYDOS Y SIN JIFFYDOS
========================================

Con JiffyDos:
Para listar, F1 e intro.
PARA CARGAR Y EJECUTAR: F5, F1 e intro.

Sin JiffyDOS, 
cargamos con: LOAD"*",8
y luego RUN

CARGAR JUEGOS EN TRD EN EL CORE DE ZX SPECTRUM
==============================================

Lo primero, como debes saber el core tiene la ROM del Spectrum en /media/fat/spectrum.rom
Vale, pues usa el spectrum.rom que viene con el REAL COMMANDER.
Ahora, simplemente inicia el core, inserta el TRD, pulsa F11, y en el menú elige el IANNA.BAS o como se llame. Listo.

Para resetear, ALT+F11.

Hay juegos que son autoarrancables, como el Fire&Ice. Para estos podrías hacer lo mismo, o bien lanzarlos a mano: 
-entrar en el TR-DOS (esto sale en el menú cargador del Spectrum si estás en modo 128K/+2 o Pentagon)
-ahí dale a la K para LIST si quieres ver los archivos, verás que hay uno llamado BOOT
-ahora dale a la R para RUN, e intro, y el juego irá.
Para cargar el Sword of Ianna, tienes que poner: LOAD "S.IANNA+"
RECUERDA que para escribir LOAD es con la J.

PROGRAMA PARA CONVERTIR MODELINES DE XORG A video_mode DE LA MISTER
===================================================================

Simplemente es irle metiendo, en el órden en que salen en la página, los parámetros del modeline que quieras, y que puedes generar con el
generador de modelines de https://arachnoid.com/modelines/
NO copies los decimales del último parámetro del resultado (deberían ser ceros, de todos modos, pero no los copies).

#include <stdio.h>

int main () {
        float clock;
        int hdisp, hsyncstart, hsyncend, htotal, vdisp, vsyncstart, vsyncend, vtotal;

        printf ("CLOCK: ");
        scanf ("%f", &clock);
        printf ("HDISP: ");
        scanf ("%d", &hdisp);
        printf ("HSYNCSTART: ");
        scanf ("%d", &hsyncstart);
        printf ("HSYNCEND: ");
        scanf ("%d", &hsyncend);
        printf ("HTOTAL: ");
        scanf ("%d", &htotal);
        printf ("VDISP: ");
        scanf ("%d", &vdisp);
        printf ("VSYNCSTART: ");
        scanf ("%d", &vsyncstart);
        printf ("VSYNCEND: ");
        scanf ("%d", &vsyncend);
        printf ("VTOTAL: ");
        scanf ("%d", &vtotal);
    
        printf ("video_mode=%d,%d,%d,%d,%d,%d,%d,%d,%f\n", hdisp, hsyncstart - hdisp, hsyncend - hsyncstart, htotal - hsyncend,
                                                        vdisp, vsyncstart - vdisp, vsyncend - vsyncstart, vtotal - vsyncend,
                                                        clock * 1000);

*********APUNTES CORE PCXT***************************************************************

En PCXT BIOS va "pcxt_original.rom", en TANDY BIOS va "tandy.rom", y en EC00 BIOS va "ide_xtl.rom" 

NOTAS SOBRE LAS IMÁGENES DE DISCO PARA EL CORE PCXT
===================================================

Para arrancar en modo TANDY y con disco duro IDE real, necesitamos una BIOS TANDY limpia (=sin XTIDE incluido, es decir, una BIOS TANDY 1000
que te bajes de aquí: http://retrograde.inf.ua/tandyroms.htm) y cargar la BIOS de XTIDE en la opción "BIOS/EC00 BIOS:" del core.
Lo mismo para arrancar con un PCXT original: BIOS de XT limpia (si no lo está tenemos que editarla con HEXEDIT y machacar el primer byte,
que es una letra "U", para que no cargue la XTIDE interna que lleva esa BIOS) y cargar la BIOS de XTIDE en la opción "BIOS/EC00 BIOS:" del core.

Para crear la imágen simplemente desde el propio GNU/Linux de la Mister haz:
dd if=/dev/zero of=hdd.vhd bs=128M count=1

Ahora tenemos que particionarla y formatearla desde la MiSTER, para lo cual tenempos que arrancar desde una imágen de disco de MSDOS.
Yo estoy usando estas de MSDOS 5.0: https://archive.org/details/dos-5.0-bootdisk
RECUERDA que para que lea imágenes de 1.44MB, necesitamos usar la BIOS micro8088, que podemos descargar aquí:
https://github.com/spark2k06/PCXT_MiSTer/tree/main/SW/ROMs
PERO esa viene con el XTIDE integrado, así que tenemos que editarla con HEXEDIT y machacar el primer byte (una letra "U")
para que no cargue la XTIDE interna que lleva esa BIOS.

Una vez que hemos arrancado desde el diskette de MSDOS y el core nos ha reconocido el disco, podemos particionarlo con fdisk y formatearlo
con format.

Para transferir directorios entre discos, montar los discos desde Linux así:
sudo mount -t vfat -o loop,offset=32256 hdd.vhd mnt
(TODOS los discos duros de MSDOS se montan igual)

Para que el primer DIR no tarde taaaaaanto, puedes descargarte el FREESPT.COM de aquí:
https://github.com/ChartreuseK/FREESP/releases
Y meterlo en el AUTOEXEC.BAT como:
LH FREESPT.COM C

Para activar/desactivar los colores COMPOSITE dinámicamente (ya que los juegos en modo PCXT se ven genial con colores composite
pero los colores composite hacen que la consola de texto de DOS se vea FATA) usa el XTCTL.EXE, que está aquí para descargar:
https://github.com/MiSTer-devel/PCXT_MiSTer/tree/main/hdd

Tienes todos los juegos de entre 1981 y 1988 aquí: https://archive.org/details/tdl-hdd
Monta la "tl hdd.img" porque ahí vienen los juegos hasta 1988, aunque están comprimidos en ZIP.
En la otra están descomprimidos pero sólo vienen hasta 1987.
La imágen procede de este hilo: https://misterfpga.org/viewtopic.php?t=5368

IMAǴEN DE DISCO MAESTRA PARA ATARIST
=====================================

Viene de este hilo de Retrowiki:
http://retrowiki.es/viewtopic.php?f=108&t=200035098&start=48

Configuración del sistema que hay que usar con ella: ATARI MegaSTE 4Mb. TOS 2.06

CREAR IMÁGENES DE DISCO DURO DE ATARIST Y LUEGO MONTARLAS EN LINUX
==================================================================

PREVIO: El sistema y driver de discos original de Atari para los AtariST se llamaba AHDI. Tiene limitaciones del copón como que sólo puede arrancar desde particiones de tipo GEM de tamaño menor o igual a 16MB,
luego tampoco se pueden hacer particiones GEM de más de 32MB, etc.. es una mierda.
TOTAL, que nosotros usamos HDDRIVER de: https://www.hddriver.net/en/
ES DE PAGO, el fichero se llama hddr1016.zip

Empezamos creando un fichero para contener la imágen de 200MB:
dd if=/dev/zero of=hdd200m.vhd count=200 bs=1M

Ahora creamos un DSK con el HATARI, lo montamos (se monta sin parámetros), y metemos en él los contenidos de hddr1016.zip
Reiniciamos el HATARI con el DSK del driver, y con la imágen de disco que acabamos de crear.
Entramos en el diskette A: desde GEM, y ejecutamos HDDRUTIL.APP
Una vez que haya cargado, seleccionamos el DEVICE (ventana del medio), y luego nos vamos a las opciones de arriba a MEDIUM->FORMAT. Formateamos. Luego nos vamos a MEDIUM->PARTITION.
Particionamos, creando una sola partición que ocupe todo el disco. No hace falta que especifiques un tipo de partición, ni que cambies ninguna otra opción.
Luego nos pide que reiniciemos. Reiniciamos y volvemos a cargar HDDRUTIL.APP.
En la ventana de arriba de las tres, seleccionamos el disco C:, y nos vamos a las opciones de arriba a FILE->INSTALL HDD DRIVER. Lo instalamos.
Ahora nos vamos otra vez a las opciones de arriba con el disco C: seleccionado, a SETTINGS->DEVICES AND PARTITIONS, y desmarcamos todo menos el 0.0, así no nos buscará todo lo demás en el arranque.
Ahora volvemos a FILE->INSTALL HDD DRIVER, y lo volvemos a instalar, ya con los settings que acabamos de configurar. Reiniciamos y listo.

Y ahora ya salimos de HATARI y ya podemos montar la imágen de disco así, paśandole el offset ya que como de costumbre estas imágenes tienen cosas antes de las particiónes:
sudo mount -t vfat -o loop,offset=1024 hdd200m.vhd hdd

Ahí ya metemos lo que queramos.
Tienes juegos instalados en disco a saco aquí:
https://atari.8bitchip.info/fromhd2.php#DL
Cuando un juego no vaya bien, búscalo aquí:
http://d-bug.mooo.com/klaz/

-Para descomprimir archivos .ARC en Linux, usa nomarch, que se puede instalar con apt-get.
-Para que un ejecutable se autoejecute en el inicio, simplemente mételo en AUTOBOOT. Tiene que tener extensión .PRG, los .TOS sólo hay que renombrarlos y ya.

-Si tienes que reinstalar el AMBERSTAR, sólo se instala desde una TOS 1.x. Desde una 2.x, al pedirnos el disco B no lo reconoce y no permite seguir la instalación.

IP ESTÁTICA EN LA MISTER (AL FIN!!!!)
=====================================

Créate un script en /Scripts, yo lo he llamado static_ip.sh, con este contenido y permisos de ejecución:

ifconfig eth0 up
ip addr add 192.168.1.39/24 dev eth0
ip route add default via 192.168.1.7
echo "nameserver 8.8.8.8" > /etc/resolv.conf

...Donde 192.168.1.7 es la IP del ordenador desde el que sales.
Tienes que tener una conexión cableada con IP estática en esa IP en el ordenador,
y tener el ordenador preparado para compartir la conexión WIFI, como haces para la Raspberry Pi (Ver en LINUX_KNOWLEDGE.TXT)
Tienes que ejecutar el comando para tener la IP estática.

CONECTAR POR WIFI USANDO UN PINCHO USB WIFI SOPORTADO POR EL KERNEL
===================================================================

¡¡CUIDADO!! Como el pincho que yo tengo no está soportado en el kernel, si se actualiza el kernel el pincho deja de funcionar
porque se nos borran el firmware blob y el módulo del kernel, y toda reinstalarlos siguiendo las instrucciones que voy a dar ahora.

LO PRIMERO, mi pincho WIFI está basado en el chipset RTL8188eu, que no viene soportado en el kernel.
Así que hay que proporcionar el módulo del kernel.

PUEDE QUE TENGAMOS QUE COMPILAR EL MÓDULO DEL KERNEL O PUEDE QUE NO.

CASO 1: NO HACE FALTA COMPILARLO
NORMALMENTE, SI NO CAMBIA LA VERSIÓN DEL KERNEL, TIENES EL MÓDULO YA PREPARADO Y SÓLO ES HACER:
cp rtl8188eu.ko /lib/modules/5.13-MiSTer/

CASO 2: NOS TOCA COMPILARLO PORQUE HA CAMBIADO LA VERSIÓN DEL KERNEL
Se hace así:
-Instalamos dependencias previas: apt-get install gcc-arm-linux-gnueabihf build-essential
-Clona el directorio del driver wifi: git clone --depth 1 https://github.com/ulli-kroll/rtl8188eu.git
-Clona el directorio de los sources del kernel de la MiSTer: git clone --depth 1 https://github.com/MiSTer-devel/Linux-Kernel_MiSTer.git
-De ambos directorios, borra su .git
-Entra en el directorio de los sources del kernel y haz:
make ARCH=arm mrproper && make ARCH=arm MiSTer_defconfig && make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- EXTRAVERSION=-MiSTer modules_prepare
-Ahora entra en el directorio de los sources del módulo wifi y haz:
make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- clean && make ARCH=arm CROSS_COMPILE=arm-linux-gnueabihf- KSRC=/home/manuel/src/mister/Linux-Kernel_MiSTer modules

FIN CASOS POSIBLES, LO QUE VIENE AHORA YA ES SIEMPRE IGUAL.

Ahora lo subimos a la MiSTer y lo copiamos a su sitio:

cp rtl8188eu.ko /lib/modules/5.13-MiSTer/

Y ejecutamos esto:

depmod -a
modprobe rtl8188eu

En este punto, podemos hacer iwconfig para ver que efectivamente el interface wifi nos aparece levantado.

Ahora vamos a configurar la conexión WIFI en sí.

Edita /media/fat/linux/wpa_supplicant.conf y pon ahí tu config wifi en el formato correcto, que es:
ctrl_interface=/run/wpa_supplicant
update_config=1
country=ES

network={
        ssid="tu_ssid_aqui"
        psk="tu_clave_aqui"
}

Ahora es cosa de reiniciar, ejecutar wifi.sh y listo.

***********Montar el VHD de MSDOS (AO486) para la MiSTer********************************************************************************

mount -o loop,offset=32256 msdos622.vhd /mnt

***********MONTAR LA IMÁGEN DE DISCO DEL CORE ZXNEXT PARA AÑADIRLE O QUITARLE COSAS*****************************************************

sudo mount -o loop,rw,offset=65536 boot.vhd /mnt

***********Montar un VHD de MSX para la MiSTer******************************************************************************************

---Averiguamos dónde empieza con parted. Necesitamos saberlo en BYTES para poder pasárselo a mount, NO en sectores como nos lo dice FDISK. Por eso usamos parted:

sudo parted msx.vhd
(parted) unit                                                             
Unit?  [compact]? B                                                       
(parted) p                                                                

Number  Start   	End         	      Size                     Type        File system  Flags
 1      	   65536B    131137535B  131072000B  primary  fat16

---Nos quedamos con el 65536. Y montamos así:

sudo mount -t vfat -o loop,offset=65536 msx.vhd /mnt/hdd

*********ACTUALIZAR LA MISTER********************************************************

Usa el script update_all de aquí:
https://github.com/theypsilon/Update_All_MiSTer
Es bajarse un ZIP, descomprimirlo en Scripts/Updates, y luego ejecutarlo. Entra en el menú la primera vez que lo ejecutes
pulsando UP. Allí cambia en la primera opción que los cores que te baje sean los de DB9.

*********NOTAS CORE PC98**************************************************************

Necesitas la BIOS, que puede estar en dos sitios distintos:
En /Games/Zet98/ con el nombre boot.rom
En /bootrom/ con el nombre Zet98.rom
Pero es el mismo fichero. Lo tienes en este hilo:
https://misterfpga.org/viewtopic.php?f=36&t=167&start=75

Pon GDC CLOCK a 2.5, viene puesto a 5 y eso jode algunos juegos.

Los juegos deben estar en .D88, y los puedes convertir desde cualquier otro formato con el Virtual Floppy Image Converter 011010,
que se baja de aquí:
https://www.vector.co.jp/download/file/win95/util/fh212773.html

Tienes muchos juegos ya traducidos y de todo en:
http://www.pc98.org/main.html
...Pero están en .HDI y se necesita que estén en HDF. Así que no te valen por ahora.

********CONFIGURAR EL TECLADO EN EL CORE DE AMIGA PARA USAR UN TECLADO DE PC EN ESPAÑOL**********

Nos bajamos este archivo:
http://aminet.net/util/wb/Win95e_V2.lha 
... Y lo mandamos a fat/games/amiga/shared

Ahora cargamos el ADF llamado INSTALLRTG.ADF, y dentro de él ejecutas INSTALLSHARE, que montará el directorio fat/games/amiga/shared, haciéndolo accesible desde Amiga.

Una vez hecho esto, nos vamos al CLI (GoShell en AG+) y hacemos:

mister:
lha x win95e_v2.lha
copy win95e devs:keymaps

Y ahora nos vamos a Preferences/Input, y seleccionamos el mapa win95e. ¡Y ya está!

********INSTALAR LAS KICKSTART PARA WHDLOAD*********************************************

Tienes las ROMs ya preparadas en shared/Kickstarts

Cargas el ADF llamado INSTALLRTG.ADF, y dentro de él ejecutas INSTALLSHARE, que montará el directorio fat/games/amiga/shared, haciéndolo accesible desde Amiga.

Una vez hecho esto, nos vamos al CLI (GoShell en AG+) y hacemos:

makedir devs:kickstarts
mister:
cd kickstarts
copy ALL to devs:kickstarts

********ACTUALIZAR LA DISTRO AMIGA AGS+**************************************************

-Pones el LHA de la actualización en fat/games/amiga/shared
-Ahora arrancas el AGS+, cargas el ADF llamado INSTALLRTG.ADF, y dentro de él ejecutas INSTALLSHARE, que montará el directorio fat/games/amiga/shared, haciéndolo accesible desde Amiga.
RECUERDA que tienes que marcar lo de VENTANA->MOSTRAR->TODOS LOS FICHEROS para poder ver los archivos de la carpeta SHARED.
-Abres el LHA de actualización con el mARK (en la barra de arriba), lo descomprimes a RAM:, y dentro hay un script de actualización.
Se ejecuta y ya.

*********APUNTES CORE DE PSX*************************************************************

-Para que cada juego tenga su memory card en forma de .SAV en /media/fat/saves/PSX, mete cada juego en una carpeta que se llame
exactamente igual que el .CHD del juego (sin la extensión .CHD, claro).
En el menú debes tener activas las opciones "Automount Memory Card 1" y "Autosave".
(O si no tienes Autosave, tendrías que darle manualmente a "Save Memory Cards" cada vez que quieras volcalas a la microSD).
NO necesitas ningún fichero .MCD ni nada por el estilo.

=================================
= APUNTES CORE AMIGA (MINIMIG)  =
=================================

CREAR IMÁGEN CON SISTEMA DE ARCHIVOS PFS3
=========================================

-Instalamos pip3 que es el gestor de paquetes de python:
sudo apt-get install python3-pip

-Instalamos las amitools:
sudo pip3 install amitools

-Nos bajamos el filesystem PFS3 libre, llamado PFS3aio, de aquí:
http://aminet.net/package/disk/misc/pfs3aio

-Creamos la imágen del disco RBD, la inicializamos reservando 4 cilindros de espacio RBD para el driver de filesystem PSF3,
le instalamos el driver de filesystem PFS3, etc:

rdbtool -f -p DH test.hdf create size=512Mi + init rdb_cyls=4 + fsadd pfs3aio dostype=PFS3 + add size=98% name=DH0 fs=PFS3 bootable=true automount=true pri=1 Bla max_transfer=0x0001fe00 mask=0x7ffffffe num_buffer=30

-Formateamos la partición desde AmigaOS, pinchando en el icono y dándole a icon->format. Al final nos saldrá una confirmación de que estamos
 usando PFS3AIO.

    ---HERRAMIENTAS ADICIONALES--

PARA VER LA INFO DE LAS PARTICIONES DE LA IMÁGEN (el dostype, el maxtransfer, si es bootable o no...) LO HACEMOS ASÍ:
rdbtool test.hdf info

SI QUEREMOS MODIFICAR PARÁMETROS DE UNA PARTICIÓN YA CREADA (hacerla bootable, su dostype, su maxtransfer, etc...) LO HACEMOS ASÍ:
rdbtool test.hdf change 0 dostype=0x444F5301 max_transfer=0x1fe00 bootable=true
(En el ejemplo se modifica la partición número 0, para ver el número de las particiones usa "rdbtool test.hdf info").

CREAR IMÁGEN DE DISCO CON SISTEMA FFS PARA WB 1.3
=================================================

Creamos la imágen de disco del tamaño que queramos en la propia MiSTer, con el comando:

dd if=/dev/zero of=Amiga\ 1.3\ HDD.hdf bs=128M count=1

Para particionar y formatear el disco, tienes dos opciones:

-Para sistemas 1.3, arrancamos el disco "A590 HD Setup Disk" y  

-Para sistemas 2.x/3.x, arrancamos con un ADF del Workbench (disco "INSTALL" de un set completo de discos del WB)

En ambos casos, en HDToolBox vamos a "Change Drive Type" y pinchamos en "Read Configuration From Drive" y nos lo detectará
correctamente como un disco del tamaño que lo hayamos creado.
Aplicamos los cambios, le damos a "Partition Drive" para dejar sólo una partición, REINICIAMOS
(EL SISTEMA NO VERÁ EL DISCO HASTA QUE REINICIEMOS!!!) y formateamos.
Luego puedes instalar el Workbench en el disco:

-Para instalar WB1.3, tienes que arrancar desde el disco "A590 HD Setup Disk"
y usar la utilidad de formateo que trae, que también te instalará el sistema.  

-Para instalar WB 2.x o 3.x, usamos el HDInstall que trae el primer disco de WB.

Para montar el HDF, NUNCA LO MONTES DESDE LINUX (AUNQUE SEA POSIBLE HACERLO)

-En cualquier sitema, usa el FS-UAE para montar el HDF y un directorio compartido de Linux, que funciona desde cualquier versión de Kickstart.
Para instalar FS-UAE y FS-UAE-LAUNCHER, que es con lo que se hace todo: https://fs-uae.net/download#ubuntu
A parte, en sistemas 3.x podrías InstallRTG.adf (que procede de las utilidades de Amiga para la MiSTer) que trae dentro InstallShared,
que monta el directorio /media/fat/games como "Mister:" en AmigaOS.

Si necesitas el LHA
-Para ROM 1.3 necesitas esta versión: http://aminet.net/package/util/arc/LhA_e138
-Para ROMs 2.x y 3.x necesitas este: https://aminet.net/package/util/arc/lha

Para hacer un archivo ejecutable hazle: protect <archivo> +e
Y si es un script ejecutable: protect <archivo> +se 

Para ejecutar juegos instalados en disco en ROM 1.3, como WHDLoad no funciona porque requiere 2.x, puedes usar JST para
cargar slaves de WHDLOAD: https://jotd.pagesperso-orange.fr/amiga.html

Tienes siempre las últimas versiones de los installs ya preparados de WHDLoad en:
http://ftp.grandis.nu/turran/FTP/Retroplay%20WHDLoad%20Packs/Commodore_Amiga_-_WHDLoad_-_Games
Y tienes todos los juegos en ADF desprotegidos aquí (porque algunos juegos se instalan desde ADF):
http://ftp.grandis.nu/turran/FTP/TOSEC/Games/Commodore Amiga - Games - [ADF]/

Si usas WHDLoad, no te olvides de crear s:whdload.prefs con el contenido:
PRELOAD
SplashDelay=0
ConfigDelay=0

Para dar permisos de ejecución a un archivo es con: PROTECT nombre_archivo e
Si no puedes borrar un archivo porque está protegido: PROTECT nombre_archivo d
Puedes ver los permisos de los archivos con el comando LIST, y a partir de ahí las modificas como quieras.
Por ejemplo, para que tenga permiso de lectura, escritura, ejecución y borrado sería:
PROTECT nombre_archivo rwed

Para pasar de NTSC a PAL y viceversa, puedes usar NTSC-PAL de Nico Francois, que son dos ejecutables que vienen en
el FISH DISK 0387, que tienes aquí: http://aminet.net/package/misc/fish/fish-0387
Recuerda que necesitas un ECS al menos para que funcione.
JST permite también ejecutar en PAL/NTSC los juegos, con el tooltype PAL o NTSC (o sea, pasándole el parámetro PAL o NTSC a JST).

¿PAL o NTSC? El sistema, arráncalo en NTSC siempre (o sea, configura el chipset como NTSC).
Y luego, los juegos que tengan una banda gruesa abajo ponlos en NTSC y los que estando en PAL ocupen la pantalla completa,
ejecútalos en PAL.

CONSEJOS GENERALES PARA INSTALAR JUEGOS EN DISCO DURO EVITANDO USAR INSTALACIONES WHDLOAD:
-Mira en HOL (https://hol.abime.net) si el juego tiene instalador, o si hay notas sobre su instalación a mano.
 Si tiene instalador nativo o se puede instalar a mano, mira a ver si el juego tiene versiones crackeadas
 en http://ftp.grandis.nu/turran/FTP/TOSEC/Games/Commodore Amiga - Games - [ADF]
 y lo debes instalar de una versión crackeada de esas.
 (RECUERDA que puedes buscar el ejecutable del juego usando el comando FILE de GNU/Linux para ver qué archivos son ejecutables de AmigaOS).
 PARA SABER QUÉ ETIQUETA TIENE UN DISKETTE (POR SI TIENES QUE HACER ASSIGNS) SIMPLEMENTE EJECUTA EL COMANDO "ASSIGN" SIN PARÁMETROS
 PARA VER LOS ASSIGNS QUE HAY HECHOS AL TENER EL DISKETTE(ADF) METIDO.
-Si no, busca un instalador nativo casro en http://ftp.grandis.nu/turran/FTP/Retroplay%20WHDLoad%20Packs/Commodore_Amiga_-_HD_Loaders_-_Games/ 
-Si no, ya te toca tirar de JST para cargar los slaves de WHDLOAD.

PARA QUE VAYAN LOS JUEGOS DE WHDLOAD EN VERSIÓN NTSC:
Ve a Storage:Monitors y arrastra el monitor NTSC a Devs:Monitors, y pon el chipset ECS (el OCS-A500 no cambia
entre PAL y NTSC al vuelo).

PARA QUE SE VEAN LOS ICONOS DE WHLOAD:

OPCIÓN 1: INSTALAR NEWICONS
Nos lo bajamos de https://aminet.net/package/util/wb/NewIcons46, extraemos, copiamos C/Newicons a C:,
copiamos Libs:NewIcons.library a Libs:, y añadimos al final de S:Startup-Sequence:
Run <>NIL: C:NewIcons
Wait 1
....Y aquí ya cargaríamos WB, o TinyLauncher o lo que sea.

OPCIÓN 2: INSTALAR ICONLIB
Bájate esto:  https://aminet.net/package/util/libs/IconLib_46.4
De ahí, copia Libs/68000/icon.library a Libs:, y copia ThirdParty/RemLib a C:
Ahora edita S:Startup-Sequence, y al principio del todo, añade:

RemLib >NIL: icon.library

...Eso descargará la icon.library de la ROM y hará que se cargue Libs:icon.library.
Reinicia y ya debería verse los iconos de los juegos de WHDLoad sin problema.

UN STARTUP-SEQUENCE MÍNIMO PARA TINYLAUNCHER (ideal para sistemas con poca memoria)

SetPatch >NIL:
Stack 8192
Makedir RAM:ENV
Assign ENV: RAM:ENV
Run <>NIL: C:NewIcons
Wait 1
SYS:Programs/TL/TinyLauncher.exe
reboot

*********HACER QUE EL UPDATE_ALL NO ACTUALIZE LOS CHEATS*********************************

Editamos /media/fat/downloader.ini y añadimos:

[mister]
filter = !cheats

Hay otros filtros. La lista está aquí: 
https://github.com/MiSTer-devel/Distribution_MiSTer#list-of-tags-that-you-may-use-with-the-downloader-and-the-custom-download-filters-feature


COMO LO VENIMOS HACIENDO AHORA MISMO:

[mister]
filter = !cheats !acornatom !acornelectron !adam !adventurevision !alicemc10 !altair8800 !amstrad-pcw !apogee !apple-i !aquarius !arduboy !ay-3-8500 !bk0011m !c16 !channelf !arcadia !archie !astrocade !c16 !casio_pv-1000 !casio_pv-2000 !chess !chip8 !coco2 !coco3 !coleco !colecoadam !colecovision !creativision !edsac !eg2000 !epochgalaxyii !flappybird !galaksija !gamate !gamenwatch !gnw !gameoflife !handheld2p !intellivision !interact !jupiter !laser !laser310 !lynx48 !megaduck !msx !multicomp !odyssey2 !ondra_spo186 !orao !oric !other-cores !pc88 !pc8801 !pdp1 !pet2001 !pmd85 !pokemonmini !ql !rx78 !samcoupe !sgb !sharpmz !slugcross !sordm5 !specialist !supervision !svi328 !tatungeinstein !ti994a !tomyscramble !tomytutor !trs-80 !tsconf !uk101 !vc4000 !vector-06c !vectrex !vic20 !x68000 !zx48 !zx81 !zxnext
