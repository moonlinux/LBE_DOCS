PARA FLASHEAR UN SO A LA EMMC
=============================

INTRODUCCIÓN: Los modelos de CM4 que tienen EMMC no pueden arrancar a la vez desde EMMC y desde SD, así que no podemos simplemente flashearles
un sistema a la SD y esperar que arranque, se lo tenemos que flashear a la EMMC interna.
Para ello usamos usbboot, que arranca la CM4 de tal modo que nos permite flashearle un sistema a la EMMC.

Unas dependencias previas:
sudo apt-get install libusb-1.0-0-dev

Compilamos e instalamos:
https://github.com/raspberrypi/usbboot

Conectamos la GPI CASE 2 por el puerto microUSB al ordenador (el puerto de arriba, el que queda detrás de la tapa, NO el de abajo que es USB-C)
y ejecutamos:
sudo rpiboot

Si todo va bien, en /dev ya tendremos la emmc como /dev/sdb.

Si es así, ya podemos flashear a /dev/sdb con algo como:
sudo dd if=Lakka-RPi4-GPICase.img of=/dev/sdb bs=4M status=progress

Una vez que se haya flasheado, ya podemos acceder a las particiones boot y root del SO.

LAKKA EN LA GPI CASE 2
======================

-Bajamos la última versión estable de LAKKA para Raspberry Pi 4 (aarch64) de:
http://www.lakka.tv/get/linux/rpi/

La flasheamos en la CM4.
(Para ello, ya sabes que debes ejecutar "rpiboot" y encender la consola, y una vez hecho esto ya puedes flashearla con dd).

-Clonamos el repo:
git clone --depth 1 https://github.com/333mhz/GPiCase2-Script.git

-Copiamos el archivo "GPi_Case2_patch_lakka3.6/patch_files/config_lcd.txt" a "LAKKA/config.txt".
Arrancamos LAKKA, que aunque tarde un poco ya se verá por la pantalla interna de la consola.

-En Settings->Audio->Output->Device ponemos "default:Device".
¡OJO con las minúsculas y mayúsculas!

(Puedes comprobar el audio interno de la consola conectándote por SSH y haciendo:
aplay -L
speaker-test -Ddefault:Device)

-Para hacer cambios en config.txt o cmdline.txt, hacemos:
mount -o remount,rw /flash
Y ya podemos guardar los cambios.

-En cmdline.txt tenemos que pasar al kernel esto:
video="DPI-1:640x480@60"

-En config.txt, tenemos que tener esto para configurar la pantalla con los specs del fabricante:
dtoverlay=vc4-kms-v3d,cma-size=402653184
dtoverlay=vc4-kms-dpi-generic,clock-frequency=24000000
dtparam=hactive=640,hfp=41,hsync=40,hbp=41
dtparam=vactive=480,vfp=18,vsync=9,vbp=18
dtparam=rgb666-padhi

-Para que la pantalla aparezca centrada, debes sustituir "/flash/overlays/vc4-kms-dpi-generic.dtbo"
por una versión del último kernel Linux, aunque no coincidan las versiones del kernel.
Te vale la de la última versión de Raspberry Pi OS o de tu sistema custom.
Si no actualizas "/flash/overlays/vc4-kms-dpi-generic.dtbo" siempre se va a ver desplazado a la derecha.

-PARA EL APAGADO SEGURO AL DARLE AL INTERRUPTOR:
	-Creamos el directorio /storage/scripts
	-Nos bajamos el script de apagado seguro y lo guardamos ahí:
	wget https://raw.githubusercontent.com/333mhz/GPiCase2-Script/main/lakka_SafeShutdown_gpi2.py -O /storage/scripts/shutdown.py
	-PARA QUE LAKKA lance al inicio el script "shutdown.py", lo metemos en "/storage/.config/autostart.sh":
	echo "python /storage/scripts/shutdown.py &" >> /storage/.config/autostart.sh
	(Posiblemente no tengas aún el fichero "/storage/.config/autostart.sh", esto lo creará y listo.
	-Editamos "/storage/scripts/shutdown.py" y de la parte de __main__ eliminamos toda referencia a "audiofix" y a "lcdrun",
	y las propias funciones "audiofix" y "lcdrun".
	Si quieres ahorrar tiempo, dejamos el contenido de "shutdown.py" tal que así:

#######################EMPIEZA EL CONTENIDO DE "SHUTDOWN.PY"########################
	
import RPi.GPIO as GPIO
import os
import time
from multiprocessing import Process

powerPin = 26
powerenPin = 27

#initialize GPIO settings
def init():
        GPIO.setmode(GPIO.BCM)
        GPIO.setup(powerPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(powerenPin, GPIO.OUT, initial=GPIO.HIGH)
        GPIO.output(powerenPin, GPIO.HIGH)
        GPIO.setwarnings(False)

#waits for user to hold button up to half a second before issuing poweroff command
def poweroff():
        while True:
                GPIO.wait_for_edge(powerPin, GPIO.FALLING)
                os.system("systemctl stop retroarch")
                os.system("systemctl poweroff")

if __name__ == "__main__":
        #initialize GPIO settings
        init()
        poweroff()
        GPIO.cleanup()

#######################FIN CONTENIDO DE "SHUTDOWN.PY"###############################

-Para que no se vean letras en la consola y desactivar las mitigations, añade a cmdline.txt:
mitigations=off vt.global_cursor_default=0 console=null

-Para desactivar el logo de LAKKA, que aparece deformado porque no está preparado para pantallas de 4:3, haz:
touch /flash/oemsplash.png
Si quieres un logo, tienes que usar una imágen de exactamente 1024x768. Esto es muy fácil, porque puedes bajar
una imágen del tamaño que quieras y en GIMP, usando IMAGE->CANVAS SIZE puedes dejarla del tamaño que quieras sin deformarla.

CONFIGURAR LINUX PARA QUE USE LA PANTALLA DPI DE LA CONSOLA
============================================================

Lo que sabemos proviene cicirifu, autor del Lakka para GPI CASE 2.
Búscale en Discord, en el server de GPI CASE.

-En config.txt, tenemos que tener esto para configurar la pantalla con los specs del fabricante:
dtoverlay=vc4-kms-v3d,cma-size=402653184
dtoverlay=vc4-kms-dpi-generic,clock-frequency=24000000
dtparam=hactive=640,hfp=41,hsync=40,hbp=41
dtparam=vactive=480,vfp=18,vsync=9,vbp=18
dtparam=rgb666-padhi

-En cmdline.txt tenemos que pasar al kernel esto:
video="DPI-1:640x480@60"

-Para el audio, tenemos que seleccionar el CARD/DEVICE por defecto para ALSA, y además, como sólo uno de los canales del estéreo
está conectado al altavoz, tenemos que conseguir sonido MONO mezclando ambos canales.
Para ambas cosas (seleccionar el dispositivo, mezclar el sonido en MONO) tenemos que hacer estas cosas.
Debemos tener esto en /etc/asound.conf:

defaults.pcm.!card Device
defaults.ctl.!card Device
defaults.pcm.!device 0
defaults.ctl.!device 0

...Y luego usar el plugin MONO en settings->audio->dsp_plugin.
Para ello, dentro de los sources de RetroArch, vamos al directorio "libretro-common/audio/dsp_filters" y compilamos los filtros así:
CFLAGS="-march=native -mtune=native -O2" make -j4
Ahora copiamos todos los filtros a "~/.config/retroarch/filters/audio/", así:
cp *.so *.dsp ~/.config/retroarch/filters/audio/
Ahora, en RetroArch vamos a "settings->audio->dsp plugin" y seleccionamos "Mono.dsp".
Y ya está. 

-Para no tener nada por pantalla, desactivar mitigations, poner el governor a ondemand, etc...
la línea del kernel en cmdline.txt queda así:

console=tty1 root=PARTUUID=048e5591-02 rootfstype=ext4 fsck.repair=yes rootwait video="DPI-1:640x480@60" quiet loglevel=0 logo.nologo vt.global_cursor_default=0 mitigations=off audit=0 mce=ignore_ce nosoftlockup consoleblank=0 cpufreq.default_governor=performance

(Se podría poner "arm_freq" a 1200 en config.txt para ahorrar batería, o poner cpufreq.default_governor=ondemand para ahorrar aún más batería,
pero entonces olvídate de mGBA y swanstation).

(También podrías añadir polling rápido de mandos USB con "usbhid.jspoll=1 xpad.cpoll=1", pero NO LO HAGAS PORQUE PRODUCE HICCUPS DE AUDIO Y VÍDEO
y los beneficios reales no están claros).

-Para que el mando se autoconfigure (si es un mando conocido o compatible con uno conocido: la mayoría de ellos los reconoce como XBOX360 PAD)
tienes que clonar:
git clone --depth 1 https://github.com/libretro/retroarch-joypad-autoconfig.git
Y meter el directorio "udev" en ~/.config/retroarch/autoconfig/
Esto es imprescindible en consolas sin teclado, porque si no, no tienes manera de configurar el mando al arrancar el RetroArch al principio.

-Para establecer el directorio de inicio del navegador de RetroArch, uses el GUI que uses, debes editar retroarch.cfg
y establecer el path con "rgui_browser_directory", como por ejemplo:
rgui_browser_directory = "~/roms"

-Para que RetroArch te ofrezca con qué emulador quieres correr una ROM, tienes que clonar este repo:
git clone --depth 1 https://github.com/libretro/libretro-super.git
Y mandar el contenido del directorio libretro-super/dist/info a ~/.config/retroarch/cores. Sí, junto con los cores. Así:
cp -R libretro-super/dist/info/* ~/.config/retroarch/cores/
Ahora en RetroArch, en Settings->Core, desactiva "Cache core info files".
Y elimina ".config/retroarch/cores/core_info.cache".
(Si no haces estas últimas dos cosas, no funcionará, y no sabrás por qué).

-La GPI CASE 2 sólo tiene conectado al altavoz UNO de los canales de audio, a pesar de que el sistema de audio es estéreo.
Así que necesitamos mezclar los dos canales a uno solo, o en sistemas estéreo perdemos la mitad de los sonidos.

-La configuración de audio más óptima es, con el driver ALSA siempre:
	-Si tienes doble buffer de vídeo, un delay de audio de 64ms.
	-Si tienes triple buffer de vídeo, puedes bajar el delay de audio a 32ms.
El driver ALSATHREAD con doble buffer suena mal siempre, pasa de él.

CONFIGURAR LA DISTRO EXPERIMENTAL DEL LAKKA DEL CANAL "RETROFLAG GPI CASE USERS" DE DISCORD
===========================================================================================

Para el sonido:
-Editamos el UNIT de PULSEAUDIO para deshabilitarlo. Para ello, hacemos "systemctl edit --full pulseaudio" y eliminamos la línea de ExecStart,
dejándolo así inútil (deshabilitar el servicio no vale porque no sobreviviría a un reinicio, parece ser).
-Ahora elegimos como driver de audio el ALSA, y como dispositivo de audio, escribimos manualmente "plughw:2,0"
-Nos conectamos por SSH, y editamos /storage/.config/retroarch/retroarch.cfg para poner el max_swapchain a 2. 
-Para quitar el ruido del wifi en el altavoz, edita /flash/config.txt y le añades: dtoverlay=disable-wifi
 (Para editar config.txt tienes que re-montar la partición flash como lectura/escritura, con: mount -o remount,rw /dev/mmcblk0p1)
