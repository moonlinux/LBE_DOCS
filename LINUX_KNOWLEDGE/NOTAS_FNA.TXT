PROGRAMAS Y JUEGOS XNA EN LINUX, CON FNA
========================================

XNA es una plataforma para desarrollar programas en C# de Micro$oft.
Quedó abandonada, y el proyecto FNA nos permite ejecutar programas XNA en sistemas actuales.
Las versiones de juegos que podemos ejecutar son las que tienen soporte FNA (no las viejas XNA) así que siempre tienen que traer un FNA.dll
incluido con el juego.

Los juegos son independientes de la plataforma, PERO el mono-runtime y las librerías nativas (SDL2, libmojoshaders, etc)
sí que dependen de la plataforma.

NO HAY QUE INSTALAR NADA DEL PROYECTO FNA, SIMPLEMENTE LOS JUEGOS VAN CON MONO SI LES DAS LAS LIBRERÍAS NECESARIAS.
SE EJECUTAN SIMPLEMENTE CON: mono <juego.exe>

Instalamos mono-runtime y el compilador de mono (FNA está escrito en C#):
sudo apt-get install mono-runtime mono-mcs --no-install-recommends
(EN SU LUGAR, se podría usar monokickstart, que es un monoruntime auto-contenido y que lo renombras como el juego
y te lanza el juego que sea:
https://github.com/flibitijibibo/MonoKickstart,
PERO VAMOS, NO TE COMPLIQUES).

AHORA VAMOS "RECOLECTANDO" LAS LIBRERÍAS QUE USAN LOS JUEGOS, QUE LAS NECESITAS PARA AARCH64

1--LIBFNA Y SUS SUB-LIBRERÍAS (UNA SUB-LIBRERÍA DE FNA, LLAMADA FNA3D, INCLUYE LIBMOJOSHADER ESTÁTICAMENTE LINKADA.
LIBMOJOSHADER NO VENÍA INCLUIDO NO VENÍA INCLUÍDO, Y POR ESO LO TRAEN ALGUNOS JUEGOS COMO UN .SO A PARTE,
QUE YA NO ES NECESARIO PORQUE AHORA FORMA PARTE DE FNA3D, QUE ES PARTE DE FNA COMO VAMOS A VER
Así que NUNCA te pongas a compilar libmojoshader...).

LO PRIMERO es conseguir nuestro propio y actualizado FNA.dll + FNA.dll.config.
ESTA ES LA LIBRERÍA "CENTRAL", independiente del sistema, que hace que se llame a librerías .so dependientes del sistema,
así que al actualizar FNA.dll + FNA.dll.config conseguimos tener el control de qué .so se necesitan.

Los juegos suelen traer su propio FNA.dll, y de hecho el FNA.dll es el mismo en todas las arquitecturas,
pero nos conviene compilar TODO EL ECOSISTEMA FNA, ya que algunas sub-librerías de FNA pueden necesitar cambios.
(Por ejemplo, BASTION sólo funciona tras parchear FNA3D, como veremos, que es una sub-librería de FNA).

Bajamos el último ZIP de los sources estables de aquí:
https://github.com/FNA-XNA/FNA/releases
(OJO, debe ser el ZIP, si no le faltarán las dependencias internas y como no es un repo git no podemos hacer
el típico "git submodule update --init --recursive").

Descomprimimos tranquilamente (NO nos deja nada tirado, tranquilo!)
unzip FNA-<versión>.zip

Compilamos con:
make release -j4

Nos deja el FNA.dll y FNA.dll.config en bin/Release/
Los copiamos al directorio del juego, sobreescribiendo los que trae.

Ahora tenemos que entrar en cada uno de los directorios de las sub-librerías de FNA,
que están en FNA/libs, e ir compilándolas una a una, y copiándolas donde estaban las librerías incluidas con el juego
que queremos correr:
(FÍJATE que los .so van al directorio de las librerías dependientes del sistema, en este caso llamado "lib64",
pero que las .dll van al mismo directorio que el ejecutable del juego... Esto no sé si es así siempre, pero al menos
para el BASTION funciona así)

	-Entramos en lib/FAudio y hacemos:
		mkidir b4
		cd b4

		cmake .. -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_C_FLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer"

		make -j4

		cp libFAudio.so* ~/bastion/game/lib64/

	-Entramos en lib/FNA3D y hacemos:
		mkdir b4
		cd b4

		cmake .. -DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_C_FLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer"
		
		make -j4
		
		cp libFNA3D.so* ~/bastion/game/lib64/

	-Entramos en lib/SDL2-CS y hacemos:
		make release -j4
		cp bin/Release/SDL2-CS.dll* ~/bastion/game/

	-Entramos en lib/Theorafile y hacemos:
		CFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer" make -j4
		cp libtheorafile.so* ~/bastion/game/lib64/

2--INSTALAR PIPEWIRE

Necesitamos compilar SDL2 para que tenga soporte del backend PIPEWIRE, y especificar el driver PIPEWIRE cuando lancemos
un juego de SDL2.

(Esto es porque en la Raspberry Pi, usando el dispositivo de audio vc4-hdmi, NO funciona DMIX por el tema del formato extraño que soporta vc4-hdmi.
Eso es un problema para los juegos FNA, ya que abren varias veces el mismo dispositivo de audio, cosa imposible sin DMIX porque no
se pueden reproducir varios streams de audio a la vez.
Por ello, al no tener DMIX en ALSA, necesitamos un servidor de audio que mezcle los diferentes streams de audio de los juegos.
Ese servidor de audio es PIPEWIRE.)

Con instalar esto sería suficiente, en teoría, y luego reconfigurar y recompilar SDL2:
sudo apt-get install libpipewire-0.3-dev
...PERO EN DEBIAN 11 ESTO NO ES POSIBLE, PORQUE SÓLO TIENE HASTA PIPEWIRE 0.3.19 Y SDL2 NECESITA PIPEWIRE 0.3.20 MÍNIMO.
(O sea que cuando salga Debian 12, simplemente instalaremos libpipewire y recompilaremos SDL2, y ya podremos
borrar el siguiente bloque).
ADEMÁS, necesitamos un session manager que conecte los programas con el PIPEWIRE. Ese session manager es el WIREPLUMBER,
que lo vamos a instalar también. Veamos....

========================================================================================
==BLOQUE PARA COMPILAR E INSTALAR PIPEWIRE + WIREPLUMBER A MANO EN DEBIAN 11 BULLSEYE ==
========================================================================================

Lo primero es instalar los últimos MESON y NINJA, porque los que trae DEBIAN 11 BULLSEYE son viejos y las versiones
actuales de pipewire necesitan versiones actuales para compilar:
sudo apt-get purge ninja meson
sudo apt install python3-pip --no-install-recommends
python3 -m pip install ninja
python3 -m pip install meson
PATH="/usr/local/bin:$PATH"

VAMOS CON PIPEWIRE EN SÍ:

Nos bajamos la última release de aquí:
https://gitlab.freedesktop.org/pipewire/pipewire/-/releases

Configuramos y compilamos con meson así:

CFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer" \
CXXFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer" \
meson -Dsession-managers='' -Dgstreamer=disabled -Dbluez5=disabled -Djack=disabled -Dpipewire-jack=disabled \
-Dv4l2=disabled -Dpipewire-v4l2=disabled -Dudev=disabled -Ddbus=disabled -Dman=disabled ..

ninja -j4
sudo ninja install
sudo rm /etc/ld.so.cache
sudo ldconfig
(OJO!!! SIEMPRE regenera la caché de librerías después de instalar!!)

Ahora editamos "/usr/local/share/pipewire/minimal.conf", y:
-Comentamos el dispositivo "source" (porque la Pi no tiene dispositivo de grabación, y si no lo comentamos da error).
-En el dispositivo "sink", que está justo debajo (los sink son los dispositivos que "consumen" audio) hacemos los siguientes cambios:
	-Ponemos el valor "device" a "hdmi:vc4hdmi0"
	-Ponemos a false los valores "resample.disable" y "channelmix.disable"
	-Descomentamos la sección "node.param.Props", donde como ves se espedifica el formato del audio a S16 y esto es necesario.
	-Ponemos "support.dbus" a "false"

====SUB-BLOQUE INSTALAR WIREPLUMBER=====

Ahora instalamos WIREPLUMBER, que conecta cada programa SDL2 con PIPEWIRE.
(WIREPLUMBER es un session manager para programas que usan PIPEWIRE, y "/usr/local/share/pipewire/minimal.conf"
es una configuración especial que vale PRECISAMENTE para cuando queremos usar PIPEWIRE sin un session manager en el sistema,
y queremos que WIREPLUMBER sea el session manager para los programas que usan PIPEWIRE.
Si tuviéramos un session manager en el sistema, usaríamos el pipewire.conf "normal", no el minimal, pero no es nuestro caso).

Nos bajamos la última estable de:
https://gitlab.freedesktop.org/pipewire/wireplumber/-/releases

Configuramos y compilamos así:

mkdir b4
cd b4

CFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer" \
CXXFLAGS="-march=native -mtune=native -O2 -fomit-frame-pointer" \
meson ..

ninja -j4
ninja install

Ahora tenemos que configurar wireplumber para que funcione sin DBUS, sin LOGIND y sin V4L2.
Para ello, tenemos que editar una serie de ficheros en /usr/local/share/wireplumber, que pasamos a detallar:
-En "/usr/local/share/wireplumber/main.lua.d/50-alsa-config.lua" ponemos "alsa.reserve" a "false"
-En "/usr/local/share/wireplumber/main.lua.d/50-default-access-config.lua" ponemos "enable-flatpak-portal" a "false"
-En "/usr/local/share/wireplumber/main.lua.d/50-v4l2-config.lua" ponemos "v4l2_monitor.enabled" a "false"
-En "/usr/local/share/wireplumber/bluetooth.lua.d/50-bluez-config.lua" ponemos "bluez_monitor.enabled" a "false"
-En los ficheros: 
	"/usr/local/share/wireplumber/policy.conf"
	"/usr/local/share/wireplumber/main.conf"	
	"/usr/local/share/wireplumber/wireplumber.conf"
	...ponemos en todos ellos "support.dbus" a "false"

====FIN SUB-BLOQUE INSTALAR WIREPLUMBER====

Y YA PODEMOS LANZAR UN PROGRAMA SDL2 SOBRE PIPEWIRE CON UN SCRIPT DE ESTE ESTILO:

#Get things ready...
XDG_RUNTIME_DIR=/tmp pipewire -c /usr/local/share/pipewire/minimal.conf &
XDG_RUNTIME_DIR=/tmp wireplumber &

#Run something SDL2 using PIPEWIRE
XDG_RUNTIME_DIR=/tmp PIPEWIRE_LOG_SYSTEMD=false SDL_AUDIODRIVER=pipewire ./prince.bin

#Kill PIPEWIRE and WIREPLUMBER
killall wireplumber
killall pipewire

Si queremos debuguear, podemos pasarle a pipewire: "-v", y luego permanecer atentos a los errores y/o warnings cuando
lancemos algo que use PIPEWIRE.
También deberíamos pasarle a la línea del juego: "PIPEWIRE_DEBUG=3", para ver errores y/o warnings del backend PIPEWIRE de las SDL2.

==================================================================================
==FIN BLOQUE PARA COMPILAR E INSTALAR PIPEWIRE + WIREPLUMBER A MANO EN DEBIAN 11==
==================================================================================

PARA LANZAR UN JUEGO FNA USANDO SDL2 QUE A SU VEZ USE EL BACKEND PIPEWIRE DE SDL2, HACEMOS:

PIPEWIRE_LOG_SYSTEMD=false PIPEWIRE_DEBUG=3 XDG_RUNTIME_DIR=/tmp SDL_AUDIODRIVER=pipewire LD_LIBRARY_PATH=lib64 mono Timespinner.exe

=========================================
EXTRA NO NECESARIO NORMALMENTE--LIBFMODEX
=========================================
Algunos juegos necesitan FMODEX, que es una librería cerrada.
EL PROBLEMA es que los juegos usan FMODEX, que es antigua, pero sólo FMOD está para descargar para aach64.
FMOD es la versión moderna de FMODEX.
Puedes descargar FMOD de aquí para tu arquitectura.
https://www.fmod.com/download
COMO HEMOS DICHO, LOS JUEGOS USAN FMODEX EN VEZ DE FMOD, ASÍ QUE AQUÍ TENEMOS UN WRAPPER PARA TENER FMODEX... SOBRE FMOD!!!
...Y ASÍ ENGAÑAR A LOS JUEGOS:
https://github.com/ptitSeb/fakemodex
...Para usarlo, primero es copiar las librerías fmod para aarch64,
y luego usar el mencionado wrapper "fakemodex", tras compilarlo e instalarlo en el directorio de librerías del juego.

(NOTA: Aunque BASTION necesita FMODEX, en teoría, en algún momento será posibe lanzar BASTION en Pi4 sin usar FMODEX, con:
"LD_LIBRARY_PATH=lib64 mono Bastion.exe -usefnasound"
...Pero de momento, la versión GOG que es la que yo tengo comprada no soporta "-usefnasound".)

Para lanzar BASTION, versión Linux, por ejemplo, entramos en Game y hacemos:
LD_LIBRARY_PATH=lib64 mono Bastion.exe
(En lib64 tendríamos las librerías como SDL2, etc... compiladas para nuestra arquitectura.)
(También podríamos lanzar directamente Bastion.bin.x86_64 que es el monokickstart que sabe que tiene que pillar las librerías de lib64/).

OTROS JUEGOS DE FNA QUE FUNCIONAN BIEN EN LA PI:
https://bootdiskrevolution.itch.io/bleed
https://bootdiskrevolution.itch.io/bleed-2
https://www.gog.com/game/timespinner
https://www.gog.com/game/chasm
https://www.gog.com/en/game/owlboy
https://store.steampowered.com/app/1280300/Steel_Assault/
https://supergiant-games.itch.io/transistor
