-Añadimos los parámetros del kernel que queramos en /etc/default/grub, y ejecutamos update-grub para que los meta en /boot/grub/grub.cfg
(NUNCA editamos a mani /boot/grub/grub.cfg porque es sobreescrito por update-grub con info de /etc/default/grub)

-Para cambiar de modo de vídeo, hay que añadir:
video="HDMI-A-2:1280x720@60"

-Para que no nos salgan los interfaces de red con nombres raros hay que añadir:
"net.ifnames=0"

-Además añadimos estos parámetros:
"mitigations=off audit=0"

******SERVICIOS A DESACTIVAR**********
--Desactivar swap--

Miramos cómo se llama el servicio de swap:
systemctl --type swap

Por ejemplo nos sale que se llama:
dev-disk-by\x2duuid-a31245cc\x2db81d\x2d4e3f\x2daf9c\x2d95c6d1bf02f4.swap

Desactivamos con:
systemctl mask 'dev-disk-by\x2duuid-a31245cc\x2db81d\x2d4e3f\x2daf9c\x2d95c6d1bf02f4.swap'

MUCHO OJO CON LA COMILLA SIMPLE AL PRINCIPIO O AL FINAL, O NO FUNCIONARÁ.


--Otras cosas a desactivar--

Puedes ver los tipos de servicios con:
systemctl -t help
Y luego escribir algo como:
systemctl -t service
...Para ver descripciones de lo que hacen.

Si quieres volver a activar algo que has desactivado por error y no arranca, etc... puedes ir a /etc/systemd/system/
y borrar el symlink correspondiente, así volverá a funcionar ese servicio o lo que sea.

Para ver el inicio, pudes hacer:
systemctl mask getty.target
...y Cuando lo hayas visto, hacer:
systemctl unmask getty.target

LISTA DE COSAS QUE SE PUEDEN MASKEAR TRANQUILAMENTE:
systemctl mask cron.service
systemctl mask console-setup.service
systemclt mask systemd-timesyncd.service
systemctl mask systemd-journald.service
systemctl mask systemd-journal-flush.service
systemctl mask systemd-journald.socket
systemctl mask systemd-journald-dev-log.socket
systemctl mask systemd-update-utmp.service
systemctl mask systemd-sysusers.service
systemctl mask systemd-random-seed.service
systemctl mask systemd-user-sessions.service
systemctl mask systemd-tmpfiles-setup.service
systemctl mask systemd-update-utmp-runlevel.service
systemctl mask systemd-rfkill.socket
systemctl mask systemd-tmpfiles-clean.timer
systemctl mask systemd-logind.service
systemctl mask sys-fs-fuse-connections.mount
systemctl mask e2scrub_reap.service
systemctl mask wpa_supplicant.service
systemctl mask rsyslog.service
systemctl mask dbus.service
systemctl mask ssh.service
systemctl mask apparmor.service
systemctl mask networking.service
systemctl mask sys-kernel-debug.mount
systemctl mask sys-kernel-tracing.mount
systemctl mask dev-mqueue.mount
systemctl mask sockets.target
systemctl mask apt-daily-upgrade.timer
systemctl mask apt-daily.timer
systemctl mask dpkg-db-backup.timer
systemctl mask dpkg-db-backup.service
systemctl mask logrotate.timer
systemctl mask man-db.timer
systemctl mask fstrim.timer
systemctl mask e2scrub_all.timer
systemctl mask swap.target
systemctl mask remote-fs.target
systemctl mask cryptsetup.target

Para quitar el error "Unprivileged users are not permitted to log in yet" al conectar por SSH, editamos "/etc/ssh/sshd_config"
y ponemos "UsePAM" a "no".

UNA VEZ INSTALADO Y CON RED PROPIA, DEJAMOS /etc/apt/sources.list así (sustituye bookworm por la versión de Debian que estés usando):

deb http://deb.debian.org/debian bookworm main contrib non-free
deb-src http://deb.debian.org/debian bookworm main contrib non-free

deb http://deb.debian.org/debian-security/ bookworm-security main contrib non-free
deb-src http://deb.debian.org/debian-security/ bookworm-security main contrib non-free

deb http://deb.debian.org/debian bookworm-updates main contrib non-free
deb-src http://deb.debian.org/debian bookworm-updates main contrib non-free

Y ya ponemos hacer apt-get update && apt-get upgrade

-Ponemos los LOCALES con: dpkg-reconfigure locales. Elegimos que se generen en_US.UTF8 y es_ES.UTF, y dejamos puesto en_US.UTF8.
ESTO nos quita errores de teclado a través de SSH, ya que necesitamos los LOCALES de la máquina cliente también.

VAMOS CON EL SONIDO:

-Instalamos alsa-utils:
apt-get install alsa-utils

Ahora vemos qué cards y devices hay con: aplay -l
Vemos que el HDMI2, que es el que suena en este cacharro, aparece listado como:
card 0: PCH [HDA Intel PCH], device 8: HDMI 2 [HDMI 2]

Lo probamos con speaker-test:
speaker-test -c2 -D hw:0,8

Así que ahora creamos /etc/asound.conf con este contenido:
defaults.pcm.card 0
defaults.pcm.device 8
...Y ya suena todo lo de ALSA por defecto por el HDMI!

INSTALAR MESA
=============

--libDRM--

Sus dependencias previas son:
sudo apt-get install xsltproc libpciaccess-dev xutils-dev libtool make cmake automake pkg-config gcc g++ meson python3-setuptools --no-install-recommends
(libgbm NO TENEMOS QUE INSTALARLO ni nada, se compila e instala con MESA automáticamente)
Bajamos la última versión estable de:
https://dri.freedesktop.org/libdrm/

Se configura con:

CFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" CXXFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" meson -Dudev=true -Dvc4=false -Dintel=true -Dvmwgfx=false -Dradeon=false -Damdgpu=false -Dnouveau=false -Dfreedreno=false -Dinstall-test-programs=true ..

Y se prueba el sistema DRM con:
modetest -s 265:1280x720
(RECUERDA que puedes encontrar el conector con: modetest|grep connected)

--MESA--

SI QUIERES GLES Y GLES2 NECESITAS ESTAS DEPENDENCIAS:
sudo apt-get install --no-install-recommends \
    flex bison python3-mako python3-setuptools \
    libexpat1-dev libudev-dev gettext \
    ca-certificates xz-utils \
    zlib1g-dev pkg-config meson

SI ADEMÁS QUIERES VULKAN NECESITAS ESTAS DEPENDENCIAS:
sudo apt-get install libvulkan-dev libvulkan1 vulkan-tools --no-install-recommends

SI ADEMÁS QUIERES OPENGL COMPLETO SOBRE LIBGLVND, TIENES QUE INSTALAR LIBGLVND:
Bajamos la última estable de aquí:
https://gitlab.freedesktop.org/glvnd/libglvnd/-/tags
mkdir b4
cd b4
CFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" \
meson -Dglx=disabled -Dx11=disabled ..
ninja -4
sudo ninja install
(Y "sudo ninja uninstall" para desinstalar)

SATISFECHAS SUS DEPENDENCIAS, PASAMOS A LA COMPILACIÓN DE MESA COMO TAL:

Bajamos los últimos estables de:
https://mesa.freedesktop.org/archive/

CONFIGURAMOS CON:

COMO LO VENIMOS HACIENDO AHORA, CON GLES, GLES2, OPENGL COMPLETO MEDIANTE GLVND Y VULKAN:
CFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" \
CXXFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" \
meson -Dglx=disabled -Dplatforms='' -Dllvm=disabled -Dvulkan-drivers=intel -Ddri-drivers='' -Dgallium-drivers=iris \
-Dglvnd=true -Dbuildtype=release ..
(SI QUIERES SOPORTE PARA WAYLAND, USA -Dplatforms=wayland)

INSTALAR RETROARCH
===================

Dependencia previa para el audio:
apt-get install libasound2-dev

Si vas a compilarlo con soporte para Vulkan, lo primero es instalar el compilador de shaders:
sudo apt-get install glslang-dev glslang-tools spirv-tools

Para configurar RetroArch con soporte de GLES y VULKAN, como lo venimos haciendo:

CFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer -DEGL_NO_X11" \
CXXFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer -DEGL_NO_X11" \
./configure --disable-ibxm --disable-vg --disable-x11 --disable-sdl2 --disable-al --disable-cheevos --disable-ffmpeg \
--disable-networking --disable-netplaydiscovery --disable-libretrodb --enable-udev --disable-sdl --disable-pulse --disable-oss \
--disable-freetype --disable-7zip --disable-imageviewer --disable-rjpeg --disable-rbmp --disable-rtga --disable-flac \
--disable-qt --disable-materialui --disable-xmb --enable-rgui --disable-ozone --disable-gfx_widgets --disable-langextra \
--disable-cdrom --disable-accessibility --disable-tinyalsa --disable-rpiled \
--enable-egl --enable-opengles --enable-opengles3 --enable-vulkan

INSTALAR SDL2
=============

Instalamos dependencias previas:
sudo apt-get install libudev-dev libasound2-dev libvorbis-dev libflac-dev libmpg123-dev libmodplug-dev libpng-dev libjpeg-dev libfreetype6-dev --no-install-recommends
(libgbm NO TENEMOS QUE INSTALARLO ni nada, se compila e instala con MESA automáticamente)

Bajamos la última versión estable de:
https://www.libsdl.org/download-2.0.php

Ahora, para configurar:

CON GLES, GLES2, OPENGL COMPLETO y VULKAN, COMO LO HACEMOS AHORA:

CFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer -DEGL_NO_X11" \
CXXFLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer -DEGL_NO_X11" \
./configure --enable-video-kmsdrm --disable-video-x11 --disable-dbus --disable-diskaudio --disable-oss --disable-pulseaudio --disable-video-rpi --disable-dummyaudio --disable-video-dummy --enable-video-opengles --enable-video-opengl --enable-video-vulkan --enable-libudev --disable-esd --disable-ime --disable-fcitx --disable-libsamplerate

CORE FLYCAST (UPSTREAM)
=======================

Clonamos su repo:
git clone --depth 1 https://github.com/flyinghead/flycast.git
git submodule update --init

Configuramos y compilamos:

mkdir b4
cd b4

cmake .. -DCMAKE_BUILD_TYPE=Release -DLIBRETRO=ON -DUSE_VULKAN=ON -DUSE_OPENGL=OFF \
-DCMAKE_CXX_FLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" \
-DCMAKE_C_FLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer"

Si quieres versión con OpenGL_ES:

cmake .. -DCMAKE_BUILD_TYPE=Release -DLIBRETRO=ON -DUSE_VULKAN=ON -DUSE_OPENGLES2=ON -DUSE_OPENGL=OFF \
-DCMAKE_CXX_FLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer" \
-DCMAKE_C_FLAGS="-march=native -mtune=native -O2 -ftree-vectorize -pipe -fomit-frame-pointer"

make -j4

Ahora ponemos la BIOS, llamada "dc_boot.bin", en ~/.config/retroarch/system/

Para que no de segfault al iniciarse desde la TTY, tienes que poner al final de la línea de retroarch: < /dev/null
Podemos lanzar juegos en GDI, CDI o CHD.

QUE EL DIRECTORIO ACTUAL ESTÉ EN EL PATH
========================================

Edita ~/.profile y lo dejas así:

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

export PATH=$PATH:.

PS1='\w\$ '
TERM=xterm-256color
color_prompt=yes
export LS_OPTIONS='--color=auto'
alias ls='ls $LS_OPTIONS'
