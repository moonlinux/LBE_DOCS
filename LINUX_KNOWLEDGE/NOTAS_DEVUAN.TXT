INSTALAR DEVUAN EN LA RASPBERRY PI
==================================

Puedes bajar la última versión arm64 para Pi4 desde aquí:
https://arm-files.devuan.org/

Para pedir ayuda usa el canal #devuan o #devuan-arm, en irc.libera.chat
Pregunta a c0rnelius (que hace las imágenes para Raspberry Pi) o Tenkawa.

Usuario/password por defecto: root/toor

CONFIGURACIÓN INICIAL DEL SISTEMA
=================================

-Configuramos el teclado y los locales. Para ello simplemente ejecuta, nada más arrancar por primera vez:
run-setup
(Elegimos que se generen en_US.UTF8 y es_ES.UTF, y dejamos puesto en_US.UTF8. ESTO nos quita errores de teclado a través de SSH,
ya que necesitamos los LOCALES de la máquina cliente también).
Tenemos que comprobar con el comando locale que todo sale puesto a en_US.UTF-8 y NO a POSIX.
Tras reiniciar (sí, hay que reiniciar), ya tendría que ir la Ñ, los acentos y todo eso.
Si queremos cambiar la distribución del teclado de nuevo (porque cambiamos de sistema y/o teclado) basta con volver a hacer:
sudo dpkg-reconfigure keyboard-configuration
Eso sí, asegúrate antes de que el comando "locale" nos dice que está todo a en_US.UTF-8.
(OJO!!!! NO LO HAGAS POR SSH, o fallará por culpa de los LOCALE de la máquina desde la que te conectas
y perderás un buen rato)

-Configuramos la fuente de letra con: dpkg-reconfigure console-setup

-Ponemos el modo de vídeo deseado en cmdline.txt con: video="HDMI-A-1:1280x720@60"
(RECUERDA que ninguno de los parámetros hdmi_* de config.txt funciona en modo KMS!)

-Añadimos "rw" en cmdline.txt, porque luego vamos a quitar los scripts que checkean el rootfs, y el kernel si no le dices nada
monta el rootfs como read-only para que esos programas de checkeo lo remonten luego como rw.

-Instala el bash-autocompletion: apt-get install bash-completion

-Edita /usr/local/bin/governor y quita toda referencia a sudo, para que luego al desisntalar el paquete sudo no te empieze a fallar
 el script /etc/init.d/governor, que a su ver usa /usr/local/bin/governor.

-Edita /etc/fstab y en la línea de montaje del rootfs, quita el commit=... y en su lugar pon la opción "sync" (las escrituras se hacen
inmediatamente, si no ponemos la opción sync y no ponemos nada en commit=... el tiempo de sync son 5 segundos por defecto)

GESTIÓN DE SERVICIOS
====================

-INFO INICIAL: El init manager en Devuan es SysVinit (también se puede usar runit).
Puedes averiguar qué gestor de procesos estás usando en tu sistema con:
ps --no-headers -o comm 1

-PARA ADMINISTRAR SERVICIOS, LO PRIMERO ES SABER SON ESTAS COSAS:
QUE UN SERVICIO ESTÉ ACTIVO simplemente significa que hay un symlink en /etc/rcX.d, donde X es el runlevel en el que corre el servicio,
apuntando al script real del servicio que está en /etc/init.d/
TAMBIÉN PUEDES VER A QUÉ PAQUETE PERTENECE UN SCRIPT DE /etc/init.d HACIENDO:
dpkg -S <nombre_script>
...Y AL DESISNTALAR ESE PAQUETE, SE DESINSTALA EL SERVICIO LIMPIAMENTE.

Puedes ver los servicios activos y en qué runlevels van, mirando en qué directorios /etc/rcX.d hay symlinks, con:
ls /etc/rc*.d
O bien pueds usar esto, que no es demasiado claro y enseguida se come pantalla y no ves bien la salida si no es por ssh:
service --status-all
Y una vez que tengas la red levantada, puedes instalar rcconf o bien sysv-rc-conf, y ejecutando esos comandos tienes un menú
muy chulo con ncurses para admimistrarlos.

¿ENTONCES CÓMO ES PREFERIBLE DESHABILITAR LOS SERVICIOS?
--->>>El "workflow" es buscar qué paquete instala el script, y desinstalar ese paquete:
Por ejemplo, tenemos /etc/init.d/networking y /etc/init.d/networking-routes
Pues hacemos:
dpkg -S /etc/init.d/networking
dpkg -S /etc/init.d/networking-routes
...Y obtenemos que para librarnos de esos servicios debemos desinstalar:
apt-get purge ifupdown-extra
apt-get purge ifupdown
...Ahora puedes hacer lo mismo con cron, dbus, rsyslog, etc (Recuerda que para quitar CRON tenemos que hacer: apt-get purge cron anacron, para que elimine cron y NO trate de instalar anacron en su lugar)
Si un servicio no lo encuentra dpkg -S, prueba con apt-cache search <nombre>, como por ejemplo:
apt-cache search zram
...Que nos dice que tendríamos que desinstalar zram-tools.
Y YA, COMO ÚLTIMA OPCIÓN, si ni "dpkg -S" ni "apt-cache search" localizan a qué paquete pertenece el script, pues desactiva el servicio con:
update-rc.d <nombre> disable
Y luego borra el script de /etc/init.d.
Si al arrancar se queja, busca los symlinks que queden en los directorios /etc/rcX.d (usando find), y los borras también.
Esto último pasa con bthelper y con pwrledoff, que son scripts propios de la Pi y no vienen en ningún paquete.
ESTO ES SÓLO PARA SCRIPTS PROPIOS DE LA DISTRO PARA RASPBERRY, NO LO HAGAS CON SCRIPTS QUE PERTENEZCAN A PAQUETES NUNCA.

--->>>Otra opción que NO funciona bien es simplemente deshabilitar el servicio sin desinstalar su paquete, usando update-rc (insserv no se debe usar nunca directamente), haciendo:
update-rc.d -f <nombre_servicio> disable

NETWORKING
==========

Para levantar la WIFI, dejamos así /etc/wpa_supplicant/wpa_supplicant.conf:

ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
update_config=1
country=ES

network={
        ssid="LastCabra"
        psk="mirador1"
        key_mgmt=WPA-PSK
}

Y creamos el script /usr/local/bin/wifiup así:

# Lo primero es cargar el módulo de la WIFI.
modprobe brcmfmac
sleep 1
# Buscamos el nombre del interface WIFI, ya que en la Pi4 es WLAN0 y en la Pi400 es WLAN1.
WLAN_IFACE_NAME=$(ls /sys/class/net | grep wl) 
# Conectamos a la SSID que tengamos configurada en wpa_supplicant.conf
wpa_supplicant -B -Dnl80211 -i$WLAN_IFACE_NAME -c/etc/wpa_supplicant/wpa_supplicant.conf
sleep 1
dhclient $WLAN_IFACE_NAME
# Actualizamos a la hora de red para que GIT y APT vayan bien.
# ntpdate pertenece a un paquete del mismo nombre.
ntpdate -b hora.roa.es
# Iniciamos el servidor SSH.
/etc/init.d/ssh start
# ¿Cuál es mi IP?
MY_IP=$(hostname -I) 
echo "This computer's local IP is $MY_IP"

Y también podemos crear /usr/local/bin/wifidown así:

/etc/init.d/ssh stop
pkill dhclient
pkill wpa_supplicant
rmmod brcmfmac

Y editamos /etc/ssh/sshd_config y dejamos la línea de PermitRootLogin así:
PermitRootLogin yes

Y le damos permisos de ejcución al script.

Y editamos /boot/config.txt y comentamos la línea: dtoverlay=disable-wifi

AUTOLOGIN EN DEVUAN
===================

Editamos /etc/inittab y en las líneas donde lanza las terminales metemos el autologin.
O sea, buscamos la línea que empieza así:
c1:12345:respawn:/sbin/agetty
Y la dejamos así:
c1:12345:respawn:/sbin/agetty --autologin <username> --noclear 38400 tty1 linux
..Y podemos hacer lo mismo con las demás terminales.

AUDIO EN DEVUAN
===============

-Para configurar el audio con el driver de audio HDMI del lado de ARM (que es como lo venimos haciendo en 2020):
	-En config.txt
		dtoverlay=vc4-kms-v3d
		#dtparam=audio=on <---SE DEBE deshabilitar la carga de bcm2835.
	 RECUERDA que ninguno de los parámetros hdmi_* de config.txt funciona en modo KMS! El modo de vídeo, por ejemplo,
	 se establecería añadiendo a cmdline.txt algo como:
	 video="HDMI-A-1:1280x720@60"
	-Si falla speakertest, mira que tengas en /usr/share/alsa/cards/vc4-hdmi.conf exactamente lo mismo que aquí:
	 https://raw.githubusercontent.com/HiassofT/LibreELEC.tv/le11-alsa/projects/RPi/filesystem/usr/share/alsa/cards/vc4-hdmi.conf

ACTUALIZACIÓN DEL KERNEL Y EL FIRMWARE DE LA RASPBERRY EN DEVUAN
================================================================

Se usa el comando:
fetch -u
...y te da opciones para actualizar lo que quieras.
Por ejemplo, para actualizar al útimo kernel estable sería con:
fetch -1
Y para actualizar al último kernel inestable:
fetch -2

Al actualizarse el kernel también se actualiza en fw, los dtbs, etc.. que hay en /boot

Para no liarte: verás que existe el paqueta raspberrypi-linux-image (si haces un dpkg -S /boot/vmlinuz... verás que pertenece a ese paquete),
pues bien, ese paquete se actualiza con fetch, precisamente.

TOQUES FINALES
==============

-Borra por completo /opt/vc (si necesitas ejecutar alguna de las mierdas de ahí, puedes reinstalarlo con "fetch -U").
-Para quitar el error "Unprivileged users are not permitted to log in yet" al conectar por SSH, editamos "/etc/ssh/sshd_config"
 y ponemos "UsePAM" a "no".
-Para quitar lo de la temperatura y demás, edita o borra los scripts en /etc/update-motd.d/
-Para quitar el lastlogin, editamos vim /etc/pam.d/login y comentamos la línea:
session optional pam_lastlog.so
En este mismo fichero, puedes quitar otros mensajes del login, como la versión del kernel y tal.
Para ello comenta las dos líneas siguientes a esta de lastlog.
-Para quitar el delay de login editamos /etc/pam.d/common-auth y añadimos el "nodelay" a la línea de pam_unix.so, quedando la línea así:
auth    [success=1 default=ignore]      pam_unix.so nullok nodelay
-Para que no carge el módulo aes-neon-bs, borra /etc/modules-load.d/aes-neon.conf
-Para deshabilitar ipv6 y otras cosas, crea /etc/modprobe.d/blacklist.conf con el contenido:

blacklist brcmfmac
blacklist ipv6
blacklist uio_pdrv_genirq
(NOTA: Dejar la WIFI activada en config.txt pero sin cargar el módulo NO crea kworkers nuevos en sí mismo, eso pasa
cuando cargamos manualmente el módulo en nuestro propio script "wifiup").

-Editamos /boot/config.txt y descomentamos las líneas:
dtoverlay=disable-wifi
dtoverlay=disable-bt
(NOTA: Cuando queramos WIFI, comentamos la línea dtoverlay=disable-wifi y reiniciamos).

-Editamos /etc/fstab y añadimos esto para que /var/log esté en RAM (/tmp ya viene puesto en RAM):
tmpfs		/var/log		tmpfs			defaults,nosuid			0		0
(NUNCA pongas en TMPFS todo /var, porque de verdad que ahí hay cosas que los programas instalan y dejan fijas, como configuraciones
y bases de datos como por ejemplo los metadatos de apt-get!! Así que borrar todo /var es liarla MUY gorda).
-También en /etc/fstab ponemos la opción "sync" a la línea de montaje del rootfs, y quitamos el commit ese, quedando la línea así:
UUID=<UUID_DE_LA_PARTICIÓN_ROOTFS>	/	ext4	defaults,noatime,nodiratime,sync 0 1
(Queremos tiempo real, NO escrituras retardadas estilo escritorio).
-También en /etc/fstab ponemos la opción "sync" y las opciones "noatime" y "nodiratime" a la línea de montaje de la partición BOOT, si quieres,
quedando la línea así:
UUID=<LA_UUID_DE_LA_PARTICIÓN_BOOT>	/boot	vfat	defaults,sync,noatime,nodiratime 0 2

-Como ya tienes tanto /tmp como /var/log montados en TMPS, es decir que están en RAM, ya no te hace falta el servicio que los limpia en cada reinicio.

Para ello, hazlo SIEMPRE POR LAS BUENAS:

update-rc.d -f checkroot.sh disable
update-rc.d -f checkroot-bootclean.sh disable
update-rc.d -f checkfs.sh disable

¡¡¡OJO!!! SI NO HAS AÑADIDO "rw" EN CMDLINE.TXT, LLEGARÁ UN MOMENTO EN QUE TE ENCONTRARÁS QUE EL SISTEMA / ESTÁ MONTADO COMO READ-ONLY.
AÑÁDELO. LA EXPLICACIÓN ESTÁ EN LA SECCIÓN DE CONFIGURACIÓN INICIAL.
¡¡¡OJO!!! SI TE CARGAS ALGO, PUEDES REINSTALAR EL PAQUETE AL QUE PERTENECÍA ESE ALGO, JUNTO CON LA CONFIGURACIÓN POR DEFECTO, CON:
apt-get install --reinstall initscripts -o Dpkg::Options::="--force-confask,confnew,confmiss"

-La línea de comandos del kernel en cmdline.txt, una vez listo todo, queda así:
video="HDMI-A-1:1280x720@60" mitigations=off audit=0 mce=ignore_ce nosoftlockup cpufreq.default_governor=performance elevator=noop console=tty1 root=PARTUUID=521a4163-0b rootfstype=ext4 rootflags=sync,noatime,nodiratime rw rootwait quiet fastboot logo.nologo noswap loglevel=3 usbhid.jspoll=2

(¡¡ATENCIÓN!!: PUEDES COMPROBAR QUE EL ROOTFS SE HA MONTADO CON LOS PARÁMETROS QUE QUIERAS (te suele gustar montarlo con "sync" para que las
escrituras sean inmediatas) SIMPLEMENTE MIRANDO LA SALIDA DEL COMANDO "mount" UNA VEZ ARRANCADO EL SISTEMA).

(audit=0 desconecta la infraestructura de auditoría del kernel, que nos salva un 1% de CPU.
 mce=ignore_ce ignora los errores corregidos, que producen prinks y cosas así causando picos de latencia.
 nosoftlockup deshabilita el logging que se produce cuando un proceso está más de cierto tiempo en una CPU, cosa que usando "chrt -f 80"
 para que un proceso pille una CPU y no la suelte es normal que se produzca.
 elevator=noop hace que las operaciones de lectura/escritura en disco se produzcan tal cual llegan, sin algoritmos de elección).

(¡¡ATENCIÓN!!: puedes aislar un grupo de CPUs para que el scheduler no les envíe tareas y para que no les lleguen ticks, con los parámetros:
 isolcpus=1-3 nohz_full=1-3
 Y en consecuencia, si quieres correr algo sobre esas CPUs aisladas puedes hacer:
 chrt -f 80 taskset -c 1-3 <programa>).

-Si quieres colores en la consola, un prompt sencillo, que el directorio actual esté en el PATH,
y un mensaje de bienvenida, edita ~/.bashrc (el fichero viene comentado entero) y déjalo así
(la parte de "...If not runnin interactively..." es necesaria para que el mensaje de bienvenida no interfiera con el scp):

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

export PATH=$PATH:.

PS1='\w\$ '
TERM=xterm-256color
color_prompt=yes
export LS_OPTIONS='--color=auto'
alias ls='ls $LS_OPTIONS'

echo " ^_^    Welcome to GNU/Linux arm64."
echo "(O,O)   No init manager is installed or needed, add any startup commands to /etc/minimal."
echo "/)_)    Have fun!"
echo " ¨ ¨ "
echo "     "

