INSTALAR MESA
==============

NOCIONES PREVIAS DE APIS, DEPENDENCIAS, Y SOPORTE DE OPENGL COMPLETO (NO GLES)

Para tener OpenGL "completo" (no GLES), Mesa se puede compilar con GLX (lo que conlleva un cojón de dependencias de X11 y es un asco), o con GLVND (libglvnd, una librería muy ligera de NVIDIA que es libre).
Compilar MESA con OpenGL completo para GLX nos produce libGL.so, y compilar MESA con OpenGL completo para GLVND nos produce libOpenGL.so  

Si compilas con OpenGL completo mediante GLVND, las SDL2 deberían ya detectar y usar libOpenGL.so en vez de libGL.so, y los programas de SDL2
que usen OpenGL completo funcionarán.
Aún así, si algún programa intenta linkar con -lGL, no lo va a encontrar, así que cambia -lGL por -lOpenGL y ya linkará sin problemas.
Si algún programa linka contra -lGLU, elimínalo y ya. No se necesita nada de ahí.

Si MESA te da un error de que no encuentra GL/glxproto.h, reinstala el paquete x11proto-dev

FIN NOCIONES PREVIAS

Empezamos con libDRM:

Lo primero es instalar la última versión de MESON, porque la que trae DEBIAN siempre son viejos y las versiones
actuales de WLROOTS necesitan versiones actuales de MESON para compilar (DEBIAN nunca coge a WLROOTS con la versión
de MESON necesaria). Así que ahorra tiempo ahora si vas a usar WAYLAND, y deja ya instalado el último MESON:

sudo apt-get purge meson
sudo apt install python3-pip --no-install-recommends
sudo python3 -m pip install ninja
sudo python3 -m pip install meson
PATH="/usr/local/bin:$PATH"

...Ahora ya vamos con libDRM en sí...
Elimimanos el libDRM del sistema, que es viejo siempre:
apt-get purge libdrm*
Instalamos estas dependencias previas: 
sudo apt-get install xsltproc libpciaccess-dev xutils-dev libtool make cmake automake pkg-config gcc g++ python3-setuptools --no-install-recommends
(libgbm NO TENEMOS QUE INSTALARLO ni nada, se compila e instala con MESA automáticamente)

Clonamos el repo de libdrm: git clone --depth 1 https://gitlab.freedesktop.org/mesa/drm

mkdir b4
cd b4

Configuramos libdrm con esto:

CFLAGS="-march=native -mtune=native -O2" \
CXXFLAGS="-march=native -mtune=native -O2" \
meson -Dudev=true -Dvc4=disabled -Dintel=disabled -Dvmwgfx=disabled -Dradeon=disabled -Damdgpu=disabled -Dnouveau=disabled \
-Dfreedreno=disabled -Detnaviv=disabled \
-Dinstall-test-programs=true ..

Compilamos e instalamos:
ninja -j4
sudo ninja install

En este punto, puedes probar si libdrm te funciona bien haciendo:
modetest -s 197:1280x720
(donde 197 es un ID de conector válido: puedes ver los conectores con modetest|grep connected -b4).

DEPENDENCIAS PREVIAS DE MESA:

SI QUIERES GLES Y GLES2 NECESITAS ESTAS DEPENDENCIAS:
sudo apt-get install --no-install-recommends \
    flex bison python3-mako python3-setuptools \
    libexpat1-dev libudev-dev gettext \
    ca-certificates xz-utils \
    zlib1g-dev pkg-config

SI ADEMÁS QUIERES VULKAN NECESITAS ESTAS DEPENDENCIAS:
sudo apt-get install libvulkan-dev libvulkan1 vulkan-tools --no-install-recommends

SI ADEMÁS QUIERES OPENGL COMPLETO SOBRE LIBGLVND, TIENES QUE INSTALAR LIBGLVND:
Bajamos la última estable de aquí:
https://gitlab.freedesktop.org/glvnd/libglvnd/-/tags
Y configuramos con:
CFLAGS="-march=native -mtune=native -O2" \
meson -Dglx=disabled -Dx11=disabled ..

SATISFECHAS SUS DEPENDENCIAS, PASAMOS A LA COMPILACIÓN DE MESA COMO TAL:

Clonamos el repo de panfork:
git clone --depth 1 https://gitlab.com/panfork/mesa.git

Comentamos la línea "name_prefix" de los ficheros:
src/mapi/shared-glapi/meson.build
src/egl/meson.build
src/mapi/es1api/meson.build
src/mapi/es2api/meson.build

PARA COMPILAR:

CFLAGS="-march=native -mtune=native -O2" CXXFLAGS="-march=native -mtune=native -O2" \
meson -Dgallium-drivers=panfrost -Dvulkan-drivers= -Dllvm=disabled -Dglx=disabled -Dplatforms=wayland

===
https://forum.armbian.com/topic/26450-accelerated-video-options-for-installing-and-running/
https://gitlab.com/panfork/mesa

PONER AL INICIO USANDO dietpi-config->AutoStart->Custom->With Autologin:

echo performance | tee /sys/class/devfreq/dmc/governor

PONER EN /etc/environment

PAN_MESA_DEBUG=gofaster

PONER EN /boot/dietpiEnv.txt

extraargs=mitigations=off audit=0

====

PARA PODER LANZAR WAYLAND SIN TENER QUE HACER "export XDG_RUNTIME_DIR=/var/run/user/0"
apt-get install dbus
apt-get install libpam-systemd
systemctl unmask systemd-logind

====


INSTALAR GLMARK2
================

Instalamos dependencias previas:
apt-get install libpng-dev libjpeg-dev

Clonamos su repo:
git clone --depth 1 https://github.com/glmark2/glmark2.git

Configuramos con:
mkdir b4
cd b4

CFLAGS="-march=native -mtune=native" CXXFLAGS="-march=native -mtune=native" \
meson -Dbuildtype=release -Dflavors=drm-glesv2,gbm-glesv2,wayland-glesv2 ..

COMPILAR FLYCAST CONTRA GLES3.1
===============================

cmake .. -DCMAKE_BUILD_TYPE=Release -DLIBRETRO=ON \
-DUSE_VULKAN=OFF -DUSE_OPENGL=ON -DUSE_GLES=1 \
-DCMAKE_CXX_FLAGS="-march=native -mtune=native" -DCMAKE_C_FLAGS="-march=native -mtune=native"

SOPORTE PARA LA TARJETA WIFI OFICIAL DE LA ORANGE PI 5 EN DIETPI
================================================================

Editamos /boot/dietpiEnv.txt y añadimos la línea:

overlays=opi5-wifi-ap6275p

Reiniciamos, y dietpi-config ya debería ver la tarjeta sin problemas.

FLASHEAR IMÁGEN ANDROID A MICROSD
=================================

La guía original es esta: https://wiki.radxa.com/Rock5/install/rockchip-flash-tools

Hay que usar rkdeveloptool, pero concretamente esta versión:
git clone --depth 1 https://github.com/radxa/rkdeveloptool.git

Instalamos dependencias previas:
sudo apt-get install libudev-dev libusb-1.0-0-dev dh-autoreconf

Configuramos, compilamos e instalamos:
cd rkdeveloptool
autoreconf -i
./configure
make -j4
cp rkdeveloptool /usr/local/bin/

Grabamos la imágen de Android así:

...


Ejecutar cosas sólo en los cores BIG
====================================

taskset -c 4-7 <programa>

OpenFyde
========

Nos bajamos la última release de:
https://github.com/openFyde/overlay-orangepi5-openfyde/releases

Ejecutamos el .run y nos creará un .img que podemos grabar a la Micro SD usando dd.


INSTALAR DRIVERS PROPIETARIOS DE ARM HOLDINGS
=============================================

Vamos entrando en estos repos y bajando los .deb (usando wget), y dejándolos todos en un directorio:
https://github.com/numbqq/mali-debs
https://github.com/numbqq/mpp-rockchip-debs
https://github.com/numbqq/rga-rockchip-debs
https://github.com/numbqq/gstreamer-rockchip-debs

Instalamos el paquete libdrm de la distro:
apt-get install libdrm-dev --no-install-recommends

Y empezamos a instalar los .deb, en este órden no hay problemas:
dpkg -i linux-gpu-mali-wayland_1.1-g6p0-20230406_arm64.deb
dpkg -i rockchip-rga_2.2.0-6_arm64.deb
dpkg -i rockchip-rga-dev_2.2.0-6_arm64.deb
dpkg -i rockchip-rga-sample_2.2.0-6_arm64.deb
dpkg -i rockchip-mpp_1.5.0-8_arm64.deb
dpkg -i rockchip-mpp-dev_1.5.0-8_arm64.deb
dpkg -i rockchip-mpp-sample_1.5.0-8_arm64.deb 

ANTES DE INSTALARLOS, instala libdrm (instrucciones más arriba).

