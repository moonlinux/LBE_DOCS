============DÓNDE PREGUNTAR DUDAS========

canal #intel-gfx de freenode, busca a ickle. Intel es pionera en la adopción de atomic modesetting y pageflipping.

============PARA QUE FUNCIONE==============

Para que funcione el ATOMIC PAGEFLIPPING usando el driver i915, vas a necesitar como mínimo un kernel 4.3.
Si somos capaces de que la llamada drmSetClientCap(drm.fd, DRM_CLIENT_CAP_ATOMIC, 1) retorne 0, es que funciona. Si no, olvídate. Para lograrlo, puede que en un
kernel "stock" tengamos que pasarle al kernel el parámetro i915.nuclear_pageflip=y. En 4.3-RC7 ya no hace falta, pero sí en el kernel de Lubuntu 15.10 por defecto (4.2).
Sin embargo, el 4.2 no es apropiado ya que si activas el nuclear_pageflip y sales a una TTY, las X se caen. 

Si esta llamada no se puede completar, no tiene sentido seguir porque no veremos los id de propiedades atómicas de los planos.

La guía para actualizar el kernel en Ubuntu/Lubuntu está aquí:

https://wiki.ubuntu.com/Kernel/MainlineBuilds

============================================

ESTO ES LO MÁS IMPORTANTE DE TODO:
*********
struct drm_crtc: une planos y conectores en una relación N a N. Múltiples planos pueden ir a parar a un CRTC para mostrarse  en pantalla a la vez (imagina varias ventanas en un 
mismo escritorio), y luego ese CRTC acabar en múltiples displays, de manera que todos esos planos se muestran en esos displays al mismo tiempo (imagina el mismo escritorio
que muestra múltiples ventanas viéndose por varios conectores a la vez).
El crtc determina la posición, el tamaño, etc..con los que los planos son mostrados a través de los conectores.
*********

"it is called "atomic" because it can atomically update multiple properties (scanout buffer, position, etc) at vblank"
R. Clark

it shouldn't be using drmModePageFlip().. or maybe it falls back to that as legacy path if driver doesn't support atomic.. look for drmModeAtomicCommit() and friends..

https://lwn.net/Articles/653071/
https://lwn.net/Articles/653466/

Del segundo link, como ahora pdemos cambiar de conector y de buffer a la vez, no es posible que se muestren frames corruptos: por eso hace falta el atomic modesetting: 
"cada frame debe ser perfecto".

struct drm_connector: representa a la pantalla física, por dónde sale la imágen.
struct drm_plane: quédate con el término "scanout engine". Es una abstracción que va saltando de leer de un buffer a leer de otro según necesitamos, y lo manda a la pantalla.
                                        Es como una abstracción tipo "ventana" que una vez pinta cosas de un buffer y otras de otro. Como las ventanas de dispmanx que cada vez leen de un resource.
struct drm_framebuffer: de dónde lee un struct drm_plane en un momento dado. Pueden estar ya mmaped para que escribamos directamente en ellos.
struct drm_crtc: une planos y conectores en una relación N a N. Múltiples planos pueden ir a parar a un CRTC para mostrarse  en pantalla a la vez (imagina varias ventanas en un 
mismo escritorio), y luego ese CRTC acabar en múltiples displays, de manera que todos esos planos se muestran en esos displays al mismo tiempo (imagina el mismo escritorio
que muestra múltiples ventanas viéndose por varios conectores a la vez)..
El crtc determina la posición, el tamaño, etc..con los que los planos son mostrados a través de los conectores.

================EL ERROR MÁS RECALCITRANTE Y GORDO QUE NOS PASA POR NO ENTENDER CÓMO FUNCIONAN LA COSAS=================================

RECUERDA: NOSOTROS PEDIMOS AL KERNEL UNA SERIE DE CAMBIOS QUE QUEREMOS QUE SE HAGAN DE MANERA ATÓMICA, Y CUANDO ESTOS CAMBIOS SE HACEN
EL KERNEL NOS DEVUELVE UN EVENTO QUE DEJA EN EL DESCRIPTOR DE FICHERO FD. ¡¡¡TENEMOS QUE HACER ALGO CON ESTOS EVENTOS O SE ACUMULARÁN ALLÍ!!!

19:47 <robclark> ahh, yeah.. normally userspace should be reading events back from kernel somewhere (that is how you find out about hotplug, pageflip, etc)
O sea que si hacemos "pedimos" algo al kernel, y ese algo al completarse en espacio de kernel deja un evento en la cola de eventos de un descriptor (fd), como 
norma general tendremos que leer esos eventos desde userspace. No tener esto en cuenta es el orígen de algunos de los errores más graves y recalcitrantes.

Si el programa nos devuelve un "Cannot allocate memory" en una llamada a drmModeAtomicCommit(), lo que tenemos que buscar es ENOMEM, que es el error -12, y nos
apacerecrá en el dmesg como -12 efectivamente. ESTO ES porque al hacer la llamada a drmModeAtomicCommit() le estábamos pasando el flag DRM_MODE_PAGE_FLIP_EVENT.
Lo que le estamos diciendo al pasarle DRM_MODE_PAGE_FLIP_EVENT a drmModeAtomicCommit() es "haz este conjunto de cambios de manera atómica y cuando estén
hechos, como se van a hacer en el FLIP EVENT siempre, déjame el evento correspondiente en el descriptor fd.
Como no estábamos vaciando la cola de eventos del descriptor (drain the event queue) , a las 128 iteraciones drmModeAtomicCommit() falla porque no quedan más slots, y nos
da un error -12, esto es, ENOMEM, o en lenguaje de personas "Cannot allocate memory".
Las soluciones pasan por: 
-No pasar el flag  DRM_MODE_PAGE_FLIP_EVENT a drmModeAtomicCommit(). La llamada a  drmModeAtomicCommit() sigue siendo síncrona, o sea, sigue bloqueando hasta VYSNC.
 Basta con pasar un 0 en el parámetro de los flags de drmModeAtomicCommit().
-Seguir pasando el flag pero luego consumir el evento que se nos va a dejar desde el kernel en el descriptor fd. Esto lo podemos hacer de dos maneras.
	-De manera implícita con una llamada a drmHandleEvent(), que internamente llama a read() y consume el evento.
	-De manera explícita con algo como read(drm.fd, buf, 4096); con lo que le decimos que queremos deshechar la cola de eventos.

===============EL FUNCIONAMIENTO BÁSICO=======

Un objeto tiene propiedades. Y podemos cambiar varias de esas propiedades al mismo tiempo. Una propiedad puede ser el framebuffer del que está leyendo un overlay, 
pero cambiar eso implica cambiar más cosas internamente, con lo que hasta ahora no podíamos hacerlo y a la vez esperar a que el kernel acabase y devolviese un evento,
cambiando a la vez la función de callback cuando se haga esto, y más cosas que se cambiarán internamente para conseguir eso, que un overlay cambie de leer de un plano
a leer de otro al producirse el vsync. Ahora con ATOMIC PAGEFLIPPING podemos hacerlo.
Los pasos son muy sencillos.


--Lo primero necesito el ID de la propiedad que sea del objeto que sea. Cada propiedad de cada objeto tiene un ID. Por ejemplo, para pillar el ID de la propiedad del 
framebuffer en uso de un plano, tengo la función get_plane_prop_id() cuya implementación no se detalla aquí, mirar en el código.

fb_obj_id = get_plane_prop_id(drm.plane_id, "FB_ID");

--Creamos una "petición atómica", un Req.

static drmModeAtomicReqPtr req = NULL;
req = drmModeAtomicAlloc();

--Añadimos los cambios que queramos. Los dos últimos parámetros son eso, el ID de la propiedad que queremos cambiar y el nuevo valor que queremos darle.
Esta función retornará algo distinto de 0 si el cambio no es posible. Ya sabes, a tirar de dmesg y de errno:

ret = drmModeAtomicAddProperty(req, drm.plane_id, fb_obj_id, bufs[flip_page].fb_id);
ret = drmModeAtomicAddProperty(...);
ret = drmModeAtomicAddProperty(...);

--Hacemos la petición formal de dichos cambios, o sea, el commit. RECUERDA QUE según cómo lo hagas es posible que se te devuelvan eventos en la cola de eventos
del descriptor drm.fd y tendrás que consumir esos eventos. Si le pasas 0 en el parámetro de los flags como en este ejemplo, pues no, pero con otros flags como
por ejemplo DRM_MODE_PAGE_FLIP_EVENT sí que se nos devuelven evetos que tendrás que consumir (drain que event queue) o date por jodido tras n iteraciones,
porque la cola de eventos se llena.

ret = drmModeAtomicCommit(drm.fd, req, 0, NULL);

Tenemos otros flags a parte de DRM_MODE_PAGE_FLIP_EVENT, como DRM_MODE_ATOMIC_NONBLOCK que es para que la función no bloquee hasta vsync,
y DRM_MODE_PAGE_FLIP_ASYNC que nos deja el evento en el la cola de eventos del descriptor fd al completarse el cambio pero que tampoco bloquea.
Por ahora, DRM_MODE_PAGE_FLIP_ASYNC no funciona. Ver nota en src/linux/drivers/gpu/drm/i915/intel_display.c, donde dice: 
"At the moment we can only handle plane-related operations and do not yet support asynchronous commit."

--Liberamos la estructura de petición atómica:

drmModeAtomicFree(req);

...recuerda que CUANDO SE COMPLETE LO QUE LE PEDIMOS EN EL COMMIT, DEPENDIENDO DE LOS FLAGS QUE LE HAYAMOS PASADO, EL KERNEL
NOS DEJARÁ UN EVENTO EN UN DESCRIPTOR DE FICHERO. TENEMOS QUE IR CONSUMIENDO ESTOS EVENTOS DE LA COLA DE EVENTOS DEL DESCRIPTOR
O ESTAREMOS JODIDOS, PORQUE SÓLO HAY 128 SLOTS DE EVENTOS POR DESCRIPTOR. (drain the event queue).

Hemos usado como base estas dos partes del parche que añade un test de atomic pageflip a modetest.c de robclark:
http://www.autoindustry536.bllog.opensubscriber.com/message/dri-devel@lists.freedesktop.org/17617654.html
http://www.autoindustry536.bllog.opensubscriber.com/message/dri-devel@lists.freedesktop.org/17617653.html

================ERRORES MÁS COMUNES===========
19:47 <robclark> ahh, yeah.. normally userspace should be reading events back from kernel somewhere (that is how you find out about hotplug, pageflip, etc)
O sea que si hacemos "pedimos" algo al kernel, y ese algo al completarse en espacio de kernel deja un evento en la cola de eventos de un descriptor (fd), como 
norma general tendremos que leer esos eventos desde userspace. No tener esto en cuenta es el orígen de algunos de los errores más graves y recalcitrantes.

Para comprobar errores, dos cosas: 

Desde el lado del usuario, imprimir los errores con su errno:
ret = dmModeAtomicLoQueSea();
if (ret) printf("failed to commit for pageflip: %s\n", strerror(errno));


Desde el lado del kernel: 
-Ponemos MUY alto el nivel de log
echo 31 > /sys/module/drm/parameters/debug
-Borramos dmesg para ver sólo las trazas que se produzcan a partir de ahora:
sudo dmesg -c
-Corremos el test, volcamos dmesg a un fichero y analizamos.

Notas de cosas que hemos analizado hasta ahora:
-Nos fallaba drmModeSetPlane(), que no es una función atomic pero bueno.
buscamos "Invalid" o el ioctl que ha fallado, SETPLANE o lo que sea.
En realidad lo mejor es buscar literalmente DRM_IOCTL_MODE_SETPLANE, y ver debajo qué error ha habido. -22 significa EINVAL, valor inválido.
-Si el programa nos devuelve un "Cannot allocate memory" en una llamada a drmModeAtomicCommit(), lo que tenemos que buscar es ENOMEM, que es el error -12, y nos
apacerecrá en el dmesg como -12 efectivamente. ESTO ES porque al hacer la llamada a drmModeAtomicCommit() le estábamos pasando el flag DRM_MODE_PAGE_FLIP_EVENT.
Lo que le estamos diciendo al pasarle DRM_MODE_PAGE_FLIP_EVENT a drmModeAtomicCommit() es "haz este conjunto de cambios de manera atómica y cuando estén
hechos, como se van a hacer en el FLIP EVENT siempre, déjame el evento correspondiente en el descriptor fd.
Como no estábamos vaciando la cola de eventos del descriptor (drain the event queue) , a las 128 iteraciones drmModeAtomicCommit() falla porque no quedan más slots, y nos
da un error -12, esto es, ENOMEM, o en lenguaje de personas "Cannot allocate memory".
Las soluciones pasan por: 
-No pasar el flag  DRM_MODE_PAGE_FLIP_EVENT a drmModeAtomicCommit(). La llamada a  drmModeAtomicCommit() sigue siendo síncrona, o sea, sigue bloqueando hasta VYSNC.
 Basta con pasar un 0 en el parámetro de los flags de drmModeAtomicCommit().
-Seguir pasando el flag pero luego consumir el evento que se nos va a dejar desde el kernel en el descriptor fd. Esto lo podemos hacer de dos maneras.
	-De manera implícita con una llamada a drmHandleEvent(), que internamente llama a read() y consume el evento.
	-De manera explícita con algo como read(drm.fd, buf, 4096); con lo que le decimos que queremos deshechar la cola de eventos.

-Para que se nos genere un evento en el fd y ADEMÁS el atomic pageflip se haga de manera atómica, hacemos "or" de ambos flags en el commit del request:
ret = drmModeAtomicCommit(drm.fd, req, DRM_MODE_PAGE_FLIP_EVENT|DRM_MODE_PAGE_FLIP_ASYNC, &pipe);
Esto es necesario porque tenemos que escuchar en el fd para detectar cuándo se ha completado el atomic pageflip.











