-CONOCIMIENTO INICIAL MUY IMPORTANTE: Recuerda que PUEDE HABER VARIOS CONECTORES LEYENDO UN MISMO CRTC: por eso, cada conector tiene un campo CRTC_ID, pero un CRTC no tiene un campo conector... Varios conectores pueden estar "mamando" la imágen de un mismo crtc!!!

-PRIMER TRUCO: Si la pantalla se pone en negro apagada, normalmente es porque el kernel ha deshabilitado el CRTC, desconectando el CONECTOR en uso del CRTC. Y eso lo hace el kernel normalmente cuando destruyes algo que el PLANO PRIMARIO está leyendo, como un buffer GBM o la surface EGL, etc.
Y ESTE ES EL TRUCO: localiza, con GDB, en qué línea exacta se apaga la pantalla: ahí es donde estás destruyendo algo que el PLANO PRIMARIO está usando...

-DEBES VER TODO COMO LINEAL, NO HAY PARALELISMO: vamos añadiendo a la atomic-request peticiones de cambios de props de planos, crtcs, conectores... y luego se envían todas en el atomic_commit(), que tenemos uno central en SwapWindow(). ASÍ ES CADA CICLO DEL PROGRAMA, UNO, OTRO, OTRO...

-En SwapWindow() se mete un fence de entrada en el kernel (kms_in_fence_fd) para decirle que KMS tiene que paralizar la aplicación de cambios a que acabe de ejecutarse el cmdstream de la GPU, y se saca un fence de salida del kernel (kms_out_fence_fd) para saber cuándo el kernel ha completado los cambios (en esencia, para saber cuándo se ha hecho el pageflip, que es lo que le pedimos en drm_atomic_setbuffer, cambiar un buffer del plano primario por otro, o sea, un pageflip).
Para tratar estos fences, tenemos que, por una parte, importarlos a EGLSyncKHR (mediante create_fence()) para esperar en ellos desde nuestro programa o para decirle a la GPU que espere en ellos, o bien exportarlos a FDs (mediante eglDupNativeFenceFDANDROID()) para pasárselos al kernel,
que el hombre lo que entiende son los FDs.

-CUANDO te pongas a trabajar con el driver, recuerda siempre DESCOMENTAR el printf de atomic_commit() para saber inmediatamente cuándo hay un commit fallido. Un -22 es EINVAL, valor no válido de algún prop que has intentado poner... en dmesg deberías ver dónde, mirando diez o veinte líneas por encima de la línea que tenga la cadena "fail".

-En DestroyWindow() se llama a DestroySurfaces() y en CreateWindow() se llama a CreateSurfaces().

-NO DEBES hacer lo de que, para recrear los surfaces, se crean en RecreateSurfaces() y luego se destruyen en SwapWindow(), porque
los programas cambian la resolución sin llamar a SwapWindow(), o sea, sin pedir pageflips, con lo que acabas creando un montón de surfaces
nuevas que nunca eliminas. FUGA DE MEMORIA. No te compliques: haz todo en RecreateSurfaces().

-Los punteros driverdata del SDL_Display, SDL_Window, etc... NO los tienes que liberar tú, sólo reservarlos: SDL se encarga de liberar los punteros driverdata de todo. Así que no tienes que liberar dispdata, ni windata, etc. Ya lo hace SDL.

-Puedes mirar la información sobre las PROPS y los valores que aceptan y sus tipos aquí: https://drmdb.emersion.fr/

-Como las EGL y GBM surfaces están viculadas a la SDL_Window, la destrucción de las surfaces GBM y EGL se hace al destruir la ventana
(o sea, se llama a DestroySurfaces() desde DestroyWindow(). O sea que las GBM y EGL surfaces NO se destruyen desde VideoQuit(), sino que
al llegar a VideoQuit() ya se han destruido, porque cuando las SDL internamente llaman a VideoQuit(), las SDL internamente ya han lamado antes a DestroyWindow().
Y claro, cada vez que se destruye la ventana (DestroyWindow()) se destruyen las GBM y EGL surfaces (como pasa en el CGenius cuanto entras en
Video o Display en el menú). Y se vuelven a crear si se vuelve a crear la ventana, si no pues destruidas las surfaces se quedan, lo que es
muy apropiado al salir del programa del todo. 

13:33 < emersion> > my opinion as a userspace developer is that enabling a CRTC without a primary plane has traditionally not worked, so userspace cannot *rely* on it ever working
-CUANDO queremos destruir la GBM surface y sus buffers, siendo que esos buffers están siendo leidos por el PLANO PRIMARIO, antes tenemos que poner el FB_ID del plano primario apuntando a un buffer que no sea el que vamos a destruir, o simplemente a 0 (y que luego, o bien vayamos  SwapWindow() y se le pase un FB_ID de una nueva GBM surface, o bien salgamos del programa y FBCON recupere la TTY porque nosotros cerramos el drm_fd, y listo).
Pero no podemos poner FB_ID a 0 sin más, tenemos que poner las props FB_ID y CRTC_ID a 0 a la vez, en el mismo commit.
Pero pasa una cosa: NO ES POSIBLE TENER UN CRTC ACTIVO SIN UN PLANO! Y AL DESACTIVAR EL CRTC TENEMOS QUE DESENCHUFAR EL CONECTOR QUE LO ESTÁ LEYENDO (varios conectores pueden estar leyendo un CRTC, por eso un CONNECTOR tiene la prop CRTC_ID, pero un CRTC no tiene ninguna prop de CONNECTOR: los CONNECTORs pueden "mamar" varios de cada CRTC). Así que en un sólo atomic commit tendríamos que:
	-Del CRTC en uso, poner ACTIVE a 0 
    -Del CONNECTOR en uso, poner el CRTC_ID a 0
    -Y claro, del PLANO PRIMARIO, poner el FB_ID y el CRTC_ID a 0. 
LA ALTERNATIVA SENCILLA es mantener siempre el FB_ID apuntando a un buffer que no sea el que vas a destruir, tal como el crtc->buffer_id que es el buffer original donde "vive" la consola TTY, pero que no es fiable que esté ahí, o bien QUE NO DESTRUYAS los buffers de la GBM surface hasta que llegues a SwapWindow() de nuevo, donde ya directamente cambias de un FB_ID de uno de los buffers de la antigua GBM surface a un FB_ID de uno de los buffers de la nueva GBM surface.

-CUANDO te de un -22 el atomic_commit, y no sepas por qué, Y FALLE EL CURSOR EN LA SDL2-basic-test, es que la petición del cursor se está metiendo en la misma request donde estás desactivando el CRTC, desconectando el conector del CRTC y poniendo FB_ID y CRTC_ID del PLANO PRIMARIO a 0.
Y NO se puede establecer un cursor con el CRTC desactivado, es imposible porque aunque el cursor va en el PLANO CURSOR, necesita el CRTC activo. 
Esto se arreglaría haciendo un commit inmediato y bloqueante cuando intentamos poner un nuevo cursor en el plano de cursor, para que la petición
no "viaje" en la petición de desactivación del CRTC. PERO TODO ESTO NO ES NECESARIO SI NUNCA DEJAS EL PLANO PRIMARIO SIN UN FB_ID/CRTC_ID VÁLIDOS,
lo cual ahora mismo consigo NO DESTRUYENDO LOS BUFFERS GBM HASTA QUE TENGO UNO NUEVO EN SwapWindow().

-En el futuro, la PROP pixel_blend_mode llegará a estar disponible para VC4, y nos permitirá establecer cursores ARGB8888 sin premultiplicar el ALPHA. Para ver qué video cores lo van soportando, mira esta tabla: https://drmdb.emersion.fr/properties/4008636142/pixel%20blend%20mode


COSAS QUE HACER
===============

1) LO DEL CURSOR DEL RATÓN
-Lo del cursor del ratón el el menú de QUIT del SDLPoP. Ocurre porque en ese menú el SDLPoP ya no está llamando a SwapWindow(), con lo que las props que cambiamos en drm_atomic_movecursor() no se aplican esos cambios porque ya no se produce la llamada atomic_commit() central del driver, o sea, la de SwapWindow(). Y por tanto, esos cambios NO se envían al kernel.
Y tampoco podemos hacer un atomic_commit() cada vez que llamamos a drm_atomic_movecursor(), porque:
-si lo hacemos no-bloqueante llega de nuevo la siguiente secuencia de drm_atomic_movecursor() y atomic_commit(), y como no se ha completado el commit da error porque se acumulan los commits (-16)
-si lo hacemos bloqueante, eso afecta a los programas que sí que están llamando a SwapWindow() mientras movemos el ratón, y hacen que vayan lastrados por el commit bloqueante del ratón y por el commit del vídeo, haciendo que vayan a 30FPS.
----Las solución sería algo así como actualizar independientemente el cursor, ya que actualmente CABALGAMOS la actualización de la pantalla (el atomic_commit central, de SwapWindow()) y claro, cuando no hay actualización central no se mueve el cursor porque nadie hace commit de los cambios solicitados en drm_atomic_movecursor().
*SOLUCIONES POSIBLES 1: Quizá se podría usar un timer, como dice robclack, y que cada cierto tiempo se llame a la función de commit en plan callback: "ha pasado un tiempo, llamo a callback que contiene el commit; ha pasado otra vez un tiempo, llamo otra vez a la función de callback que contiene el commit, etc, etc.."
Estos timers en teoría van en su propio thread y no deberían ser un problema.. excepto por el acceso a variables en común con el thread del programa donde corren nuestras llamadas drm_atomic..(), pero podría haber un atomic_req propio del ratón, etc, que no haya variables en común.
*SOLUCIONES POSIBLES 2: Que atomic_commit() compruebe si ha sido llamada ya, y si ya ha sido llamada que retorne sin hacer nada. También habría que marcar cuándo se han completado los cambios solicitados en el commit, para considerar que "ya no se ha llamado". De ese modo, podemos llamarla desde SwapBuffers() o desde MoveCursor(), y sólo meterá el commit en el kernel una vez por cada vysnc.
EL PROBLEMA es que es posible que, si es MoveCUrsor() la que llama a atomic_commit() y después llega la llamada a drm_atomic_setbuffer() de SwapWindow() (que es donde pedimos el pageflip) pues en el atomic_commit() no entran los cambios solicitados en SwapWindow(), y eso afecta al framerate del juego.
CONCLUSIÓN: SIN UN SISTEMA DE VENTANAS QUE MUEVA EL CURSOR POR SU CUENTA, NO HAY SOLUCIÓN.
